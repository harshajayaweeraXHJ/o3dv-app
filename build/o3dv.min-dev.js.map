{
  "version": 3,
  "sources": ["../source/engine/main.js", "../source/engine/core/taskrunner.js", "../source/engine/core/core.js", "../source/engine/io/fileutils.js", "../source/engine/io/textwriter.js", "../source/engine/io/binaryreader.js", "../source/engine/io/binarywriter.js", "../source/engine/io/externallibs.js", "../source/engine/io/bufferutils.js", "../source/engine/geometry/geometry.js", "../source/engine/viewer/measuretool.js", "../source/engine/geometry/coord3d.js", "../source/engine/model/color.js", "../source/engine/geometry/coord2d.js", "../source/engine/model/material.js", "../source/engine/model/object.js", "../source/engine/model/mesh.js", "../source/engine/model/triangle.js", "../source/engine/threejs/threeutils.js", "../source/engine/viewer/domutils.js", "../source/engine/geometry/tween.js", "../source/engine/viewer/navigation.js", "../source/engine/viewer/viewergeometry.js", "../source/engine/viewer/viewer.js", "../source/engine/import/filelist.js", "../source/engine/geometry/quaternion.js", "../source/engine/geometry/matrix.js", "../source/engine/geometry/transformation.js", "../source/engine/model/meshutils.js", "../source/engine/geometry/box3d.js", "../source/engine/geometry/octree.js", "../source/engine/model/topology.js", "../source/engine/model/modelutils.js", "../source/engine/model/property.js", "../source/engine/model/meshinstance.js", "../source/engine/model/node.js", "../source/engine/model/model.js", "../source/engine/model/modelfinalization.js", "../source/engine/import/importerbase.js", "../source/engine/import/importerutils.js", "../source/engine/import/importer3dm.js", "../source/engine/import/importer3ds.js", "../source/engine/geometry/coord4d.js", "../source/engine/import/importergltf.js", "../source/engine/import/importerifc.js", "../source/engine/model/generator.js", "../source/engine/import/importero3dv.js", "../source/engine/import/importerobj.js", "../source/engine/import/importeroff.js", "../source/engine/import/importerply.js", "../source/engine/import/importerstl.js", "../source/engine/import/importerthree.js", "../source/engine/import/importer.js", "../source/engine/parameters/parameterlist.js", "../source/engine/threejs/threeconverter.js", "../source/engine/threejs/threemodelloader.js", "../source/engine/viewer/embeddedviewer.js", "../source/engine/model/quantities.js", "../source/engine/model/meshbuffer.js", "../source/engine/export/exporterbase.js", "../source/engine/export/exporter3dm.js", "../source/engine/export/exportergltf.js", "../source/engine/export/exportermodel.js", "../source/engine/export/exporterobj.js", "../source/engine/export/exporteroff.js", "../source/engine/export/exporterply.js", "../source/engine/export/exporterstl.js", "../source/engine/export/exporter.js", "../source/engine/import/importersvg.js"],
  "sourcesContent": ["import { TaskRunner, RunTaskAsync, RunTasks, RunTasksBatch, WaitWhile } from './core/taskrunner.js';\nimport { IsDefined, ValueOrDefault, CopyObjectAttributes } from './core/core.js';\nimport { GetFileName, GetFileExtension, RequestUrl, ReadFile, TransformFileHostUrls, FileSource, FileFormat } from './io/fileutils.js';\nimport { TextWriter } from './io/textwriter.js';\nimport { BinaryReader } from './io/binaryreader.js';\nimport { BinaryWriter } from './io/binarywriter.js';\nimport { SetExternalLibLocation, LoadExternalLibrary } from './io/externallibs.js';\nimport { ArrayBufferToUtf8String, ArrayBufferToAsciiString, AsciiStringToArrayBuffer, Utf8StringToArrayBuffer, Base64DataURIToArrayBuffer, GetFileExtensionFromMimeType, CreateObjectUrl, CreateObjectUrlWithMimeType, RevokeObjectUrl } from './io/bufferutils.js';\nimport { MeasureTool } from './viewer/measuretool.js';\nimport { UpVector, ShadingModel, Viewer, GetDefaultCamera, TraverseThreeObject, GetShadingTypeOfObject } from './viewer/viewer.js';\nimport { EmbeddedViewer, Init3DViewerElement, Init3DViewerElements } from './viewer/embeddedviewer.js';\nimport { Camera, MouseInteraction, TouchInteraction, ClickDetector, Navigation, CameraIsEqual3D, NavigationType } from './viewer/navigation.js';\nimport { GetIntegerFromStyle, GetDomElementExternalWidth, GetDomElementExternalHeight, GetDomElementInnerDimensions, GetDomElementClientCoordinates, CreateDomElement, AddDomElement, AddDiv, ClearDomElement, InsertDomElementBefore, InsertDomElementAfter, ShowDomElement, IsDomElementVisible, SetDomElementWidth, SetDomElementHeight, GetDomElementOuterWidth, GetDomElementOuterHeight, SetDomElementOuterWidth, SetDomElementOuterHeight, AddCheckbox, AddRangeSlider, AddSelect, AddToggle, CreateDiv } from './viewer/domutils.js';\nimport { ViewerGeometry, ViewerExtraGeometry, SetThreeMeshPolygonOffset } from './viewer/viewergeometry.js';\nimport { GetTriangleArea, GetTetrahedronSignedVolume, CalculateVolume, CalculateSurfaceArea } from './model/quantities.js';\nimport { Mesh } from './model/mesh.js';\nimport { TextureMap, MaterialBase, FaceMaterial, PhongMaterial, PhysicalMaterial, TextureMapIsEqual, TextureIsEqual, MaterialType } from './model/material.js';\nimport { IsModelEmpty, GetBoundingBox, GetTopology, IsSolid, HasDefaultMaterial, ReplaceDefaultMaterialColor } from './model/modelutils.js';\nimport { Object3D, ModelObject3D } from './model/object.js';\nimport { Property, PropertyGroup, PropertyType } from './model/property.js';\nimport { GetMeshType, CalculateTriangleNormal, TransformMesh, FlipMeshTrianglesOrientation, MeshType } from './model/meshutils.js';\nimport { Color, ColorComponentFromFloat, ColorFromFloatComponents, SRGBToLinear, LinearToSRGB, IntegerToHexString, ColorToHexString, HexStringToColor, ArrayToColor, ColorIsEqual } from './model/color.js';\nimport { MeshInstanceId, MeshInstance } from './model/meshinstance.js';\nimport { Node, NodeType } from './model/node.js';\nimport { FinalizeModel, CheckModel } from './model/modelfinalization.js';\nimport { GeneratorParams, Generator, GeneratorHelper, GenerateCuboid, GenerateCylinder, GenerateSphere, GeneratePlatonicSolid } from './model/generator.js';\nimport { Model } from './model/model.js';\nimport { MeshPrimitiveBuffer, MeshBuffer, ConvertMeshToMeshBuffer } from './model/meshbuffer.js';\nimport { Triangle } from './model/triangle.js';\nimport { TopologyVertex, TopologyEdge, TopologyTriangleEdge, TopologyTriangle, Topology } from './model/topology.js';\nimport { ParameterListBuilder, ParameterListParser, CreateUrlBuilder, CreateUrlParser, CreateModelUrlParameters, ParameterConverter } from './parameters/parameterlist.js';\nimport { Quaternion, QuaternionIsEqual, ArrayToQuaternion, QuaternionFromAxisAngle, QuaternionFromXYZ } from './geometry/quaternion.js';\nimport { Coord2D, CoordIsEqual2D, AddCoord2D, SubCoord2D, CoordDistance2D } from './geometry/coord2d.js';\nimport { Coord3D, CoordIsEqual3D, AddCoord3D, SubCoord3D, CoordDistance3D, DotVector3D, VectorAngle3D, CrossVector3D, VectorLength3D, ArrayToCoord3D } from './geometry/coord3d.js';\nimport { Coord4D } from './geometry/coord4d.js';\nimport { Matrix, MatrixIsEqual } from './geometry/matrix.js';\nimport { Transformation, TransformationIsEqual } from './geometry/transformation.js';\nimport { Box3D, BoundingBoxCalculator3D } from './geometry/box3d.js';\nimport { OctreeNode, Octree } from './geometry/octree.js';\nimport { BezierTweenFunction, LinearTweenFunction, ParabolicTweenFunction, TweenCoord3D } from './geometry/tween.js';\nimport { IsZero, IsLower, IsGreater, IsLowerOrEqual, IsGreaterOrEqual, IsEqual, IsEqualEps, IsPositive, IsNegative, Eps, BigEps, RadDeg, DegRad, Direction } from './geometry/geometry.js';\nimport { Exporter } from './export/exporter.js';\nimport { ExporterObj } from './export/exporterobj.js';\nimport { ExporterSettings, ExporterModel } from './export/exportermodel.js';\nimport { ExportedFile, ExporterBase } from './export/exporterbase.js';\nimport { ExporterStl } from './export/exporterstl.js';\nimport { ExporterOff } from './export/exporteroff.js';\nimport { Exporter3dm } from './export/exporter3dm.js';\nimport { ExporterPly } from './export/exporterply.js';\nimport { ExporterGltf } from './export/exportergltf.js';\nimport { NameFromLine, ParametersFromLine, ReadLines, IsPowerOfTwo, NextPowerOfTwo, UpdateMaterialTransparency } from './import/importerutils.js';\nimport { ImporterThreeSvg } from './import/importersvg.js';\nimport { ImporterGltf } from './import/importergltf.js';\nimport { ImporterObj } from './import/importerobj.js';\nimport { Importer3ds } from './import/importer3ds.js';\nimport { ImporterStl } from './import/importerstl.js';\nimport { File, FileList } from './import/filelist.js';\nimport { ImportSettings, ImportError, ImportResult, ImporterFileAccessor, Importer, ImportErrorCode } from './import/importer.js';\nimport { Importer3dm } from './import/importer3dm.js';\nimport { ImporterOff } from './import/importeroff.js';\nimport { ImporterThreeBase, ImporterThreeFbx, ImporterThreeDae, ImporterThreeWrl, ImporterThree3mf } from './import/importerthree.js';\nimport { ImporterBase } from './import/importerbase.js';\nimport { ImporterO3dv } from './import/importero3dv.js';\nimport { ImporterPly } from './import/importerply.js';\nimport { ImporterIfc } from './import/importerifc.js';\nimport { ModelToThreeConversionParams, ModelToThreeConversionOutput, ThreeConversionStateHandler, ThreeNodeTree, ConvertModelToThreeObject } from './threejs/threeconverter.js';\nimport { ThreeModelLoader } from './threejs/threemodelloader.js';\nimport { HasHighpDriverIssue, GetShadingType, ConvertThreeColorToColor, ConvertColorToThreeColor, ConvertThreeGeometryToMesh, ShadingType } from './threejs/threeutils.js';\n\nexport {\n    TaskRunner,\n    RunTaskAsync,\n    RunTasks,\n    RunTasksBatch,\n    WaitWhile,\n    IsDefined,\n    ValueOrDefault,\n    CopyObjectAttributes,\n    GetFileName,\n    GetFileExtension,\n    RequestUrl,\n    ReadFile,\n    TransformFileHostUrls,\n    FileSource,\n    FileFormat,\n    TextWriter,\n    BinaryReader,\n    BinaryWriter,\n    SetExternalLibLocation,\n    LoadExternalLibrary,\n    ArrayBufferToUtf8String,\n    ArrayBufferToAsciiString,\n    AsciiStringToArrayBuffer,\n    Utf8StringToArrayBuffer,\n    Base64DataURIToArrayBuffer,\n    GetFileExtensionFromMimeType,\n    CreateObjectUrl,\n    CreateObjectUrlWithMimeType,\n    RevokeObjectUrl,\n    MeasureTool,\n    UpVector,\n    ShadingModel,\n    Viewer,\n    GetDefaultCamera,\n    TraverseThreeObject,\n    GetShadingTypeOfObject,\n    EmbeddedViewer,\n    Init3DViewerElement,\n    Init3DViewerElements,\n    Camera,\n    MouseInteraction,\n    TouchInteraction,\n    ClickDetector,\n    Navigation,\n    CameraIsEqual3D,\n    NavigationType,\n    GetIntegerFromStyle,\n    GetDomElementExternalWidth,\n    GetDomElementExternalHeight,\n    GetDomElementInnerDimensions,\n    GetDomElementClientCoordinates,\n    CreateDomElement,\n    AddDomElement,\n    AddDiv,\n    ClearDomElement,\n    InsertDomElementBefore,\n    InsertDomElementAfter,\n    ShowDomElement,\n    IsDomElementVisible,\n    SetDomElementWidth,\n    SetDomElementHeight,\n    GetDomElementOuterWidth,\n    GetDomElementOuterHeight,\n    SetDomElementOuterWidth,\n    SetDomElementOuterHeight,\n    AddCheckbox,\n    AddRangeSlider,\n    AddSelect,\n    AddToggle,\n    CreateDiv,\n    ViewerGeometry,\n    ViewerExtraGeometry,\n    SetThreeMeshPolygonOffset,\n    GetTriangleArea,\n    GetTetrahedronSignedVolume,\n    CalculateVolume,\n    CalculateSurfaceArea,\n    Mesh,\n    TextureMap,\n    MaterialBase,\n    FaceMaterial,\n    PhongMaterial,\n    PhysicalMaterial,\n    TextureMapIsEqual,\n    TextureIsEqual,\n    MaterialType,\n    IsModelEmpty,\n    GetBoundingBox,\n    GetTopology,\n    IsSolid,\n    HasDefaultMaterial,\n    ReplaceDefaultMaterialColor,\n    Object3D,\n    ModelObject3D,\n    Property,\n    PropertyGroup,\n    PropertyType,\n    GetMeshType,\n    CalculateTriangleNormal,\n    TransformMesh,\n    FlipMeshTrianglesOrientation,\n    MeshType,\n    Color,\n    ColorComponentFromFloat,\n    ColorFromFloatComponents,\n    SRGBToLinear,\n    LinearToSRGB,\n    IntegerToHexString,\n    ColorToHexString,\n    HexStringToColor,\n    ArrayToColor,\n    ColorIsEqual,\n    MeshInstanceId,\n    MeshInstance,\n    Node,\n    NodeType,\n    FinalizeModel,\n    CheckModel,\n    GeneratorParams,\n    Generator,\n    GeneratorHelper,\n    GenerateCuboid,\n    GenerateCylinder,\n    GenerateSphere,\n    GeneratePlatonicSolid,\n    Model,\n    MeshPrimitiveBuffer,\n    MeshBuffer,\n    ConvertMeshToMeshBuffer,\n    Triangle,\n    TopologyVertex,\n    TopologyEdge,\n    TopologyTriangleEdge,\n    TopologyTriangle,\n    Topology,\n    ParameterListBuilder,\n    ParameterListParser,\n    CreateUrlBuilder,\n    CreateUrlParser,\n    CreateModelUrlParameters,\n    ParameterConverter,\n    Quaternion,\n    QuaternionIsEqual,\n    ArrayToQuaternion,\n    QuaternionFromAxisAngle,\n    QuaternionFromXYZ,\n    Coord2D,\n    CoordIsEqual2D,\n    AddCoord2D,\n    SubCoord2D,\n    CoordDistance2D,\n    Coord3D,\n    CoordIsEqual3D,\n    AddCoord3D,\n    SubCoord3D,\n    CoordDistance3D,\n    DotVector3D,\n    VectorAngle3D,\n    CrossVector3D,\n    VectorLength3D,\n    ArrayToCoord3D,\n    Coord4D,\n    Matrix,\n    MatrixIsEqual,\n    Transformation,\n    TransformationIsEqual,\n    Box3D,\n    BoundingBoxCalculator3D,\n    OctreeNode,\n    Octree,\n    BezierTweenFunction,\n    LinearTweenFunction,\n    ParabolicTweenFunction,\n    TweenCoord3D,\n    IsZero,\n    IsLower,\n    IsGreater,\n    IsLowerOrEqual,\n    IsGreaterOrEqual,\n    IsEqual,\n    IsEqualEps,\n    IsPositive,\n    IsNegative,\n    Eps,\n    BigEps,\n    RadDeg,\n    DegRad,\n    Direction,\n    Exporter,\n    ExporterObj,\n    ExporterSettings,\n    ExporterModel,\n    ExportedFile,\n    ExporterBase,\n    ExporterStl,\n    ExporterOff,\n    Exporter3dm,\n    ExporterPly,\n    ExporterGltf,\n    NameFromLine,\n    ParametersFromLine,\n    ReadLines,\n    IsPowerOfTwo,\n    NextPowerOfTwo,\n    UpdateMaterialTransparency,\n    ImporterThreeSvg,\n    ImporterGltf,\n    ImporterObj,\n    Importer3ds,\n    ImporterStl,\n    File,\n    FileList,\n    ImportSettings,\n    ImportError,\n    ImportResult,\n    ImporterFileAccessor,\n    Importer,\n    ImportErrorCode,\n    Importer3dm,\n    ImporterOff,\n    ImporterThreeBase,\n    ImporterThreeFbx,\n    ImporterThreeDae,\n    ImporterThreeWrl,\n    ImporterThree3mf,\n    ImporterBase,\n    ImporterO3dv,\n    ImporterPly,\n    ImporterIfc,\n    ModelToThreeConversionParams,\n    ModelToThreeConversionOutput,\n    ThreeConversionStateHandler,\n    ThreeNodeTree,\n    ConvertModelToThreeObject,\n    ThreeModelLoader,\n    HasHighpDriverIssue,\n    GetShadingType,\n    ConvertThreeColorToColor,\n    ConvertColorToThreeColor,\n    ConvertThreeGeometryToMesh,\n    ShadingType\n};\n", "export class TaskRunner\n{\n    constructor ()\n    {\n        this.count = null;\n        this.current = null;\n        this.callbacks = null;\n    }\n\n\tRun (count, callbacks)\n\t{\n        this.count = count;\n\t\tthis.current = 0;\n        this.callbacks = callbacks;\n        if (count === 0) {\n            this.TaskReady ();\n        } else {\n            this.RunOnce ();\n        }\n\t}\n\n    RunBatch (count, batchCount, callbacks)\n    {\n        let stepCount = 0;\n        if (count > 0) {\n            stepCount = parseInt ((count - 1) / batchCount, 10) + 1;\n        }\n        this.Run (stepCount, {\n            runTask : (index, ready) => {\n                const firstIndex = index * batchCount;\n                const lastIndex = Math.min ((index + 1) * batchCount, count) - 1;\n                callbacks.runTask (firstIndex, lastIndex, ready);\n            },\n            onReady : callbacks.onReady\n        });\n    }\n\n    RunOnce ()\n    {\n        setTimeout (() => {\n            this.callbacks.runTask (this.current, this.TaskReady.bind (this));\n        }, 0);\n    }\n\n    TaskReady ()\n    {\n        this.current += 1;\n        if (this.current < this.count) {\n            this.RunOnce ();\n        } else {\n            if (this.callbacks.onReady) {\n                this.callbacks.onReady ();\n            }\n        }\n    }\n}\n\nexport function RunTaskAsync (task)\n{\n    setTimeout (() => {\n        task ();\n    }, 0);\n}\n\nexport function RunTasks (count, callbacks)\n{\n    let taskRunner = new TaskRunner ();\n    taskRunner.Run (count, callbacks);\n}\n\nexport function RunTasksBatch (count, batchCount, callbacks)\n{\n    let taskRunner = new TaskRunner ();\n    taskRunner.RunBatch (count, batchCount, callbacks);\n}\n\nexport function WaitWhile (expression)\n{\n    function Waiter (expression)\n    {\n        if (expression ()) {\n            setTimeout (() => {\n                Waiter (expression);\n            }, 1);\n        }\n    }\n    Waiter (expression);\n}\n", "export function IsDefined (val)\n{\n    return val !== undefined && val !== null;\n}\n\nexport function ValueOrDefault (val, def)\n{\n    if (val === undefined || val === null) {\n        return def;\n    }\n    return val;\n}\n\nexport function CopyObjectAttributes (src, dest)\n{\n    if (!IsDefined (src)) {\n        return;\n    }\n    for (let attribute of Object.keys (src)) {\n        if (IsDefined (src[attribute])) {\n            dest[attribute] = src[attribute];\n        }\n    }\n}\n", "export const FileSource =\n{\n    Url : 1,\n    File : 2,\n\tDecompressed : 3\n};\n\nexport const FileFormat =\n{\n    Text : 1,\n    Binary : 2\n};\n\nexport function GetFileName (filePath)\n{\n\tlet firstSeparator = filePath.lastIndexOf ('/');\n\tif (firstSeparator === -1) {\n\t\tfirstSeparator = filePath.lastIndexOf ('\\\\');\n\t}\n\tlet fileName = filePath;\n\tif (firstSeparator !== -1) {\n\t\tfileName = filePath.substring (firstSeparator + 1);\n\t}\n\tlet firstParamIndex = fileName.indexOf ('?');\n\tif (firstParamIndex !== -1) {\n\t\tfileName = fileName.substring (0, firstParamIndex);\n\t}\n\treturn decodeURI (fileName);\n}\n\nexport function GetFileExtension (filePath)\n{\n\tlet fileName = GetFileName (filePath);\n\tlet firstPoint = fileName.lastIndexOf ('.');\n\tif (firstPoint === -1) {\n\t\treturn '';\n\t}\n\tlet extension = fileName.substring (firstPoint + 1);\n\treturn extension.toLowerCase ();\n}\n\nexport function RequestUrl (url, format)\n{\n\treturn new Promise ((resolve, reject) => {\n\t\tlet request = new XMLHttpRequest ();\n\t\trequest.open ('GET', url, true);\n\t\tif (format === FileFormat.Text) {\n\t\t\trequest.responseType = 'text';\n\t\t} else if (format === FileFormat.Binary) {\n\t\t\trequest.responseType = 'arraybuffer';\n\t\t} else {\n\t\t\treject ();\n\t\t\treturn;\n\t\t}\n\n\t\trequest.onload = function () {\n\t\t\tif (request.status === 200) {\n\t\t\t\tresolve (request.response);\n\t\t\t} else {\n\t\t\t\treject ();\n\t\t\t}\n\t\t};\n\n\t\trequest.onerror = function () {\n\t\t\treject ();\n\t\t};\n\n\t\trequest.send (null);\n\t});\n}\n\nexport function ReadFile (file, format)\n{\n\treturn new Promise ((resolve, reject) => {\n\t\tlet reader = new FileReader ();\n\n\t\treader.onloadend = function (event) {\n\t\t\tif (event.target.readyState === FileReader.DONE) {\n\t\t\t\tresolve (event.target.result);\n\t\t\t}\n\t\t};\n\n\t\treader.onerror = function () {\n\t\t\treject ();\n\t\t};\n\n\t\tif (format === FileFormat.Text) {\n\t\t\treader.readAsText (file);\n\t\t} else if (format === FileFormat.Binary) {\n\t\t\treader.readAsArrayBuffer (file);\n\t\t} else {\n\t\t\treject ();\n\t\t}\n\t});\n}\n\nexport function TransformFileHostUrls (urls)\n{\n    for (let i = 0; i < urls.length; i++) {\n        let url = urls[i];\n        if (url.search (/www\\.dropbox\\.com/u) !== -1) {\n            url = url.replace ('www.dropbox.com', 'dl.dropbox.com');\n            let separatorPos = url.indexOf ('?');\n            if (separatorPos !== -1) {\n                url = url.substring (0, separatorPos);\n            }\n            urls[i] = url;\n        } else if (url.search (/github\\.com/u) !== -1) {\n            url = url.replace ('github.com', 'raw.githubusercontent.com');\n            url = url.replace ('/blob', '');\n            let separatorPos = url.indexOf ('?');\n            if (separatorPos !== -1) {\n                url = url.substring (0, separatorPos);\n            }\n            urls[i] = url;\n        }\n    }\n}\n", "export class TextWriter\n{\n\tconstructor ()\n\t{\n\t\tthis.text = '';\n\t\tthis.indentation = 0;\n\t}\n\n\tGetText ()\n\t{\n\t\treturn this.text;\n\t}\n\n\tIndent (diff)\n\t{\n\t\tthis.indentation += diff;\n\t}\n\n\tWriteArrayLine (arr)\n\t{\n\t\tthis.WriteLine (arr.join (' '));\n\t}\n\n\tWriteLine (str)\n\t{\n\t\tthis.WriteIndentation ();\n\t\tthis.Write (str + '\\n');\n\t}\n\n\tWriteIndentation ()\n\t{\n\t\tfor (let i = 0; i < this.indentation; i++) {\n\t\t\tthis.Write ('  ');\n\t\t}\n\t}\n\n\tWrite (str)\n\t{\n\t\tthis.text += str;\n\t}\n}\n", "export class BinaryReader\n{\n    constructor (arrayBuffer, isLittleEndian)\n    {\n        this.arrayBuffer = arrayBuffer;\n        this.dataView = new DataView (arrayBuffer);\n        this.isLittleEndian = isLittleEndian;\n        this.position = 0;\n    }\n\n    GetPosition ()\n    {\n        return this.position;\n    }\n\n    SetPosition (position)\n    {\n        this.position = position;\n    }\n\n    GetByteLength ()\n    {\n        return this.arrayBuffer.byteLength;\n    }\n\n    Skip (bytes)\n    {\n        this.position = this.position + bytes;\n    }\n\n    End ()\n    {\n        return this.position >= this.arrayBuffer.byteLength;\n    }\n\n    ReadArrayBuffer (byteLength)\n    {\n        let originalBufferView = new Uint8Array (this.arrayBuffer);\n        let arrayBuffer = new ArrayBuffer (byteLength);\n        let bufferView = new Uint8Array (arrayBuffer);\n        let subArray = originalBufferView.subarray (this.position, this.position + byteLength);\n        bufferView.set (subArray, 0);\n        this.position += byteLength;\n        return arrayBuffer;\n    }\n\n    ReadBoolean8 ()\n    {\n        let result = this.dataView.getInt8 (this.position);\n        this.position = this.position + 1;\n        return result ? true : false;\n    }\n\n    ReadCharacter8 ()\n    {\n        let result = this.dataView.getInt8 (this.position);\n        this.position = this.position + 1;\n        return result;\n    }\n\n    ReadUnsignedCharacter8 ()\n    {\n        let result = this.dataView.getUint8 (this.position);\n        this.position = this.position + 1;\n        return result;\n    }\n\n    ReadInteger16 ()\n    {\n        let result = this.dataView.getInt16 (this.position, this.isLittleEndian);\n        this.position = this.position + 2;\n        return result;\n    }\n\n    ReadUnsignedInteger16 ()\n    {\n        let result = this.dataView.getUint16 (this.position, this.isLittleEndian);\n        this.position = this.position + 2;\n        return result;\n    }\n\n    ReadInteger32 ()\n    {\n        let result = this.dataView.getInt32 (this.position, this.isLittleEndian);\n        this.position = this.position + 4;\n        return result;\n    }\n\n    ReadUnsignedInteger32 ()\n    {\n        let result = this.dataView.getUint32 (this.position, this.isLittleEndian);\n        this.position = this.position + 4;\n        return result;\n    }\n\n    ReadFloat32 ()\n    {\n        let result = this.dataView.getFloat32 (this.position, this.isLittleEndian);\n        this.position = this.position + 4;\n        return result;\n    }\n\n    ReadDouble64 ()\n    {\n        let result = this.dataView.getFloat64 (this.position, this.isLittleEndian);\n        this.position = this.position + 8;\n        return result;\n    }\n}\n", "export class BinaryWriter\n{\n    constructor (byteLength, isLittleEndian)\n    {\n        this.arrayBuffer = new ArrayBuffer (byteLength);\n        this.dataView = new DataView (this.arrayBuffer);\n        this.isLittleEndian = isLittleEndian;\n        this.position = 0;\n    }\n\n    GetPosition ()\n    {\n        return this.position;\n    }\n\n    SetPosition (position)\n    {\n        this.position = position;\n    }\n\n    End ()\n    {\n        return this.position >= this.arrayBuffer.byteLength;\n    }\n\n    GetBuffer ()\n    {\n        return this.arrayBuffer;\n    }\n\n    WriteArrayBuffer (arrayBuffer)\n    {\n        let bufferView = new Uint8Array (arrayBuffer);\n        let thisBufferView = new Uint8Array (this.arrayBuffer);\n        thisBufferView.set (bufferView, this.position);\n        this.position += arrayBuffer.byteLength;\n    }\n\n    WriteBoolean8 (val)\n    {\n        this.dataView.setInt8 (this.position, val ? 1 : 0);\n        this.position = this.position + 1;\n    }\n\n    WriteCharacter8 (val)\n    {\n        this.dataView.setInt8 (this.position, val);\n        this.position = this.position + 1;\n    }\n\n    WriteUnsignedCharacter8 (val)\n    {\n        this.dataView.setUint8 (this.position, val);\n        this.position = this.position + 1;\n    }\n\n    WriteInteger16 (val)\n    {\n        this.dataView.setInt16 (this.position, val, this.isLittleEndian);\n        this.position = this.position + 2;\n    }\n\n    WriteUnsignedInteger16 (val)\n    {\n        this.dataView.setUint16 (this.position, val, this.isLittleEndian);\n        this.position = this.position + 2;\n    }\n\n    WriteInteger32 (val)\n    {\n        this.dataView.setInt32 (this.position, val, this.isLittleEndian);\n        this.position = this.position + 4;\n    }\n\n    WriteUnsignedInteger32 (val)\n    {\n        this.dataView.setUint32 (this.position, val, this.isLittleEndian);\n        this.position = this.position + 4;\n    }\n\n    WriteFloat32 (val)\n    {\n        this.dataView.setFloat32 (this.position, val, this.isLittleEndian);\n        this.position = this.position + 4;\n    }\n\n    WriteDouble64 (val)\n    {\n        this.dataView.setFloat64 (this.position, val, this.isLittleEndian);\n        this.position = this.position + 8;\n    }\n}\n", "let externalLibLocation = null;\nlet loadedExternalLibs = new Set ();\n\nexport function SetExternalLibLocation (newExternalLibLocation)\n{\n    externalLibLocation = newExternalLibLocation;\n}\n\nexport function LoadExternalLibrary (libName)\n{\n    return new Promise ((resolve, reject) => {\n        if (externalLibLocation === null) {\n            reject ();\n            return;\n        }\n\n        if (loadedExternalLibs.has (libName)) {\n            resolve ();\n            return;\n        }\n\n        let scriptElement = document.createElement ('script');\n        scriptElement.type = 'text/javascript';\n        scriptElement.src = externalLibLocation + '/' + libName;\n        scriptElement.onload = () => {\n            loadedExternalLibs.add (libName);\n            resolve ();\n        };\n        scriptElement.onerror = () => {\n            reject ();\n        };\n        document.head.appendChild (scriptElement);\n    });\n}\n", "export function ArrayBufferToUtf8String (buffer)\n{\n\tlet decoder = new TextDecoder ('utf-8');\n\treturn decoder.decode (buffer);\n}\n\nexport function ArrayBufferToAsciiString (buffer)\n{\n\tlet text = '';\n\tlet bufferView = new Uint8Array (buffer);\n\tfor (let i = 0; i < bufferView.byteLength; i++) {\n\t\ttext += String.fromCharCode (bufferView[i]);\n\t}\n\treturn text;\n}\n\nexport function AsciiStringToArrayBuffer (str)\n{\n\tlet buffer = new ArrayBuffer (str.length);\n\tlet bufferView = new Uint8Array (buffer);\n\tfor (let i = 0; i < str.length; i++) {\n\t\tbufferView[i] = str.charCodeAt (i);\n\t}\n\treturn buffer;\n}\n\nexport function Utf8StringToArrayBuffer (str)\n{\n\tlet encoder = new TextEncoder ();\n\tlet uint8Array = encoder.encode (str);\n\treturn uint8Array.buffer;\n}\n\nexport function Base64DataURIToArrayBuffer (uri)\n{\n\tlet dataPrefix = 'data:';\n\tif (!uri.startsWith (dataPrefix)) {\n\t\treturn null;\n\t}\n\n\tlet mimeSeparator = uri.indexOf (';');\n\tif (mimeSeparator === -1) {\n\t\treturn null;\n\t}\n\n\tlet bufferSeparator = uri.indexOf (',');\n\tif (bufferSeparator === -1) {\n\t\treturn null;\n\t}\n\n\tlet mimeType = uri.substring (dataPrefix.length, dataPrefix.length + mimeSeparator - 5);\n\tlet base64String = atob (uri.substring (bufferSeparator + 1));\n\tlet buffer = new ArrayBuffer (base64String.length);\n\tlet bufferView = new Uint8Array (buffer);\n\tfor (let i = 0; i < base64String.length; i++) {\n\t\tbufferView[i] = base64String.charCodeAt (i);\n\t}\n\n\treturn {\n\t\tmimeType : mimeType,\n\t\tbuffer : buffer\n\t};\n}\n\nexport function GetFileExtensionFromMimeType (mimeType)\n{\n\tif (mimeType === undefined || mimeType === null) {\n\t\treturn '';\n\t}\n\tlet mimeParts = mimeType.split ('/');\n\tif (mimeParts.length === 0) {\n\t\treturn '';\n\t}\n\treturn mimeParts[mimeParts.length - 1];\n}\n\nexport function CreateObjectUrl (content)\n{\n\tlet blob = new Blob ([content]);\n\tlet url = URL.createObjectURL (blob);\n\treturn url;\n}\n\nexport function CreateObjectUrlWithMimeType (content, mimeType)\n{\n\tlet blob = new Blob ([content], { type : mimeType });\n\tlet url = URL.createObjectURL (blob);\n\treturn url;\n}\n\nexport function RevokeObjectUrl (url)\n{\n\tURL.revokeObjectURL (url);\n}\n", "export const Eps = 0.00000001;\nexport const BigEps = 0.0001;\nexport const RadDeg = 57.29577951308232;\nexport const DegRad = 0.017453292519943;\n\nexport function IsZero (a)\n{\n\treturn Math.abs (a) < Eps;\n}\n\nexport function IsLower (a, b)\n{\n\treturn b - a > Eps;\n}\n\nexport function IsGreater (a, b)\n{\n\treturn a - b > Eps;\n}\n\nexport function IsLowerOrEqual (a, b)\n{\n\treturn b - a > -Eps;\n}\n\nexport function IsGreaterOrEqual (a, b)\n{\n\treturn a - b > -Eps;\n}\n\nexport function IsEqual (a, b)\n{\n\treturn Math.abs (b - a) < Eps;\n}\n\nexport function IsEqualEps (a, b, eps)\n{\n\treturn Math.abs (b - a) < eps;\n}\n\nexport function IsPositive (a)\n{\n\treturn a > Eps;\n}\n\nexport function IsNegative (a)\n{\n\treturn a < -Eps;\n}\n\nexport const Direction =\n{\n\tX : 1,\n\tY : 2,\n\tZ : 3\n};\n", "import { BigEps, IsEqualEps } from '../geometry/geometry.js';\n\nexport class MeasureTool\n{\n    constructor ()\n    {\n        this.viewer = null;\n        this.highlightColor = null;\n\n        this.isActive = false;\n        this.markers = [];\n    }\n\n    Init (viewer, highlightColor)\n    {\n        this.viewer = viewer;\n        this.highlightColor = highlightColor;\n    }\n\n    IsActive ()\n    {\n        return this.isActive;\n    }\n\n    SetActive (isActive)\n    {\n        this.isActive = isActive;\n        if (!this.isActive) {\n            this.Clear ();\n        }\n    }\n\n    Click (mouseCoordinates)\n    {\n        let intersection = this.viewer.GetMeshIntersectionUnderMouse (mouseCoordinates);\n        if (intersection === null) {\n            this.Clear ();\n            return;\n        }\n\n        if (this.markers.length === 2) {\n            this.Clear ();\n        }\n\n        this.AddMarker (intersection);\n    }\n\n    GetMarkerCount ()\n    {\n        return this.markers.length;\n    }\n\n    AddMarker (intersection)\n    {\n        this.markers.push (intersection);\n        this.GenerateMarker (intersection);\n    }\n\n    Calculate ()\n    {\n        if (this.markers.length !== 2) {\n            return null;\n        }\n\n        const a = this.markers[0];\n        const b = this.markers[1];\n        let result = {\n            pointsDistance : null,\n            parallelFacesDistance : null,\n            facesAngle : null\n        };\n\n        const aNormal = this.GetFaceWorldNormal (a);\n        const bNormal = this.GetFaceWorldNormal (b);\n        result.pointsDistance = a.point.distanceTo (b.point);\n        result.facesAngle = aNormal.angleTo (bNormal);\n        if (IsEqualEps (result.facesAngle, 0.0, BigEps) || IsEqualEps (result.facesAngle, Math.PI, BigEps)) {\n            let aPlane = new THREE.Plane ().setFromNormalAndCoplanarPoint (aNormal, a.point);\n            result.parallelFacesDistance = Math.abs (aPlane.distanceToPoint (b.point));\n        }\n        return result;\n    }\n\n    Clear ()\n    {\n        this.viewer.ClearExtra ();\n        this.markers = [];\n    }\n\n    GenerateMarker (intersection)\n    {\n        let boundingSphere = this.viewer.GetBoundingSphere ((meshUserData) => {\n            return true;\n        });\n\n        let coneHeight = boundingSphere.radius / 5.0;\n        let coneRadius = coneHeight / 2.0;\n\n        let coneGeometry = new THREE.ConeGeometry (coneRadius, coneHeight, 32);\n        coneGeometry.translate (0.0, -coneHeight / 2.0, 0.0);\n        coneGeometry.rotateX (-Math.PI / 2);\n\n        let coneMaterial = this.viewer.CreateHighlightMaterial (this.highlightColor);\n        coneMaterial.opacity = 0.6;\n        coneMaterial.transparent = true;\n        let cone = new THREE.Mesh (coneGeometry, coneMaterial);\n\n        let faceNormal = this.GetFaceWorldNormal (intersection);\n        cone.lookAt (faceNormal);\n        cone.position.set (intersection.point.x, intersection.point.y, intersection.point.z);\n\n        this.viewer.AddExtraObject (cone);\n    }\n\n    GetFaceWorldNormal (intersection)\n    {\n        let normalMatrix = new THREE.Matrix4 ();\n        intersection.object.updateWorldMatrix (true, false);\n        normalMatrix.extractRotation (intersection.object.matrixWorld);\n        let faceNormal = intersection.face.normal.clone ();\n        faceNormal.applyMatrix4 (normalMatrix);\n        return faceNormal;\n    }\n}\n", "import { IsEqual } from './geometry.js';\n\nexport class Coord3D\n{\n\tconstructor (x, y, z)\n\t{\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t}\n\n\tLength ()\n\t{\n\t\treturn Math.sqrt (this.x * this.x + this.y * this.y + this.z * this.z);\n\t}\n\n\tMultiplyScalar (scalar)\n\t{\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\t\tthis.z *= scalar;\n\t\treturn this;\n\t}\n\n\tNormalize ()\n\t{\n\t\tlet length = this.Length ();\n\t\tif (length > 0.0) {\n\t\t\tthis.MultiplyScalar (1.0 / length);\n\t\t}\n\t\treturn this;\n\t}\n\n\tOffset (direction, distance)\n\t{\n\t\tlet normal = direction.Clone ().Normalize ();\n\t\tthis.x += normal.x * distance;\n\t\tthis.y += normal.y * distance;\n\t\tthis.z += normal.z * distance;\n\t\treturn this;\n\t}\n\n\tRotate (axis, angle, origo)\n\t{\n\t\tlet normal = axis.Clone ().Normalize ();\n\n\t\tlet u = normal.x;\n\t\tlet v = normal.y;\n\t\tlet w = normal.z;\n\n\t\tlet x = this.x - origo.x;\n\t\tlet y = this.y - origo.y;\n\t\tlet z = this.z - origo.z;\n\n\t\tlet si = Math.sin (angle);\n\t\tlet co = Math.cos (angle);\n\t\tthis.x = - u * (- u * x - v * y - w * z) * (1.0 - co) + x * co + (- w * y + v * z) * si;\n\t\tthis.y = - v * (- u * x - v * y - w * z) * (1.0 - co) + y * co + (w * x - u * z) * si;\n\t\tthis.z = - w * (- u * x - v * y - w * z) * (1.0 - co) + z * co + (- v * x + u * y) * si;\n\n\t\tthis.x += origo.x;\n\t\tthis.y += origo.y;\n\t\tthis.z += origo.z;\n\t\treturn this;\n\t}\n\n\tClone ()\n\t{\n\t\treturn new Coord3D (this.x, this.y, this.z);\n\t}\n}\n\nexport function CoordIsEqual3D (a, b)\n{\n\treturn IsEqual (a.x, b.x) && IsEqual (a.y, b.y) && IsEqual (a.z, b.z);\n}\n\nexport function AddCoord3D (a, b)\n{\n\treturn new Coord3D (a.x + b.x, a.y + b.y, a.z + b.z);\n}\n\nexport function SubCoord3D (a, b)\n{\n\treturn new Coord3D (a.x - b.x, a.y - b.y, a.z - b.z);\n}\n\nexport function CoordDistance3D (a, b)\n{\n\treturn Math.sqrt ((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y) + (a.z - b.z) * (a.z - b.z));\n}\n\nexport function DotVector3D (a, b)\n{\n\treturn a.x * b.x + a.y * b.y + a.z * b.z;\n}\n\nexport function VectorAngle3D (a, b)\n{\n\tlet aDirection = a.Clone ().Normalize ();\n\tlet bDirection = b.Clone ().Normalize ();\n\tif (CoordIsEqual3D (aDirection, bDirection)) {\n\t\treturn 0.0;\n\t}\n\tlet product = DotVector3D (aDirection, bDirection);\n\treturn Math.acos (product);\n}\n\nexport function CrossVector3D (a, b)\n{\n\tlet result = new Coord3D (0.0, 0.0, 0.0);\n\tresult.x = a.y * b.z - a.z * b.y;\n\tresult.y = a.z * b.x - a.x * b.z;\n\tresult.z = a.x * b.y - a.y * b.x;\n\treturn result;\n}\n\nexport function VectorLength3D (x, y, z)\n{\n\treturn Math.sqrt (x * x + y * y + z * z);\n}\n\nexport function ArrayToCoord3D (arr)\n{\n\treturn new Coord3D (arr[0], arr[1], arr[2]);\n}\n", "export class Color\n{\n    constructor (r, g, b)\n    {\n        this.r = r; // 0 .. 255\n        this.g = g; // 0 .. 255\n        this.b = b; // 0 .. 255\n    }\n\n    Set (r, g, b)\n    {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n    }\n\n    Clone ()\n    {\n        return new Color (this.r, this.g, this.b);\n    }\n}\n\nexport function ColorComponentFromFloat (component)\n{\n    return parseInt (Math.round (component * 255.0), 10);\n}\n\nexport function ColorFromFloatComponents (r, g, b)\n{\n    return new Color (\n        ColorComponentFromFloat (r),\n        ColorComponentFromFloat (g),\n        ColorComponentFromFloat (b)\n    );\n}\n\nexport function SRGBToLinear (component)\n{\n    if (component < 0.04045) {\n        return component * 0.0773993808;\n    } else {\n        return Math.pow (component * 0.9478672986 + 0.0521327014, 2.4);\n    }\n}\n\nexport function LinearToSRGB (component)\n{\n    if (component < 0.0031308) {\n        return component * 12.92;\n    } else {\n        return 1.055 * (Math.pow (component, 0.41666)) - 0.055;\n    }\n}\n\nexport function IntegerToHexString (intVal)\n{\n    let result = parseInt (intVal, 10).toString (16);\n    while (result.length < 2) {\n        result = '0' + result;\n    }\n    return result;\n}\n\nexport function ColorToHexString (color)\n{\n    let r = IntegerToHexString (color.r);\n    let g = IntegerToHexString (color.g);\n    let b = IntegerToHexString (color.b);\n    return r + g + b;\n}\n\nexport function HexStringToColor (hexString)\n{\n    if (hexString.length !== 6) {\n        return null;\n    }\n\n    let r = parseInt (hexString.substring (0, 2), 16);\n    let g = parseInt (hexString.substring (2, 4), 16);\n    let b = parseInt (hexString.substring (4, 6), 16);\n    return new Color (r, g, b);\n}\n\nexport function ArrayToColor (arr)\n{\n\treturn new Color (arr[0], arr[1], arr[2]);\n}\n\nexport function ColorIsEqual (a, b)\n{\n\treturn a.r === b.r && a.g === b.g && a.b === b.b;\n}\n", "import { IsEqual } from './geometry.js';\n\nexport class Coord2D\n{\n\tconstructor (x, y)\n\t{\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n\n\tClone ()\n\t{\n\t\treturn new Coord2D (this.x, this.y);\n\t}\n}\n\nexport function CoordIsEqual2D (a, b)\n{\n\treturn IsEqual (a.x, b.x) && IsEqual (a.y, b.y);\n}\n\nexport function AddCoord2D (a, b)\n{\n\treturn new Coord2D (a.x + b.x, a.y + b.y);\n}\n\nexport function SubCoord2D (a, b)\n{\n\treturn new Coord2D (a.x - b.x, a.y - b.y);\n}\n\nexport function CoordDistance2D (a, b)\n{\n\treturn Math.sqrt ((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));\n}\n", "import { Coord2D, CoordIsEqual2D } from '../geometry/coord2d.js';\nimport { IsEqual } from '../geometry/geometry.js';\nimport { Color, ColorIsEqual } from './color.js';\n\nexport class TextureMap\n{\n    constructor ()\n    {\n        this.name = null;\n        this.url = null;\n        this.buffer = null;\n        this.offset = new Coord2D (0.0, 0.0);\n        this.scale = new Coord2D (1.0, 1.0);\n        this.rotation = 0.0; // radians\n    }\n\n    IsValid ()\n    {\n        return this.name !== null && this.url !== null && this.buffer !== null;\n    }\n\n    HasTransformation ()\n    {\n        if (!CoordIsEqual2D (this.offset, new Coord2D (0.0, 0.0))) {\n            return true;\n        }\n        if (!CoordIsEqual2D (this.scale, new Coord2D (1.0, 1.0))) {\n            return true;\n        }\n        if (!IsEqual (this.rotation, 0.0)) {\n            return true;\n        }\n        return false;\n    }\n\n    IsEqual (rhs)\n    {\n        if (this.name !== rhs.name) {\n            return false;\n        }\n        if (this.name !== rhs.name) {\n            return false;\n        }\n        if (this.url !== rhs.url) {\n            return false;\n        }\n        if (!CoordIsEqual2D (this.offset, rhs.offset)) {\n            return false;\n        }\n        if (!CoordIsEqual2D (this.scale, rhs.scale)) {\n            return false;\n        }\n        if (!IsEqual (this.rotation, rhs.rotation)) {\n            return false;\n        }\n        return true;\n    }\n}\n\nexport function TextureMapIsEqual (aTex, bTex)\n{\n    if (aTex === null && bTex === null) {\n        return true;\n    } else if (aTex === null || bTex === null) {\n        return false;\n    }\n    return aTex.IsEqual (bTex);\n}\n\nexport const MaterialType =\n{\n    Phong : 1,\n    Physical : 2\n};\n\nexport class MaterialBase\n{\n    constructor (type)\n    {\n        this.type = type;\n        this.isDefault = false;\n\n        this.name = '';\n        this.color = new Color (0, 0, 0);\n\n        this.vertexColors = false;\n    }\n\n    IsEqual (rhs)\n    {\n        if (this.type !== rhs.type) {\n            return false;\n        }\n        if (this.isDefault !== rhs.isDefault) {\n            return false;\n        }\n        if (this.name !== rhs.name) {\n            return false;\n        }\n        if (!ColorIsEqual (this.color, rhs.color)) {\n            return false;\n        }\n        if (this.vertexColors !== rhs.vertexColors) {\n            return false;\n        }\n        return true;\n    }\n}\n\nexport class FaceMaterial extends MaterialBase\n{\n    constructor (type)\n    {\n        super (type);\n\n        this.emissive = new Color (0, 0, 0);\n\n        this.opacity = 1.0; // 0.0 .. 1.0\n        this.transparent = false;\n\n        this.diffuseMap = null;\n        this.bumpMap = null;\n        this.normalMap = null;\n        this.emissiveMap = null;\n\n        this.alphaTest = 0.0; // 0.0 .. 1.0\n        this.multiplyDiffuseMap = false;\n    }\n\n    IsEqual (rhs)\n    {\n        if (!super.IsEqual (rhs)) {\n            return false;\n        }\n        if (!ColorIsEqual (this.emissive, rhs.emissive)) {\n            return false;\n        }\n        if (!IsEqual (this.opacity, rhs.opacity)) {\n            return false;\n        }\n        if (this.transparent !== rhs.transparent) {\n            return false;\n        }\n        if (!TextureMapIsEqual (this.diffuseMap, rhs.diffuseMap)) {\n            return false;\n        }\n        if (!TextureMapIsEqual (this.bumpMap, rhs.bumpMap)) {\n            return false;\n        }\n        if (!TextureMapIsEqual (this.normalMap, rhs.normalMap)) {\n            return false;\n        }\n        if (!TextureMapIsEqual (this.emissiveMap, rhs.emissiveMap)) {\n            return false;\n        }\n        if (!IsEqual (this.alphaTest, rhs.alphaTest)) {\n            return false;\n        }\n        if (this.multiplyDiffuseMap !== rhs.multiplyDiffuseMap) {\n            return false;\n        }\n        return true;\n    }\n\n    EnumerateTextureMaps (enumerator)\n    {\n        if (this.diffuseMap !== null) {\n            enumerator (this.diffuseMap);\n        }\n        if (this.bumpMap !== null) {\n            enumerator (this.bumpMap);\n        }\n        if (this.normalMap !== null) {\n            enumerator (this.normalMap);\n        }\n        if (this.emissiveMap !== null) {\n            enumerator (this.emissiveMap);\n        }\n    }\n}\n\nexport class PhongMaterial extends FaceMaterial\n{\n    constructor ()\n    {\n        super (MaterialType.Phong);\n\n        this.ambient = new Color (0, 0, 0);\n        this.specular = new Color (0, 0, 0);\n        this.shininess = 0.0; // 0.0 .. 1.0\n        this.specularMap = null;\n    }\n\n    IsEqual (rhs)\n    {\n        if (!super.IsEqual (rhs)) {\n            return false;\n        }\n        if (!ColorIsEqual (this.ambient, rhs.ambient)) {\n            return false;\n        }\n        if (!ColorIsEqual (this.specular, rhs.specular)) {\n            return false;\n        }\n        if (!IsEqual (this.shininess, rhs.shininess)) {\n            return false;\n        }\n        if (!TextureMapIsEqual (this.specularMap, rhs.specularMap)) {\n            return false;\n        }\n        return true;\n    }\n\n    EnumerateTextureMaps (enumerator)\n    {\n        super.EnumerateTextureMaps (enumerator);\n        if (this.specularMap !== null) {\n            enumerator (this.specularMap);\n        }\n    }\n}\n\nexport class PhysicalMaterial extends FaceMaterial\n{\n    constructor ()\n    {\n        super (MaterialType.Physical);\n\n        this.metalness = 0.0; // 0.0 .. 1.0\n        this.roughness = 1.0; // 0.0 .. 1.0\n        this.metalnessMap = null;\n    }\n\n    IsEqual (rhs)\n    {\n        if (!super.IsEqual (rhs)) {\n            return false;\n        }\n        if (!IsEqual (this.metalness, rhs.metalness)) {\n            return false;\n        }\n        if (!IsEqual (this.roughness, rhs.roughness)) {\n            return false;\n        }\n        if (!TextureMapIsEqual (this.metalnessMap, rhs.metalnessMap)) {\n            return false;\n        }\n        return true;\n    }\n\n    EnumerateTextureMaps (enumerator)\n    {\n        super.EnumerateTextureMaps (enumerator);\n        if (this.metalnessMap !== null) {\n            enumerator (this.metalnessMap);\n        }\n    }\n}\n\nexport function TextureIsEqual (a, b)\n{\n    if (a.name !== b.name) {\n        return false;\n    }\n    if (a.name !== b.name) {\n        return false;\n    }\n    if (a.url !== b.url) {\n        return false;\n    }\n    if (!CoordIsEqual2D (a.offset, b.offset)) {\n        return false;\n    }\n    if (!CoordIsEqual2D (a.scale, b.scale)) {\n        return false;\n    }\n    if (!IsEqual (a.rotation, b.rotation)) {\n        return false;\n    }\n    return true;\n}\n", "export class Object3D\n{\n    constructor ()\n    {\n\n    }\n\n    VertexCount ()\n    {\n        return 0;\n    }\n\n    VertexColorCount ()\n    {\n        return 0;\n    }\n\n    NormalCount ()\n    {\n        return 0;\n    }\n\n    TextureUVCount ()\n    {\n        return 0;\n    }\n\n    TriangleCount ()\n    {\n        return 0;\n    }\n\n    EnumerateVertices (onVertex)\n    {\n\n    }\n\n    EnumerateTriangleVertexIndices (onTriangleVertexIndices)\n    {\n\n    }\n\n    EnumerateTriangleVertices (onTriangleVertices)\n    {\n\n    }\n}\n\nexport class ModelObject3D extends Object3D\n{\n    constructor ()\n    {\n        super ();\n        this.name = '';\n        this.propertyGroups = [];\n    }\n\n    GetName ()\n    {\n        return this.name;\n    }\n\n    SetName (name)\n    {\n        this.name = name;\n    }\n\n    PropertyGroupCount ()\n    {\n        return this.propertyGroups.length;\n    }\n\n    AddPropertyGroup (propertyGroup)\n    {\n        this.propertyGroups.push (propertyGroup);\n        return this.propertyGroups.length - 1;\n    }\n\n    GetPropertyGroup (index)\n    {\n        return this.propertyGroups[index];\n    }\n}\n", "import { ModelObject3D } from './object.js';\n\nexport class Mesh extends ModelObject3D\n{\n    constructor ()\n    {\n        super ();\n        this.vertices = [];\n        this.vertexColors = [];\n        this.normals = [];\n        this.uvs = [];\n        this.triangles = [];\n    }\n\n    VertexCount ()\n    {\n        return this.vertices.length;\n    }\n\n    VertexColorCount ()\n    {\n        return this.vertexColors.length;\n    }\n\n    NormalCount ()\n    {\n        return this.normals.length;\n    }\n\n    TextureUVCount ()\n    {\n        return this.uvs.length;\n    }\n\n    TriangleCount ()\n    {\n        return this.triangles.length;\n    }\n\n    AddVertex (vertex)\n    {\n        this.vertices.push (vertex);\n        return this.vertices.length - 1;\n    }\n\n    SetVertex (index, vertex)\n    {\n        this.vertices[index] = vertex;\n    }\n\n    GetVertex (index)\n    {\n        return this.vertices[index];\n    }\n\n    AddVertexColor (color)\n    {\n        this.vertexColors.push (color);\n        return this.vertexColors.length - 1;\n    }\n\n    SetVertexColor (index, color)\n    {\n        this.vertexColors[index] = color;\n    }\n\n    GetVertexColor (index)\n    {\n        return this.vertexColors[index];\n    }\n\n    AddNormal (normal)\n    {\n        this.normals.push (normal);\n        return this.normals.length - 1;\n    }\n\n    SetNormal (index, normal)\n    {\n        this.normals[index] = normal;\n    }\n\n    GetNormal (index)\n    {\n        return this.normals[index];\n    }\n\n    AddTextureUV (uv)\n    {\n        this.uvs.push (uv);\n        return this.uvs.length - 1;\n    }\n\n    SetTextureUV (index, uv)\n    {\n        this.uvs[index] = uv;\n    }\n\n    GetTextureUV (index)\n    {\n        return this.uvs[index];\n    }\n\n    AddTriangle (triangle)\n    {\n        this.triangles.push (triangle);\n        return this.triangles.length - 1;\n    }\n\n    GetTriangle (index)\n    {\n        return this.triangles[index];\n    }\n\n    EnumerateVertices (onVertex)\n    {\n        for (const vertex of this.vertices) {\n            onVertex (vertex);\n        }\n    }\n\n    EnumerateTriangleVertexIndices (onTriangleVertexIndices)\n    {\n        for (const triangle of this.triangles) {\n            onTriangleVertexIndices (triangle.v0, triangle.v1, triangle.v2);\n        }\n    }\n\n    EnumerateTriangleVertices (onTriangleVertices)\n    {\n        for (const triangle of this.triangles) {\n            let v0 = this.vertices[triangle.v0];\n            let v1 = this.vertices[triangle.v1];\n            let v2 = this.vertices[triangle.v2];\n            onTriangleVertices (v0, v1, v2);\n        }\n    }\n\n    Clone ()\n    {\n        let cloned = new Mesh ();\n\n        cloned.SetName (this.GetName ());\n\n        for (let i = 0; i < this.VertexCount (); i++) {\n            let vertex = this.GetVertex (i);\n            cloned.AddVertex (vertex.Clone ());\n        }\n\n        for (let i = 0; i < this.VertexColorCount (); i++) {\n            let color = this.GetVertexColor (i);\n            cloned.AddVertexColor (color.Clone ());\n        }\n\n        for (let i = 0; i < this.NormalCount (); i++) {\n            let normal = this.GetNormal (i);\n            cloned.AddNormal (normal.Clone ());\n        }\n\n        for (let i = 0; i < this.TextureUVCount (); i++) {\n            let uv = this.GetTextureUV (i);\n            cloned.AddTextureUV (uv.Clone ());\n        }\n\n        for (let i = 0; i < this.TriangleCount (); i++) {\n            let triangle = this.GetTriangle (i);\n            cloned.AddTriangle (triangle.Clone ());\n        }\n\n        return cloned;\n    }\n}\n", "export class Triangle\n{\n    constructor (v0, v1, v2)\n    {\n        this.v0 = v0;\n        this.v1 = v1;\n        this.v2 = v2;\n\n        this.c0 = null;\n        this.c1 = null;\n        this.c2 = null;\n\n        this.n0 = null;\n        this.n1 = null;\n        this.n2 = null;\n\n        this.u0 = null;\n        this.u1 = null;\n        this.u2 = null;\n\n        this.mat = null;\n        this.curve = null;\n    }\n\n    HasVertices ()\n    {\n        return this.v0 !== null && this.v1 !== null && this.v2 !== null;\n    }\n\n    HasVertexColors ()\n    {\n        return this.c0 !== null && this.c1 !== null && this.c2 !== null;\n    }\n\n    HasNormals ()\n    {\n        return this.n0 !== null && this.n1 !== null && this.n2 !== null;\n    }\n\n    HasTextureUVs ()\n    {\n        return this.u0 !== null && this.u1 !== null && this.u2 !== null;\n    }\n\n    SetVertices (v0, v1, v2)\n    {\n        this.v0 = v0;\n        this.v1 = v1;\n        this.v2 = v2;\n        return this;\n    }\n\n    SetVertexColors (c0, c1, c2)\n    {\n        this.c0 = c0;\n        this.c1 = c1;\n        this.c2 = c2;\n        return this;\n    }\n\n    SetNormals (n0, n1, n2)\n    {\n        this.n0 = n0;\n        this.n1 = n1;\n        this.n2 = n2;\n        return this;\n    }\n\n    SetTextureUVs (u0, u1, u2)\n    {\n        this.u0 = u0;\n        this.u1 = u1;\n        this.u2 = u2;\n        return this;\n    }\n\n    SetMaterial (mat)\n    {\n        this.mat = mat;\n        return this;\n    }\n\n    SetCurve (curve)\n    {\n        this.curve = curve;\n        return this;\n    }\n\n    Clone ()\n    {\n        let cloned = new Triangle (this.v0, this.v1, this.v2);\n        cloned.SetVertexColors (this.c0, this.c1, this.c2);\n        cloned.SetNormals (this.n0, this.n1, this.n2);\n        cloned.SetTextureUVs (this.u0, this.u1, this.u2);\n        cloned.SetMaterial (this.mat);\n        cloned.SetCurve (this.curve);\n        return cloned;\n    }\n}\n", "import { Coord2D } from '../geometry/coord2d.js';\nimport { Coord3D } from '../geometry/coord3d.js';\nimport { ColorFromFloatComponents } from '../model/color.js';\nimport { MaterialType } from '../model/material.js';\nimport { Mesh } from '../model/mesh.js';\nimport { Triangle } from '../model/triangle.js';\n\n// Some mobile devices say that they support mediump, but in reality they don't. At the end\n// all materials rendered as black. This hack renders a single plane with red material and\n// it checks if it's really red. If it's not, then probably there is a driver issue.\n// https://github.com/kovacsv/Online3DViewer/issues/69\nexport function HasHighpDriverIssue ()\n{\n    let canvas = document.createElement ('canvas');\n    document.body.appendChild (canvas);\n    let parameters = {\n        canvas : canvas,\n        antialias : true\n    };\n\n    let renderer = new THREE.WebGLRenderer (parameters);\n    renderer.setClearColor ('#ffffff', 1);\n    renderer.setSize (10, 10);\n\n    let scene = new THREE.Scene ();\n\n    let ambientLight = new THREE.AmbientLight (0x888888);\n    scene.add (ambientLight);\n\n    let light = new THREE.DirectionalLight (0x888888);\n    light.position.set (0.0, 0.0, 1.0);\n    scene.add (light);\n\n    let camera = new THREE.PerspectiveCamera (45.0, 1.0, 0.1, 1000.0);\n    camera.position.set (0.0, 0.0, 1.0);\n    camera.up.set (0.0, 1.0, 0.0);\n    camera.lookAt (new THREE.Vector3 (0.0, 0.0, 0.0));\n    scene.add (camera);\n\n    let plane = new THREE.PlaneGeometry (1.0, 1.0);\n    let mesh = new THREE.Mesh (plane, new THREE.MeshPhongMaterial ({\n        color : 0xcc0000\n    }));\n    scene.add (mesh);\n    renderer.render (scene, camera);\n\n    let context = renderer.getContext ();\n    let pixels = new Uint8Array (4);\n    context.readPixels(\n        5, 5, 1, 1,\n        context.RGBA,\n        context.UNSIGNED_BYTE,\n        pixels\n    );\n\n    document.body.removeChild (canvas);\n\n    let blackThreshold = 50;\n    if (pixels[0] < blackThreshold && pixels[1] < blackThreshold && pixels[2] < blackThreshold) {\n        return true;\n    }\n    return false;\n}\n\nexport const ShadingType =\n{\n    Phong : 1,\n    Physical : 2\n};\n\nexport function GetShadingType (model)\n{\n    let phongCount = 0;\n    let physicalCount = 0;\n    for (let i = 0; i < model.MaterialCount (); i++) {\n        let material = model.GetMaterial (i);\n        if (material.type === MaterialType.Phong) {\n            phongCount += 1;\n        } else if (material.type === MaterialType.Physical) {\n            physicalCount += 1;\n        }\n    }\n    if (phongCount >= physicalCount) {\n        return ShadingType.Phong;\n    } else {\n        return ShadingType.Physical;\n    }\n}\n\nexport function ConvertThreeColorToColor (threeColor)\n{\n    return ColorFromFloatComponents (threeColor.r, threeColor.g, threeColor.b);\n}\n\nexport function ConvertColorToThreeColor (color)\n{\n    return new THREE.Color (\n        color.r / 255.0,\n        color.g / 255.0,\n        color.b / 255.0\n    );\n}\n\nexport function ConvertThreeGeometryToMesh (threeGeometry, materialIndex)\n{\n    let mesh = new Mesh ();\n\n    let vertices = threeGeometry.attributes.position.array;\n    for (let i = 0; i < vertices.length; i += 3) {\n        let x = vertices[i];\n        let y = vertices[i + 1];\n        let z = vertices[i + 2];\n        mesh.AddVertex (new Coord3D (x, y, z));\n    }\n\n    let hasVertexColors = (threeGeometry.attributes.color !== undefined);\n    if (hasVertexColors) {\n        let colors = threeGeometry.attributes.color.array;\n        let itemSize = threeGeometry.attributes.color.itemSize;\n        for (let i = 0; i < colors.length; i += itemSize) {\n            let threeColor = new THREE.Color (colors[i], colors[i + 1], colors[i + 2]);\n            mesh.AddVertexColor (ConvertThreeColorToColor (threeColor));\n        }\n    }\n\n    let hasNormals = (threeGeometry.attributes.normal !== undefined);\n    if (hasNormals) {\n        let normals = threeGeometry.attributes.normal.array;\n        for (let i = 0; i < normals.length; i += 3) {\n            let x = normals[i];\n            let y = normals[i + 1];\n            let z = normals[i + 2];\n            mesh.AddNormal (new Coord3D (x, y, z));\n        }\n    }\n\n    let hasUVs = (threeGeometry.attributes.uv !== undefined);\n    if (hasUVs) {\n        let uvs = threeGeometry.attributes.uv.array;\n        for (let i = 0; i < uvs.length; i += 2) {\n            let x = uvs[i];\n            let y = uvs[i + 1];\n            mesh.AddTextureUV (new Coord2D (x, y));\n        }\n    }\n\n    let indices = null;\n    if (threeGeometry.index !== null) {\n        indices = threeGeometry.index.array;\n    } else {\n        indices = [];\n        for (let i = 0; i < vertices.length / 3; i++) {\n            indices.push (i);\n        }\n    }\n\n    for (let i = 0; i < indices.length; i += 3) {\n        let v0 = indices[i];\n        let v1 = indices[i + 1];\n        let v2 = indices[i + 2];\n        let triangle = new Triangle (v0, v1, v2);\n        if (hasVertexColors) {\n            triangle.SetVertexColors (v0, v1, v2);\n        }\n        if (hasNormals) {\n            triangle.SetNormals (v0, v1, v2);\n        }\n        if (hasUVs) {\n            triangle.SetTextureUVs (v0, v1, v2);\n        }\n        if (materialIndex !== null) {\n            triangle.SetMaterial (materialIndex);\n        }\n        mesh.AddTriangle (triangle);\n    }\n\n    return mesh;\n}\n", "import { Coord2D } from '../geometry/coord2d.js';\n\nexport function GetIntegerFromStyle (parameter)\n{\n    return Math.round (parseFloat (parameter));\n}\n\nexport function GetDomElementExternalWidth (style)\n{\n    let padding = GetIntegerFromStyle (style.paddingLeft) + GetIntegerFromStyle (style.paddingRight);\n    let border = GetIntegerFromStyle (style.borderLeftWidth) + GetIntegerFromStyle (style.borderRightWidth);\n    let margin = GetIntegerFromStyle (style.marginLeft) + GetIntegerFromStyle (style.marginRight);\n    return padding + border + margin;\n}\n\nexport function GetDomElementExternalHeight (style)\n{\n    let padding = GetIntegerFromStyle (style.paddingTop) + GetIntegerFromStyle (style.paddingBottom);\n    let border = GetIntegerFromStyle (style.borderTopWidth) + GetIntegerFromStyle (style.borderBottomWidth);\n    let margin = GetIntegerFromStyle (style.marginTop) + GetIntegerFromStyle (style.marginBottom);\n    return padding + border + margin;\n}\n\nexport function GetDomElementInnerDimensions (element, outerWidth, outerHeight)\n{\n    let style = getComputedStyle (element);\n    let width = outerWidth - GetDomElementExternalWidth (style);\n    let height = outerHeight - GetDomElementExternalHeight (style);\n    return {\n        width : width,\n        height : height\n    };\n}\n\nexport function GetDomElementClientCoordinates (element, clientX, clientY)\n{\n    if (element.getBoundingClientRect) {\n        let clientRect = element.getBoundingClientRect ();\n        clientX -= clientRect.left;\n        clientY -= clientRect.top;\n    }\n    if (window.pageXOffset && window.pageYOffset) {\n        clientX += window.pageXOffset;\n        clientY += window.pageYOffset;\n    }\n    return (new Coord2D (clientX, clientY));\n}\n\nexport function CreateDomElement (elementType, className, innerHTML)\n{\n    let element = document.createElement (elementType);\n    if (className) {\n        element.className = className;\n    }\n    if (innerHTML) {\n        element.innerHTML = innerHTML;\n    }\n    return element;\n}\n\nexport function AddDomElement (parentElement, elementType, className, innerHTML)\n{\n    let element = CreateDomElement (elementType, className, innerHTML);\n    parentElement.appendChild (element);\n    return element;\n}\n\nexport function AddDiv (parentElement, className, innerHTML)\n{\n    return AddDomElement (parentElement, 'div', className, innerHTML);\n}\n\nexport function ClearDomElement (element)\n{\n    while (element.firstChild) {\n        element.removeChild (element.firstChild);\n    }\n}\n\nexport function InsertDomElementBefore (newElement, existingElement)\n{\n    existingElement.parentNode.insertBefore (newElement, existingElement);\n}\n\nexport function InsertDomElementAfter (newElement, existingElement)\n{\n    existingElement.parentNode.insertBefore (newElement, existingElement.nextSibling);\n}\n\nexport function ShowDomElement (element, show)\n{\n    if (show) {\n        element.style.display = 'block';\n    } else {\n        element.style.display = 'none';\n    }\n}\n\nexport function IsDomElementVisible (element)\n{\n    return element.offsetParent !== null;\n}\n\nexport function SetDomElementWidth (element, width)\n{\n    element.style.width = width.toString () + 'px';\n}\n\nexport function SetDomElementHeight (element, height)\n{\n    element.style.height = height.toString () + 'px';\n}\n\nexport function GetDomElementOuterWidth (element)\n{\n    let style = getComputedStyle (element);\n    return element.offsetWidth + GetIntegerFromStyle (style.marginLeft) + GetIntegerFromStyle (style.marginRight);\n}\n\nexport function GetDomElementOuterHeight (element)\n{\n    let style = getComputedStyle (element);\n    return element.offsetHeight + GetIntegerFromStyle (style.marginTop) + GetIntegerFromStyle (style.marginBottom);\n}\n\nexport function SetDomElementOuterWidth (element, width)\n{\n    let style = getComputedStyle (element);\n    SetDomElementWidth (element, width - GetDomElementExternalWidth (style));\n}\n\nexport function SetDomElementOuterHeight (element, height)\n{\n    let style = getComputedStyle (element);\n    SetDomElementHeight (element, height - GetDomElementExternalHeight (style));\n}\n\nexport function AddCheckbox (parentElement, id, text, isChecked, onChange)\n{\n    let label = AddDomElement (parentElement, 'label');\n    label.setAttribute ('for', id);\n    let check = AddDomElement (label, 'input', 'ov_checkbox');\n    check.setAttribute ('type', 'checkbox');\n    check.setAttribute ('id', id);\n    check.checked = isChecked;\n    AddDomElement (label, 'span', null, text);\n    if (onChange) {\n        check.addEventListener ('change', onChange);\n    }\n    return check;\n}\n\nexport function AddRangeSlider (parentElement, min, max)\n{\n    let slider = AddDomElement (parentElement, 'input', 'ov_slider');\n    slider.setAttribute ('type', 'range');\n    slider.setAttribute ('min', min.toString ());\n    slider.setAttribute ('max', max.toString ());\n    return slider;\n}\n\nexport function AddSelect (parentElement, options, selectedIndex, onChange)\n{\n    let container = AddDiv (parentElement, 'ov_select_container');\n    let select = AddDomElement (container, 'select', 'ov_select');\n    for (let option of options) {\n        AddDomElement (select, 'option', null, option);\n    }\n    select.selectedIndex = selectedIndex;\n    if (onChange) {\n        select.addEventListener ('change', () => {\n            onChange (select.selectedIndex);\n        });\n    }\n    return select;\n}\n\nexport function AddToggle (parentElement, className)\n{\n    function UpdateStatus (toggle, status)\n    {\n        if (status) {\n            toggle.classList.add ('on');\n        } else {\n            toggle.classList.remove ('on');\n        }\n    }\n\n    let status = false;\n    let onChange = null;\n\n    let toggleClassName = 'ov_toggle';\n    if (className) {\n        toggleClassName += ' ' + className;\n    }\n    let toggle = AddDiv (parentElement, toggleClassName);\n    AddDiv (toggle, 'ov_toggle_slider');\n\n    toggle.addEventListener ('click', () => {\n        status = !status;\n        UpdateStatus (toggle, status);\n        if (onChange) {\n            onChange ();\n        }\n    });\n\n    return {\n        element : toggle,\n        GetStatus : () => {\n            return status;\n        },\n        SetStatus : (newStatus) => {\n            status = newStatus;\n            UpdateStatus (toggle, status);\n        },\n        OnChange : (onChangeHandler) => {\n            onChange = onChangeHandler;\n        }\n    };\n}\n\nexport function CreateDiv (className, innerHTML)\n{\n    return CreateDomElement ('div', className, innerHTML);\n}\n", "import { CoordDistance3D, SubCoord3D } from './coord3d.js';\n\nexport function BezierTweenFunction (distance, index, count)\n{\n    let t = index / count;\n\treturn distance * (t * t * (3.0 - 2.0 * t));\n}\n\nexport function LinearTweenFunction (distance, index, count)\n{\n    return index * distance / count;\n}\n\nexport function ParabolicTweenFunction (distance, index, count)\n{\n    let t = index / count;\n    let t2 = t * t;\n    return distance * (t2 / (2.0 * (t2 - t) + 1.0));\n}\n\nexport function TweenCoord3D (a, b, count, tweenFunc)\n{\n\tlet dir = SubCoord3D (b, a).Normalize ();\n\tlet distance = CoordDistance3D (a, b);\n\tlet result = [];\n\tfor (let i = 0; i < count; i++) {\n        let step = tweenFunc (distance, i, count - 1);\n\t\tresult.push (a.Clone ().Offset (dir, step));\n\t}\n\treturn result;\n}\n", "import { Coord2D, CoordDistance2D, SubCoord2D } from '../geometry/coord2d.js';\nimport { CoordDistance3D, CoordIsEqual3D, CrossVector3D, SubCoord3D, VectorAngle3D } from '../geometry/coord3d.js';\nimport { DegRad, IsGreater, IsLower, IsZero } from '../geometry/geometry.js';\nimport { ParabolicTweenFunction, TweenCoord3D } from '../geometry/tween.js';\nimport { GetDomElementClientCoordinates } from './domutils.js';\n\nexport class Camera\n{\n    constructor (eye, center, up)\n    {\n        this.eye = eye;\n        this.center = center;\n        this.up = up;\n    }\n\n    Clone ()\n    {\n        return new Camera (\n            this.eye.Clone (),\n            this.center.Clone (),\n            this.up.Clone ()\n        );\n    }\n}\n\nexport function CameraIsEqual3D (a, b)\n{\n\treturn CoordIsEqual3D (a.eye, b.eye) && CoordIsEqual3D (a.center, b.center) && CoordIsEqual3D (a.up, b.up);\n}\n\nexport class MouseInteraction\n{\n    constructor ()\n    {\n        this.prev = new Coord2D (0.0, 0.0);\n        this.curr = new Coord2D (0.0, 0.0);\n        this.diff = new Coord2D (0.0, 0.0);\n        this.buttons = [];\n    }\n\n    Down (canvas, ev)\n    {\n        this.buttons.push (ev.which);\n        this.curr = this.GetPositionFromEvent (canvas, ev);\n        this.prev = this.curr.Clone ();\n    }\n\n    Move (canvas, ev)\n    {\n        this.curr = this.GetPositionFromEvent (canvas, ev);\n\t\tthis.diff = SubCoord2D (this.curr, this.prev);\n\t\tthis.prev = this.curr.Clone ();\n\t}\n\n\tUp (canvas, ev)\n\t{\n\t\tlet buttonIndex = this.buttons.indexOf (ev.which);\n\t\tif (buttonIndex !== -1) {\n\t\t\tthis.buttons.splice (buttonIndex, 1);\n\t\t}\n\t\tthis.curr = this.GetPositionFromEvent (canvas, ev);\n\t}\n\n\tLeave (canvas, ev)\n\t{\n\t\tthis.buttons = [];\n\t\tthis.curr = this.GetPositionFromEvent (canvas, ev);\n\t}\n\n\tIsButtonDown ()\n\t{\n\t\treturn this.buttons.length > 0;\n\t}\n\n\tGetButton ()\n\t{\n\t\tlet length = this.buttons.length;\n\t\tif (length === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn this.buttons[length - 1];\n\t}\n\n\tGetPosition ()\n\t{\n\t\treturn this.curr;\n\t}\n\n\tGetMoveDiff ()\n\t{\n\t\treturn this.diff;\n\t}\n\n\tGetPositionFromEvent (canvas, ev)\n\t{\n\t\treturn GetDomElementClientCoordinates (canvas, ev.clientX, ev.clientY);\n\t}\n}\n\nexport class TouchInteraction\n{\n\tconstructor ()\n\t{\n\t\tthis.prevPos = new Coord2D (0.0, 0.0);\n\t\tthis.currPos = new Coord2D (0.0, 0.0);\n\t\tthis.diffPos = new Coord2D (0.0, 0.0);\n\t\tthis.prevDist = 0.0;\n\t\tthis.currDist = 0.0;\n\t\tthis.diffDist = 0.0;\n\t\tthis.fingers = 0;\n\t}\n\n\tStart (canvas, ev)\n\t{\n\t\tif (ev.touches.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.fingers = ev.touches.length;\n\n\t\tthis.currPos = this.GetPositionFromEvent (canvas, ev);\n\t\tthis.prevPos = this.currPos.Clone ();\n\n\t\tthis.currDist = this.GetTouchDistanceFromEvent (canvas, ev);\n\t\tthis.prevDist = this.currDist;\n\t}\n\n\tMove (canvas, ev)\n\t{\n\t\tif (ev.touches.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.currPos = this.GetPositionFromEvent (canvas, ev);\n\t\tthis.diffPos = SubCoord2D (this.currPos, this.prevPos);\n\t\tthis.prevPos = this.currPos.Clone ();\n\n\t\tthis.currDist = this.GetTouchDistanceFromEvent (canvas, ev);\n\t\tthis.diffDist = this.currDist - this.prevDist;\n\t\tthis.prevDist = this.currDist;\n\t}\n\n\tEnd (canvas, ev)\n\t{\n\t\tif (ev.touches.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.fingers = 0;\n\t\tthis.currPos = this.GetPositionFromEvent (canvas, ev);\n\t\tthis.currDist = this.GetTouchDistanceFromEvent (canvas, ev);\n\t}\n\n\tIsFingerDown ()\n\t{\n\t\treturn this.fingers !== 0;\n\t}\n\n\tGetFingerCount ()\n\t{\n\t\treturn this.fingers;\n\t}\n\n\tGetPosition ()\n\t{\n\t\treturn this.currPos;\n\t}\n\n\tGetMoveDiff ()\n\t{\n\t\treturn this.diffPos;\n\t}\n\n\tGetDistanceDiff ()\n\t{\n\t\treturn this.diffDist;\n\t}\n\n\tGetPositionFromEvent (canvas, ev)\n\t{\n\t\tlet coord = null;\n\t\tif (ev.touches.length !== 0) {\n\t\t\tlet touchEv = ev.touches[0];\n\t\t\tcoord = GetDomElementClientCoordinates (canvas, touchEv.pageX, touchEv.pageY);\n\t\t}\n\t\treturn coord;\n\t}\n\n\tGetTouchDistanceFromEvent (canvas, ev)\n\t{\n\t\tif (ev.touches.length !== 2) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tlet touchEv1 = ev.touches[0];\n\t\tlet touchEv2 = ev.touches[1];\n\t\tlet distance = CoordDistance2D (\n\t\t\tGetDomElementClientCoordinates (canvas, touchEv1.pageX, touchEv1.pageY),\n\t\t\tGetDomElementClientCoordinates (canvas, touchEv2.pageX, touchEv2.pageY)\n\t\t);\n\t\treturn distance;\n\t}\n}\n\nexport class ClickDetector\n{\n\tconstructor ()\n\t{\n\t\tthis.isClick = false;\n\t\tthis.startPosition = null;\n\t}\n\n\tStart (startPosition)\n\t{\n\t\tthis.isClick = true;\n\t\tthis.startPosition = startPosition;\n\t}\n\n\tMove (currentPosition)\n\t{\n\t\tif (!this.isClick) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.startPosition !== null) {\n\t\t\tconst maxClickDistance = 3.0;\n\t\t\tconst currentDistance = CoordDistance2D (this.startPosition, currentPosition);\n\t\t\tif (currentDistance > maxClickDistance) {\n\t\t\t\tthis.Cancel ();\n\t\t\t}\n\t\t} else {\n\t\t\tthis.Cancel ();\n\t\t}\n\t}\n\n\tEnd ()\n\t{\n\t\tthis.startPosition = null;\n\t}\n\n\tCancel ()\n\t{\n\t\tthis.isClick = false;\n\t\tthis.startPosition = null;\n\t}\n\n\tIsClick ()\n\t{\n\t\treturn this.isClick;\n\t}\n}\n\nexport const NavigationType =\n{\n\tNone : 0,\n\tOrbit : 1,\n\tPan : 2,\n\tZoom : 3\n};\n\nexport class Navigation\n{\n\tconstructor (canvas, camera, callbacks)\n\t{\n\t\tthis.canvas = canvas;\n\t\tthis.camera = camera;\n\t\tthis.callbacks = callbacks;\n\t\tthis.fixUpVector = true;\n\n\t\tthis.mouse = new MouseInteraction ();\n\t\tthis.touch = new TouchInteraction ();\n\t\tthis.clickDetector = new ClickDetector ();\n\n\t\tthis.onMouseClick = null;\n\t\tthis.onMouseMove = null;\n\t\tthis.onContext = null;\n\n\t\tif (this.canvas.addEventListener) {\n\t\t\tthis.canvas.addEventListener ('mousedown', this.OnMouseDown.bind (this));\n\t\t\tthis.canvas.addEventListener ('wheel', this.OnMouseWheel.bind (this));\n\t\t\tthis.canvas.addEventListener ('touchstart', this.OnTouchStart.bind (this));\n\t\t\tthis.canvas.addEventListener ('touchmove', this.OnTouchMove.bind (this));\n\t\t\tthis.canvas.addEventListener ('touchcancel', this.OnTouchEnd.bind (this));\n\t\t\tthis.canvas.addEventListener ('touchend', this.OnTouchEnd.bind (this));\n\t\t\tthis.canvas.addEventListener ('contextmenu', this.OnContextMenu.bind (this));\n\t\t}\n\t\tif (document.addEventListener) {\n\t\t\tdocument.addEventListener ('mousemove', this.OnMouseMove.bind (this));\n\t\t\tdocument.addEventListener ('mouseup', this.OnMouseUp.bind (this));\n\t\t\tdocument.addEventListener ('mouseleave', this.OnMouseLeave.bind (this));\n\t\t}\n\t}\n\n\tSetMouseClickHandler (onMouseClick)\n\t{\n\t\tthis.onMouseClick = onMouseClick;\n\t}\n\n\tSetMouseMoveHandler (onMouseMove)\n\t{\n\t\tthis.onMouseMove = onMouseMove;\n\t}\n\n\tSetContextMenuHandler (onContext)\n\t{\n\t\tthis.onContext = onContext;\n\t}\n\n\tIsFixUpVector ()\n\t{\n\t\treturn this.fixUpVector;\n\t}\n\n\tSetFixUpVector (fixUpVector)\n\t{\n\t\tthis.fixUpVector = fixUpVector;\n\t}\n\n\tGetCamera ()\n\t{\n\t\treturn this.camera;\n\t}\n\n\tSetCamera (camera)\n\t{\n\t\tthis.camera = camera;\n\t}\n\n\tMoveCamera (newCamera, stepCount)\n\t{\n\t\tfunction Step (obj, steps, count, index)\n\t\t{\n\t\t\tobj.camera.eye = steps.eye[index];\n\t\t\tobj.camera.center = steps.center[index];\n\t\t\tobj.camera.up = steps.up[index];\n\t\t\tobj.Update ();\n\n\t\t\tif (index < count - 1) {\n\t\t\t\trequestAnimationFrame (() => {\n\t\t\t\t\tStep (obj, steps, count, index + 1);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (newCamera === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (stepCount === 0 || CameraIsEqual3D (this.camera, newCamera)) {\n\t\t\tthis.camera = newCamera;\n\t\t} else {\n\t\t\tlet tweenFunc = ParabolicTweenFunction;\n\t\t\tlet steps = {\n\t\t\t\teye : TweenCoord3D (this.camera.eye, newCamera.eye, stepCount, tweenFunc),\n\t\t\t\tcenter : TweenCoord3D (this.camera.center, newCamera.center, stepCount, tweenFunc),\n\t\t\t\tup : TweenCoord3D (this.camera.up, newCamera.up, stepCount, tweenFunc)\n\t\t\t};\n\t\t\trequestAnimationFrame (() => {\n\t\t\t\tStep (this, steps, stepCount, 0);\n\t\t\t});\n\t\t}\n\n\t\tthis.Update ();\n\t}\n\n\tGetFitToSphereCamera (center, radius, fov)\n\t{\n\t\tif (IsZero (radius)) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet fitCamera = this.camera.Clone ();\n\n\t\tlet offsetToOrigo = SubCoord3D (fitCamera.center, center);\n\t\tfitCamera.eye = SubCoord3D (fitCamera.eye, offsetToOrigo);\n\t\tfitCamera.center = center.Clone ();\n\n\t\tlet centerEyeDirection = SubCoord3D (fitCamera.eye, fitCamera.center).Normalize ();\n\t\tlet fieldOfView = fov / 2.0;\n\t\tif (this.canvas.width < this.canvas.height) {\n\t\t\tfieldOfView = fieldOfView * this.canvas.width / this.canvas.height;\n\t\t}\n\t\tlet distance = radius / Math.sin (fieldOfView * DegRad);\n\n\t\tfitCamera.eye = fitCamera.center.Clone ().Offset (centerEyeDirection, distance);\n\n\t\treturn fitCamera;\n\t}\n\n\tOnMouseDown (ev)\n\t{\n\t\tev.preventDefault ();\n\n\t\tthis.mouse.Down (this.canvas, ev);\n\t\tthis.clickDetector.Start (this.mouse.GetPosition ());\n\t}\n\n\tOnMouseMove (ev)\n\t{\n\t\tthis.mouse.Move (this.canvas, ev);\n\t\tthis.clickDetector.Move (this.mouse.GetPosition ());\n\t\tif (this.onMouseMove) {\n\t\t\tlet mouseCoords = GetDomElementClientCoordinates (this.canvas, ev.clientX, ev.clientY);\n\t\t\tthis.onMouseMove (mouseCoords);\n\t\t}\n\n\t\tif (!this.mouse.IsButtonDown ()) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet moveDiff = this.mouse.GetMoveDiff ();\n\t\tlet mouseButton = this.mouse.GetButton ();\n\n\t\tlet navigationType = NavigationType.None;\n\t\tif (mouseButton === 1) {\n\t\t\tif (ev.ctrlKey) {\n\t\t\t\tnavigationType = NavigationType.Zoom;\n\t\t\t} else if (ev.shiftKey) {\n\t\t\t\tnavigationType = NavigationType.Pan;\n\t\t\t} else {\n\t\t\t\tnavigationType = NavigationType.Orbit;\n\t\t\t}\n\t\t} else if (mouseButton === 2 || mouseButton === 3) {\n\t\t\tnavigationType = NavigationType.Pan;\n\t\t}\n\n\t\tif (navigationType === NavigationType.Orbit) {\n\t\t\tlet orbitRatio = 0.5;\n\t\t\tthis.Orbit (moveDiff.x * orbitRatio, moveDiff.y * orbitRatio);\n\t\t} else if (navigationType === NavigationType.Pan) {\n\t\t\tlet eyeCenterDistance = CoordDistance3D (this.camera.eye, this.camera.center);\n\t\t\tlet panRatio = 0.001 * eyeCenterDistance;\n\t\t\tthis.Pan (moveDiff.x * panRatio, moveDiff.y * panRatio);\n\t\t} else if (navigationType === NavigationType.Zoom) {\n\t\t\tlet zoomRatio = 0.005;\n\t\t\tthis.Zoom (-moveDiff.y * zoomRatio);\n\t\t}\n\n\t\tthis.Update ();\n\t}\n\n\tOnMouseUp (ev)\n\t{\n\t\tthis.mouse.Up (this.canvas, ev);\n\t\tthis.clickDetector.End ();\n\n\t\tif (this.clickDetector.IsClick ()) {\n\t\t\tlet mouseCoords = this.mouse.GetPosition ();\n\t\t\tthis.Click (ev.which, mouseCoords);\n\t\t}\n\t}\n\n\tOnMouseLeave (ev)\n\t{\n\t\tthis.mouse.Leave (this.canvas, ev);\n\t\tthis.clickDetector.Cancel ();\n\t}\n\n\tOnTouchStart (ev)\n\t{\n\t\tev.preventDefault ();\n\n\t\tthis.touch.Start (this.canvas, ev);\n\t\tthis.clickDetector.Start (this.touch.GetPosition ());\n\t}\n\n\tOnTouchMove (ev)\n\t{\n\t\tev.preventDefault ();\n\n\t\tthis.touch.Move (this.canvas, ev);\n\t\tthis.clickDetector.Move (this.touch.GetPosition ());\n\t\tif (!this.touch.IsFingerDown ()) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet moveDiff = this.touch.GetMoveDiff ();\n\t\tlet distanceDiff = this.touch.GetDistanceDiff ();\n\t\tlet fingerCount = this.touch.GetFingerCount ();\n\n\t\tlet navigationType = NavigationType.None;\n\t\tif (fingerCount === 1) {\n\t\t\tnavigationType = NavigationType.Orbit;\n\t\t} else if (fingerCount === 2) {\n\t\t\tnavigationType = NavigationType.Pan;\n\t\t}\n\n\t\tif (navigationType === NavigationType.Orbit) {\n\t\t\tlet orbitRatio = 0.5;\n\t\t\tthis.Orbit (moveDiff.x * orbitRatio, moveDiff.y * orbitRatio);\n\t\t} else if (navigationType === NavigationType.Pan) {\n\t\t\tlet zoomRatio = 0.005;\n\t\t\tthis.Zoom (distanceDiff * zoomRatio);\n\t\t\tlet panRatio = 0.001 * CoordDistance3D (this.camera.eye, this.camera.center);\n\t\t\tthis.Pan (moveDiff.x * panRatio, moveDiff.y * panRatio);\n\t\t}\n\n\t\tthis.Update ();\n\t}\n\n\tOnTouchEnd (ev)\n\t{\n\t\tev.preventDefault ();\n\n\t\tthis.touch.End (this.canvas, ev);\n\t\tthis.clickDetector.End ();\n\n\t\tif (this.clickDetector.IsClick ()) {\n\t\t\tlet touchCoords = this.touch.GetPosition ();\n\t\t\tif (this.touch.GetFingerCount () === 1) {\n\t\t\t\tthis.Click (1, touchCoords);\n\t\t\t}\n\t\t}\n\t}\n\n\tOnMouseWheel (ev)\n\t{\n\t\tev.preventDefault ();\n\n\t\tlet params = ev || window.event;\n\n\t\tlet delta = -params.deltaY / 40;\n\t\tlet ratio = 0.1;\n\t\tif (delta < 0) {\n\t\t\tratio = ratio * -1.0;\n\t\t}\n\n\t\tthis.Zoom (ratio);\n\t\tthis.Update ();\n\t}\n\n\tOnContextMenu (ev)\n\t{\n\t\tev.preventDefault ();\n\n\t\tif (this.clickDetector.IsClick ()) {\n\t\t\tthis.Context (ev.clientX, ev.clientY);\n\t\t\tthis.clickDetector.Cancel ();\n\t\t}\n\t}\n\n\tOrbit (angleX, angleY)\n\t{\n\t\tlet radAngleX = angleX * DegRad;\n\t\tlet radAngleY = angleY * DegRad;\n\n\t\tlet viewDirection = SubCoord3D (this.camera.center, this.camera.eye).Normalize ();\n\t\tlet horizontalDirection = CrossVector3D (viewDirection, this.camera.up).Normalize ();\n\n\t\tif (this.fixUpVector) {\n\t\t\tlet originalAngle = VectorAngle3D (viewDirection, this.camera.up);\n\t\t\tlet newAngle = originalAngle + radAngleY;\n\t\t\tif (IsGreater (newAngle, 0.0) && IsLower (newAngle, Math.PI)) {\n\t\t\t\tthis.camera.eye.Rotate (horizontalDirection, -radAngleY, this.camera.center);\n\t\t\t}\n\t\t\tthis.camera.eye.Rotate (this.camera.up, -radAngleX, this.camera.center);\n\t\t} else {\n\t\t\tlet verticalDirection = CrossVector3D (horizontalDirection, viewDirection).Normalize ();\n\t\t\tthis.camera.eye.Rotate (horizontalDirection, -radAngleY, this.camera.center);\n\t\t\tthis.camera.eye.Rotate (verticalDirection, -radAngleX, this.camera.center);\n\t\t\tthis.camera.up = verticalDirection;\n\t\t}\n\t}\n\n\tPan (moveX, moveY)\n\t{\n\t\tlet viewDirection = SubCoord3D (this.camera.center, this.camera.eye).Normalize ();\n\t\tlet horizontalDirection = CrossVector3D (viewDirection, this.camera.up).Normalize ();\n\t\tlet verticalDirection = CrossVector3D (horizontalDirection, viewDirection).Normalize ();\n\n\t\tthis.camera.eye.Offset (horizontalDirection, -moveX);\n\t\tthis.camera.center.Offset (horizontalDirection, -moveX);\n\n\t\tthis.camera.eye.Offset (verticalDirection, moveY);\n\t\tthis.camera.center.Offset (verticalDirection, moveY);\n\t}\n\n\tZoom (ratio)\n\t{\n\t\tlet direction = SubCoord3D (this.camera.center, this.camera.eye);\n\t\tlet distance = direction.Length ();\n\t\tlet move = distance * ratio;\n\t\tthis.camera.eye.Offset (direction, move);\n\t}\n\n\tUpdate ()\n\t{\n\t\tthis.callbacks.onUpdate ();\n\t}\n\n\tClick (button, mouseCoords)\n\t{\n\t\tif (this.onMouseClick) {\n\t\t\tthis.onMouseClick (button, mouseCoords);\n\t\t}\n\t}\n\n\tContext (clientX, clientY)\n\t{\n\t\tif (this.onContext) {\n\t\t\tlet globalCoords = {\n\t\t\t\tx : clientX,\n\t\t\t\ty : clientY\n\t\t\t};\n\t\t\tlet localCoords = GetDomElementClientCoordinates (this.canvas, clientX, clientY);\n\t\t\tthis.onContext (globalCoords, localCoords);\n\t\t}\n\t}\n}\n", "import { IsEqual } from '../geometry/geometry.js';\nimport { Color } from '../model/color.js';\nimport { ConvertColorToThreeColor } from '../threejs/threeutils.js';\n\nexport function SetThreeMeshPolygonOffset (mesh, offset)\n{\n    function SetMaterialsPolygonOffset (materials, offset)\n    {\n        for (let material of materials) {\n            material.polygonOffset = offset;\n            material.polygonOffsetUnit = 1;\n            material.polygonOffsetFactor = 1;\n        }\n    }\n\n    SetMaterialsPolygonOffset (mesh.material, offset);\n    if (mesh.userData.threeMaterials) {\n        SetMaterialsPolygonOffset (mesh.userData.threeMaterials, offset);\n    }\n}\n\nexport class ViewerGeometry\n{\n    constructor (scene)\n    {\n        this.scene = scene;\n\n        this.mainObject = null;\n        this.mainGridObject = null;\n        this.mainEdgeObject = null;\n\n        this.gridSettings = {\n            showGrid : false\n        };\n        this.edgeSettings = {\n            showEdges : false,\n            edgeColor : new Color (0, 0, 0),\n            edgeThreshold : 1\n        };\n    }\n\n    SetMainObject (mainObject)\n    {\n        this.mainObject = mainObject;\n        this.scene.add (this.mainObject);\n\n        if (this.gridSettings.showGrid) {\n            this.GenerateMainGridObject ();\n        }\n        if (this.edgeSettings.showEdges) {\n            this.GenerateMainEdgeObject ();\n        }\n    }\n\n    UpdateWorldMatrix ()\n    {\n        if (this.mainObject !== null) {\n            this.mainObject.updateWorldMatrix (true, true);\n        }\n    }\n\n    SetGridSettings (show)\n    {\n        this.gridSettings.showGrid = show;\n        if (this.mainObject === null) {\n            return;\n        }\n\n        if (this.gridSettings.showGrid) {\n            this.ClearMainGridObject ();\n            this.GenerateMainGridObject ();\n        } else {\n            this.ClearMainGridObject ();\n        }\n    }\n\n    SetEdgeSettings (show, color, threshold)\n    {\n        let needToGenerate = false;\n        if (show && (!this.edgeSettings.showEdges || this.edgeSettings.edgeThreshold !== threshold)) {\n            needToGenerate = true;\n        }\n\n        this.edgeSettings.showEdges = show;\n        this.edgeSettings.edgeThreshold = threshold;\n        this.edgeSettings.edgeColor = color;\n\n        if (this.mainObject === null) {\n            return;\n        }\n\n        if (this.edgeSettings.showEdges) {\n            if (needToGenerate) {\n                this.ClearMainEdgeObject ();\n                this.GenerateMainEdgeObject ();\n            } else {\n\n                let edgeColor = ConvertColorToThreeColor (this.edgeSettings.edgeColor);\n                this.EnumerateEdges ((edge) => {\n                    edge.material.color = edgeColor;\n                });\n            }\n        } else {\n            this.ClearMainEdgeObject ();\n        }\n    }\n\n    GenerateMainGridObject ()\n    {\n        function CreateLine (from, to, material)\n        {\n            let points = [from, to];\n            let geometry = new THREE.BufferGeometry ().setFromPoints (points);\n            let line = new THREE.Line (geometry, material);\n            return line;\n        }\n\n        this.UpdateWorldMatrix ();\n        let boundingBox = this.GetBoundingBox ((meshUserData) => {\n            return true;\n        });\n        if (boundingBox === null) {\n            return;\n        }\n\n        this.mainGridObject = new THREE.Object3D ();\n        const strongMaterial = new THREE.LineBasicMaterial ({ color: 0x888888 });\n        const lightMaterial = new THREE.LineBasicMaterial ({ color: 0xdddddd });\n\n        // TODO: direction handling\n        let boundingBoxSize = new THREE.Vector3 ();\n        boundingBox.getSize (boundingBoxSize);\n        let expandSize = 1.0;\n\n        let minValue = new THREE.Vector2 (boundingBox.min.z - expandSize, boundingBox.min.x - expandSize);\n        let maxValue = new THREE.Vector2 (boundingBox.max.z + expandSize, boundingBox.max.x + expandSize);\n\n        let cellSize = 1.0;\n        let alignedMinValue = new THREE.Vector2 (\n            Math.floor (minValue.x / cellSize) * cellSize,\n            Math.floor (minValue.y / cellSize) * cellSize\n        );\n        let alignedMaxValue = new THREE.Vector2 (\n            Math.ceil (maxValue.x / cellSize) * cellSize,\n            Math.ceil (maxValue.y / cellSize) * cellSize\n        );\n\n        let level = boundingBox.min.y;\n        let cellCountX = Math.floor ((alignedMaxValue.x - alignedMinValue.x) / cellSize);\n        let cellCountY = Math.floor ((alignedMaxValue.y - alignedMinValue.y) / cellSize);\n        for (let step = 0; step < cellCountX + 1; step++) {\n            let lineDist = alignedMinValue.x + step * cellSize;\n            let beg = new THREE.Vector3 (alignedMinValue.y, level, lineDist);\n            let end = new THREE.Vector3 (alignedMaxValue.y, level, lineDist);\n            let material = IsEqual (lineDist, 0.0) ? strongMaterial : lightMaterial;\n            this.mainGridObject.add (CreateLine (beg, end, material));\n        }\n        for (let step = 0; step < cellCountY + 1; step++) {\n            let lineDist = alignedMinValue.y + step * cellSize;\n            let beg = new THREE.Vector3 (lineDist, level, alignedMinValue.x);\n            let end = new THREE.Vector3 (lineDist, level, alignedMaxValue.x);\n            let material = IsEqual (lineDist, 0.0) ? strongMaterial : lightMaterial;\n            this.mainGridObject.add (CreateLine (beg, end, material));\n        }\n        this.scene.add (this.mainGridObject);\n\n    }\n\n    GenerateMainEdgeObject ()\n    {\n        let edgeColor = ConvertColorToThreeColor (this.edgeSettings.edgeColor);\n        this.mainEdgeObject = new THREE.Object3D ();\n\n        this.UpdateWorldMatrix ();\n        this.EnumerateMeshes ((mesh) => {\n            SetThreeMeshPolygonOffset (mesh, true);\n            let edges = new THREE.EdgesGeometry (mesh.geometry, this.edgeSettings.edgeThreshold);\n            let line = new THREE.LineSegments (edges, new THREE.LineBasicMaterial ({\n                color: edgeColor\n            }));\n            line.applyMatrix4 (mesh.matrixWorld);\n            line.userData = mesh.userData;\n            line.visible = mesh.visible;\n            this.mainEdgeObject.add (line);\n        });\n        this.scene.add (this.mainEdgeObject);\n    }\n\n    GetBoundingBox (needToProcess)\n    {\n        let hasMesh = false;\n        let boundingBox = new THREE.Box3 ();\n        this.EnumerateMeshes ((mesh) => {\n            if (needToProcess (mesh.userData)) {\n                boundingBox.union (new THREE.Box3 ().setFromObject (mesh));\n                hasMesh = true;\n            }\n        });\n        if (!hasMesh) {\n            return null;\n        }\n        return boundingBox;\n    }\n\n    GetBoundingSphere (needToProcess)\n    {\n        let boundingBox = this.GetBoundingBox (needToProcess);\n        if (boundingBox === null) {\n            return null;\n        }\n\n        let boundingSphere = new THREE.Sphere ();\n        boundingBox.getBoundingSphere (boundingSphere);\n        return boundingSphere;\n    }\n\n    Clear ()\n    {\n        this.ClearMainObject ();\n        this.ClearMainGridObject ();\n        this.ClearMainEdgeObject ();\n    }\n\n    ClearMainObject ()\n    {\n        if (this.mainObject === null) {\n            return;\n        }\n\n        this.EnumerateMeshes ((mesh) => {\n            mesh.geometry.dispose ();\n        });\n        this.scene.remove (this.mainObject);\n        this.mainObject = null;\n    }\n\n    ClearMainGridObject ()\n    {\n        if (this.mainGridObject === null) {\n            return;\n        }\n\n        this.mainGridObject.traverse ((obj) => {\n            if (obj.isLineSegments) {\n                obj.geometry.dispose ();\n            }\n        });\n        this.scene.remove (this.mainGridObject);\n        this.mainGridObject = null;\n    }\n\n    ClearMainEdgeObject ()\n    {\n        if (this.mainEdgeObject === null) {\n            return;\n        }\n\n        this.EnumerateMeshes ((mesh) => {\n            SetThreeMeshPolygonOffset (mesh, false);\n        });\n        this.EnumerateEdges ((edge) => {\n            edge.geometry.dispose ();\n        });\n        this.scene.remove (this.mainEdgeObject);\n        this.mainEdgeObject = null;\n    }\n\n    EnumerateMeshes (enumerator)\n    {\n        if (this.mainObject === null) {\n            return;\n        }\n        this.mainObject.traverse ((obj) => {\n            if (obj.isMesh) {\n                enumerator (obj);\n            }\n        });\n    }\n\n    EnumerateEdges (enumerator)\n    {\n        if (this.mainEdgeObject === null) {\n            return;\n        }\n        this.mainEdgeObject.traverse ((obj) => {\n            if (obj.isLineSegments) {\n                enumerator (obj);\n            }\n        });\n    }\n\n    GetMeshIntersectionUnderMouse (mouseCoords, camera, width, height)\n    {\n        if (this.mainObject === null) {\n            return null;\n        }\n\n        let raycaster = new THREE.Raycaster ();\n        let mousePos = new THREE.Vector2 ();\n        mousePos.x = (mouseCoords.x / width) * 2 - 1;\n        mousePos.y = -(mouseCoords.y / height) * 2 + 1;\n        raycaster.setFromCamera (mousePos, camera);\n        let iSectObjects = raycaster.intersectObject (this.mainObject, true);\n        for (let i = 0; i < iSectObjects.length; i++) {\n            let iSectObject = iSectObjects[i];\n            if (iSectObject.object.type === 'Mesh' && iSectObject.object.visible) {\n                return iSectObject;\n            }\n        }\n\n        return null;\n    }\n}\n\nexport class ViewerExtraGeometry\n{\n    constructor (scene)\n    {\n        this.scene = scene;\n        this.mainObject = null;\n    }\n\n    AddObject (object)\n    {\n        if (this.mainObject === null) {\n            this.mainObject = new THREE.Object3D ();\n            this.scene.add (this.mainObject);\n        }\n        this.mainObject.add (object);\n    }\n\n    Clear ()\n    {\n        if (this.mainObject === null) {\n            return;\n        }\n        this.mainObject.traverse ((obj) => {\n            if (obj.isMesh || obj.isLineSegments) {\n                obj.geometry.dispose ();\n            }\n        });\n        this.scene.remove (this.mainObject);\n        this.mainObject = null;\n    }\n}\n", "import { Coord3D, CoordDistance3D, SubCoord3D } from '../geometry/coord3d.js';\nimport { Direction } from '../geometry/geometry.js';\nimport { ColorToHexString } from '../model/color.js';\nimport { ShadingType } from '../threejs/threeutils.js';\nimport { GetDomElementInnerDimensions } from './domutils.js';\nimport { Camera, CameraIsEqual3D, Navigation } from './navigation.js';\nimport { ViewerExtraGeometry, ViewerGeometry } from './viewergeometry.js';\n\nexport function GetDefaultCamera (direction)\n{\n    if (direction === Direction.X) {\n        return new CameraIsEqual3D (\n            new Coord3D (2.0, -3.0, 1.5),\n            new Coord3D (0.0, 0.0, 0.0),\n            new Coord3D (1.0, 0.0, 0.0)\n        );\n    } else if (direction === Direction.Y) {\n        return new Camera (\n            new Coord3D (-1.5, 2.0, 3.0),\n            new Coord3D (0.0, 0.0, 0.0),\n            new Coord3D (0.0, 1.0, 0.0)\n        );\n    } else if (direction === Direction.Z) {\n        return new Camera (\n            new Coord3D (-1.5, -3.0, 2.0),\n            new Coord3D (0.0, 0.0, 0.0),\n            new Coord3D (0.0, 0.0, 1.0)\n        );\n    }\n    return null;\n}\n\nexport function TraverseThreeObject (object, processor)\n{\n    if (!processor (object)) {\n        return false;\n    }\n    for (let child of object.children) {\n        if (!TraverseThreeObject (child, processor)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexport function GetShadingTypeOfObject (mainObject)\n{\n    let shadingType = null;\n    TraverseThreeObject (mainObject, (obj) => {\n        if (obj.isMesh) {\n            for (const material of obj.material) {\n                if (material.type === 'MeshPhongMaterial') {\n                    shadingType = ShadingType.Phong;\n                } else if (material.type === 'MeshStandardMaterial') {\n                    shadingType = ShadingType.Physical;\n                }\n                return false;\n            }\n        }\n        return true;\n    });\n    return shadingType;\n}\n\nexport class UpVector\n{\n    constructor ()\n    {\n        this.direction = Direction.Z;\n        this.isFixed = true;\n        this.isFlipped = false;\n    }\n\n    SetDirection (newDirection, oldCamera)\n    {\n        this.direction = newDirection;\n        this.isFlipped = false;\n\n        let defaultCamera = GetDefaultCamera (this.direction);\n        let defaultDir = SubCoord3D (defaultCamera.eye, defaultCamera.center);\n\n        let distance = CoordDistance3D (oldCamera.center, oldCamera.eye);\n        let newEye = oldCamera.center.Clone ().Offset (defaultDir, distance);\n\n        let newCamera = oldCamera.Clone ();\n        if (this.direction === Direction.X) {\n            newCamera.up = new Coord3D (1.0, 0.0, 0.0);\n            newCamera.eye = newEye;\n        } if (this.direction === Direction.Y) {\n            newCamera.up = new Coord3D (0.0, 1.0, 0.0);\n            newCamera.eye = newEye;\n        } else if (this.direction === Direction.Z) {\n            newCamera.up = new Coord3D (0.0, 0.0, 1.0);\n            newCamera.eye = newEye;\n        }\n        return newCamera;\n    }\n\n    SetFixed (isFixed, oldCamera)\n    {\n        this.isFixed = isFixed;\n        if (this.isFixed) {\n            return this.SetDirection (this.direction, oldCamera);\n        }\n        return null;\n    }\n\n    Flip (oldCamera)\n    {\n        this.isFlipped = !this.isFlipped;\n        let newCamera = oldCamera.Clone ();\n        newCamera.up.MultiplyScalar (-1.0);\n        return newCamera;\n    }\n}\n\nexport class ShadingModel\n{\n    constructor (scene)\n    {\n        this.scene = scene;\n\n        this.type = ShadingType.Phong;\n        this.ambientLight = new THREE.AmbientLight (0x888888);\n        this.directionalLight = new THREE.DirectionalLight (0x888888);\n        this.environment = null;\n\n        this.scene.add (this.ambientLight);\n        this.scene.add (this.directionalLight);\n    }\n\n    SetType (type)\n    {\n        this.type = type;\n        if (this.type === ShadingType.Phong) {\n            this.ambientLight.color.set (0x888888);\n            this.directionalLight.color.set (0x888888);\n            this.scene.environment = null;\n        } else if (this.type === ShadingType.Physical) {\n            this.ambientLight.color.set (0x000000);\n            this.directionalLight.color.set (0x555555);\n            this.scene.environment = this.environment;\n        }\n    }\n\n    SetEnvironment (textures, onLoaded)\n    {\n        let loader = new THREE.CubeTextureLoader ();\n        this.environment = loader.load (textures, () => {\n            onLoaded ();\n        });\n    }\n\n    UpdateByCamera (camera)\n    {\n        const lightDir = SubCoord3D (camera.eye, camera.center);\n        this.directionalLight.position.set (lightDir.x, lightDir.y, lightDir.z);\n    }\n\n    CreateHighlightMaterial (highlightColor, withOffset)\n    {\n        let material = null;\n        if (this.type === ShadingType.Phong) {\n            material = new THREE.MeshPhongMaterial ({\n                color : highlightColor,\n                side : THREE.DoubleSide\n            });\n        } else if (this.type === ShadingType.Physical) {\n            material = new THREE.MeshStandardMaterial ({\n                color : highlightColor,\n                side : THREE.DoubleSide\n            });\n        }\n        if (material !== null && withOffset) {\n            material.polygonOffset = true;\n            material.polygonOffsetUnit = 1;\n            material.polygonOffsetFactor = 1;\n        }\n        return material;\n    }\n}\n\nexport class Viewer\n{\n    constructor ()\n    {\n        this.canvas = null;\n        this.renderer = null;\n        this.scene = null;\n        this.geometry = null;\n        this.extraGeometry = null;\n        this.camera = null;\n        this.shading = null;\n        this.navigation = null;\n        this.upVector = null;\n        this.settings = {\n            animationSteps : 40\n        };\n    }\n\n    Init (canvas)\n    {\n        this.canvas = canvas;\n        this.canvas.id = 'viewer';\n\n        let parameters = {\n            canvas : this.canvas,\n            antialias : true\n        };\n\n        this.renderer = new THREE.WebGLRenderer (parameters);\n        if (window.devicePixelRatio) {\n            this.renderer.setPixelRatio (window.devicePixelRatio);\n        }\n        this.renderer.setClearColor ('#ffffff', 1.0);\n        this.renderer.setSize (this.canvas.width, this.canvas.height);\n\n        this.scene = new THREE.Scene ();\n        this.geometry = new ViewerGeometry (this.scene);\n        this.extraGeometry = new ViewerExtraGeometry (this.scene);\n\n        this.InitNavigation ();\n        this.InitShading ();\n\n        this.Render ();\n    }\n\n    SetMouseClickHandler (onMouseClick)\n    {\n        this.navigation.SetMouseClickHandler (onMouseClick);\n    }\n\n    SetMouseMoveHandler (onMouseMove)\n    {\n        this.navigation.SetMouseMoveHandler (onMouseMove);\n    }\n\n    SetContextMenuHandler (onContext)\n    {\n        this.navigation.SetContextMenuHandler (onContext);\n    }\n\n    SetBackgroundColor (color)\n    {\n        let hexColor = '#' + ColorToHexString (color);\n        this.renderer.setClearColor (hexColor, 1.0);\n        this.Render ();\n    }\n\n    SetGridSettings (show)\n    {\n        this.geometry.SetGridSettings (show);\n        this.Render ();\n    }\n\n    SetEdgeSettings (show, color, threshold)\n    {\n        this.geometry.SetEdgeSettings (show, color, threshold);\n        this.Render ();\n    }\n\n    SetEnvironmentMap (textures)\n    {\n        this.shading.SetEnvironment (textures, () => {\n            this.Render ();\n        });\n    }\n\n    GetCanvas ()\n    {\n        return this.canvas;\n    }\n\n    GetCamera ()\n    {\n        return this.navigation.GetCamera ();\n    }\n\n    SetCamera (camera)\n    {\n        this.navigation.SetCamera (camera);\n        this.Render ();\n    }\n\n    Resize (width, height)\n    {\n        let innerSize = GetDomElementInnerDimensions (this.canvas, width, height);\n        this.ResizeRenderer (innerSize.width, innerSize.height);\n    }\n\n    ResizeRenderer (width, height)\n    {\n        if (window.devicePixelRatio) {\n            this.renderer.setPixelRatio (window.devicePixelRatio);\n        }\n        this.camera.aspect = width / height;\n        this.camera.updateProjectionMatrix ();\n        this.renderer.setSize (width, height);\n        this.Render ();\n    }\n\n    FitSphereToWindow (boundingSphere, animation)\n    {\n        if (boundingSphere === null) {\n            return;\n        }\n        let center = new Coord3D (boundingSphere.center.x, boundingSphere.center.y, boundingSphere.center.z);\n        let radius = boundingSphere.radius;\n        let fov = this.camera.fov;\n\n        let newCamera = this.navigation.GetFitToSphereCamera (center, radius, fov);\n        this.navigation.MoveCamera (newCamera, animation ? this.settings.animationSteps : 0);\n    }\n\n    AdjustClippingPlanesToSphere (boundingSphere)\n    {\n        if (boundingSphere === null) {\n            return;\n        }\n        if (boundingSphere.radius < 10.0) {\n            this.camera.near = 0.01;\n            this.camera.far = 100.0;\n        } else if (boundingSphere.radius < 100.0) {\n            this.camera.near = 0.1;\n            this.camera.far = 1000.0;\n        } else if (boundingSphere.radius < 1000.0) {\n            this.camera.near = 10.0;\n            this.camera.far = 10000.0;\n        } else {\n            this.camera.near = 100.0;\n            this.camera.far = 1000000.0;\n        }\n        this.camera.updateProjectionMatrix ();\n        this.Render ();\n    }\n\n    IsFixUpVector ()\n    {\n        return this.navigation.IsFixUpVector ();\n    }\n\n    SetFixUpVector (fixUpVector)\n    {\n        let oldCamera = this.navigation.GetCamera ();\n        let newCamera = this.upVector.SetFixed (fixUpVector, oldCamera);\n        this.navigation.SetFixUpVector (fixUpVector);\n        if (newCamera !== null) {\n            this.navigation.MoveCamera (newCamera, this.settings.animationSteps);\n        }\n        this.Render ();\n    }\n\n    SetUpVector (upDirection, animate)\n    {\n        let oldCamera = this.navigation.GetCamera ();\n        let newCamera = this.upVector.SetDirection (upDirection, oldCamera);\n        let animationSteps = animate ? this.settings.animationSteps : 0;\n        this.navigation.MoveCamera (newCamera, animationSteps);\n        this.Render ();\n    }\n\n    FlipUpVector ()\n    {\n        let oldCamera = this.navigation.GetCamera ();\n        let newCamera = this.upVector.Flip (oldCamera);\n        this.navigation.MoveCamera (newCamera, 0);\n        this.Render ();\n    }\n\n    Render ()\n    {\n        let navigationCamera = this.navigation.GetCamera ();\n        this.camera.position.set (navigationCamera.eye.x, navigationCamera.eye.y, navigationCamera.eye.z);\n        this.camera.up.set (navigationCamera.up.x, navigationCamera.up.y, navigationCamera.up.z);\n        this.camera.lookAt (new THREE.Vector3 (navigationCamera.center.x, navigationCamera.center.y, navigationCamera.center.z));\n\n        this.shading.UpdateByCamera (navigationCamera);\n        this.renderer.render (this.scene, this.camera);\n    }\n\n    SetMainObject (object)\n    {\n        const shadingType = GetShadingTypeOfObject (object);\n        this.geometry.SetMainObject (object);\n        this.shading.SetType (shadingType);\n\n        this.Render ();\n    }\n\n    AddExtraObject (object)\n    {\n        this.extraGeometry.AddObject (object);\n        this.Render ();\n    }\n\n    Clear ()\n    {\n        this.geometry.Clear ();\n        this.extraGeometry.Clear ();\n        this.Render ();\n    }\n\n    ClearExtra ()\n    {\n        this.extraGeometry.Clear ();\n        this.Render ();\n    }\n\n    SetMeshesVisibility (isVisible)\n    {\n        this.geometry.EnumerateMeshes ((mesh) => {\n            let visible = isVisible (mesh.userData);\n            if (mesh.visible !== visible) {\n                mesh.visible = visible;\n            }\n        });\n        this.geometry.EnumerateEdges ((edge) => {\n            let visible = isVisible (edge.userData);\n            if (edge.visible !== visible) {\n                edge.visible = visible;\n            }\n        });\n        this.Render ();\n    }\n\n    SetMeshesHighlight (highlightColor, isHighlighted)\n    {\n        function CreateHighlightMaterials (originalMaterials, highlightMaterial)\n        {\n            let highlightMaterials = [];\n            for (let i = 0; i < originalMaterials.length; i++) {\n                highlightMaterials.push (highlightMaterial);\n            }\n            return highlightMaterials;\n        }\n\n        const highlightMaterial = this.CreateHighlightMaterial (highlightColor);\n        this.geometry.EnumerateMeshes ((mesh) => {\n            let highlighted = isHighlighted (mesh.userData);\n            if (highlighted) {\n                if (mesh.userData.threeMaterials === null) {\n                    mesh.userData.threeMaterials = mesh.material;\n                    mesh.material = CreateHighlightMaterials (mesh.material, highlightMaterial);\n                }\n            } else {\n                if (mesh.userData.threeMaterials !== null) {\n                    mesh.material = mesh.userData.threeMaterials;\n                    mesh.userData.threeMaterials = null;\n                }\n            }\n        });\n\n        this.Render ();\n    }\n\n    CreateHighlightMaterial (highlightColor)\n    {\n        const showEdges = this.geometry.edgeSettings.showEdges;\n        return this.shading.CreateHighlightMaterial (highlightColor, showEdges);\n    }\n\n    GetMeshUserDataUnderMouse (mouseCoords)\n    {\n        let intersection = this.GetMeshIntersectionUnderMouse (mouseCoords);\n        if (intersection === null) {\n            return null;\n        }\n        return intersection.object.userData;\n    }\n\n    GetMeshIntersectionUnderMouse (mouseCoords)\n    {\n        let canvasSize = this.GetCanvasSize ();\n        let intersection = this.geometry.GetMeshIntersectionUnderMouse (mouseCoords, this.camera, canvasSize.width, canvasSize.height);\n        if (intersection === null) {\n            return null;\n        }\n        return intersection;\n    }\n\n    GetBoundingBox (needToProcess)\n    {\n        return this.geometry.GetBoundingBox (needToProcess);\n    }\n\n    GetBoundingSphere (needToProcess)\n    {\n        return this.geometry.GetBoundingSphere (needToProcess);\n    }\n\n    EnumerateMeshesUserData (enumerator)\n    {\n        this.geometry.EnumerateMeshes ((mesh) => {\n            enumerator (mesh.userData);\n        });\n    }\n\n    InitNavigation ()\n    {\n        this.camera = new THREE.PerspectiveCamera (45.0, this.canvas.width / this.canvas.height, 0.1, 1000.0);\n        this.scene.add (this.camera);\n\n        let canvasElem = this.renderer.domElement;\n        let camera = GetDefaultCamera (Direction.Z);\n\n        this.navigation = new Navigation (canvasElem, camera, {\n            onUpdate : () => {\n                this.Render ();\n            }\n        });\n\n        this.upVector = new UpVector ();\n    }\n\n    InitShading  ()\n    {\n        this.shading = new ShadingModel (this.scene);\n    }\n\n    GetImageSize ()\n    {\n        let originalSize = new THREE.Vector2 ();\n        this.renderer.getSize (originalSize);\n        return {\n            width : parseInt (originalSize.x, 10),\n            height : parseInt (originalSize.y, 10)\n        };\n    }\n\n    GetCanvasSize ()\n    {\n        let width = this.canvas.width;\n        let height = this.canvas.height;\n        if (window.devicePixelRatio) {\n            width /= window.devicePixelRatio;\n            height /= window.devicePixelRatio;\n        }\n        return {\n            width : width,\n            height : height\n        };\n    }\n\n    GetImageAsDataUrl (width, height)\n    {\n        let originalSize = this.GetImageSize ();\n        let renderWidth = width;\n        let renderHeight = height;\n        if (window.devicePixelRatio) {\n            renderWidth /= window.devicePixelRatio;\n            renderHeight /= window.devicePixelRatio;\n        }\n        this.ResizeRenderer (renderWidth, renderHeight);\n        this.Render ();\n        let url = this.renderer.domElement.toDataURL ();\n        this.ResizeRenderer (originalSize.width, originalSize.height);\n        return url;\n    }\n}\n", "import { RunTasks } from '../core/taskrunner.js';\nimport { FileFormat, FileSource, GetFileExtension, GetFileName, ReadFile, RequestUrl } from '../io/fileutils.js';\n\nexport class File\n{\n    constructor (file, source)\n    {\n        this.source = source;\n        if (source === FileSource.Url) {\n            this.fileUrl = file;\n            this.fileObject = null;\n            this.name = GetFileName (file);\n            this.extension = GetFileExtension (file);\n        } else if (source === FileSource.File) {\n            this.fileUrl = null;\n            this.fileObject = file;\n            this.name = GetFileName (file.name);\n            this.extension = GetFileExtension (file.name);\n        } else if (source === FileSource.Decompressed) {\n            this.fileUrl = null;\n            this.fileObject = null;\n            this.name = GetFileName (file);\n            this.extension = GetFileExtension (file);\n        }\n        this.content = null;\n    }\n\n    SetContent (content)\n    {\n        this.content = content;\n    }\n}\n\nexport class FileList\n{\n    constructor ()\n    {\n        this.files = [];\n    }\n\n    FillFromFileUrls (fileList)\n    {\n        this.Fill (fileList, FileSource.Url);\n    }\n\n    FillFromFileObjects (fileList)\n    {\n        this.Fill (fileList, FileSource.File);\n    }\n\n    ExtendFromFileList (files)\n    {\n        for (let i = 0; i < files.length; i++) {\n            let file = files[i];\n            if (!this.ContainsFileByPath (file.name)) {\n                this.files.push (file);\n            }\n        }\n    }\n\n    GetFiles ()\n    {\n        return this.files;\n    }\n\n    GetContent (onReady)\n    {\n        RunTasks (this.files.length, {\n            runTask : (index, complete) => {\n                this.GetFileContent (this.files[index], complete);\n            },\n            onReady : onReady\n        });\n    }\n\n    ContainsFileByPath (filePath)\n    {\n        return this.FindFileByPath (filePath) !== null;\n    }\n\n    FindFileByPath (filePath)\n    {\n        let fileName = GetFileName (filePath).toLowerCase ();\n        for (let fileIndex = 0; fileIndex < this.files.length; fileIndex++) {\n            let file = this.files[fileIndex];\n            if (file.name.toLowerCase () === fileName) {\n                return file;\n            }\n        }\n        return null;\n    }\n\n    IsOnlyUrlSource ()\n    {\n        if (this.files.length === 0) {\n            return false;\n        }\n        for (let i = 0; i < this.files.length; i++) {\n            let file = this.files[i];\n            if (file.source !== FileSource.Url && file.source !== FileSource.Decompressed) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    Fill (fileList, fileSource)\n    {\n        this.files = [];\n        for (let fileIndex = 0; fileIndex < fileList.length; fileIndex++) {\n            let fileObject = fileList[fileIndex];\n            let file = new File (fileObject, fileSource);\n            this.AddFile (file);\n        }\n    }\n\n    AddFile (file)\n    {\n        this.files.push (file);\n    }\n\n    GetFileContent (file, complete)\n    {\n        if (file.content !== null) {\n            complete ();\n            return;\n        }\n        let loaderPromise = null;\n        if (file.source === FileSource.Url) {\n            loaderPromise = RequestUrl (file.fileUrl, FileFormat.Binary);\n        } else if (file.source === FileSource.File) {\n            loaderPromise = ReadFile (file.fileObject, FileFormat.Binary);\n        } else {\n            complete ();\n            return;\n        }\n        loaderPromise.then ((content) => {\n            file.SetContent (content);\n        }).catch (() => {\n        }).finally (() => {\n            complete ();\n        });\n    }\n}\n", "import { IsEqual } from './geometry.js';\n\nexport class Quaternion\n{\n\tconstructor (x, y, z, w)\n\t{\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n        this.w = w;\n\t}\n}\n\nexport function QuaternionIsEqual (a, b)\n{\n\treturn IsEqual (a.x, b.x) && IsEqual (a.y, b.y) && IsEqual (a.z, b.z) && IsEqual (a.w, b.w);\n}\n\nexport function ArrayToQuaternion (arr)\n{\n\treturn new Quaternion (arr[0], arr[1], arr[2], arr[3]);\n}\n\nexport function QuaternionFromAxisAngle (axis, angle)\n{\n\tconst a = angle / 2.0;\n\tconst s = Math.sin (a);\n\n\treturn new Quaternion (\n\t\taxis.x * s,\n\t\taxis.y * s,\n\t\taxis.z * s,\n\t\tMath.cos (a)\n\t);\n}\n\nexport function QuaternionFromXYZ (x, y, z, mode) {\n\n\tconst c1 = Math.cos (x / 2.0);\n\tconst c2 = Math.cos (y / 2.0);\n\tconst c3 = Math.cos (z / 2.0);\n\n\tconst s1 = Math.sin (x / 2.0);\n\tconst s2 = Math.sin (y / 2.0);\n\tconst s3 = Math.sin (z / 2.0);\n\n\tlet quaternion = new Quaternion (0.0, 0.0, 0.0, 1.0);\n\tif (mode === 'XYZ') {\n\t\tquaternion.x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\tquaternion.y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\tquaternion.z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\tquaternion.w = c1 * c2 * c3 - s1 * s2 * s3;\n\t} else if (mode === 'YXZ') {\n\t\tquaternion.x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\tquaternion.y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\tquaternion.z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\tquaternion.w = c1 * c2 * c3 + s1 * s2 * s3;\n\t} else if (mode === 'ZXY') {\n\t\tquaternion.x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\tquaternion.y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\tquaternion.z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\tquaternion.w = c1 * c2 * c3 - s1 * s2 * s3;\n\t} else if (mode === 'ZYX') {\n\t\tquaternion.x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\tquaternion.y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\tquaternion.z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\tquaternion.w = c1 * c2 * c3 + s1 * s2 * s3;\n\t} else if (mode === 'YZX') {\n\t\tquaternion.x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\tquaternion.y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\tquaternion.z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\tquaternion.w = c1 * c2 * c3 - s1 * s2 * s3;\n\t} else if (mode === 'XZY') {\n\t\tquaternion.x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\tquaternion.y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\tquaternion.z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\tquaternion.w = c1 * c2 * c3 + s1 * s2 * s3;\n\t} else {\n\t\treturn null;\n\t}\n\n\treturn quaternion;\n}\n", "import { Quaternion } from './quaternion.js';\nimport { Coord3D, VectorLength3D } from './coord3d.js';\nimport { IsEqual, IsNegative } from './geometry.js';\nimport { QuaternionFromAxisAngle } from './quaternion.js';\n\nexport class Matrix\n{\n    constructor (matrix)\n    {\n        this.matrix = null;\n        if (matrix !== undefined && matrix !== null) {\n            this.matrix = matrix;\n        }\n    }\n\n    IsValid ()\n    {\n        return this.matrix !== null;\n    }\n\n    Set (matrix)\n    {\n        this.matrix = matrix;\n        return this;\n    }\n\n    Get ()\n    {\n        return this.matrix;\n    }\n\n    Clone ()\n    {\n        let result = [\n            this.matrix[0], this.matrix[1], this.matrix[2], this.matrix[3],\n            this.matrix[4], this.matrix[5], this.matrix[6], this.matrix[7],\n            this.matrix[8], this.matrix[9], this.matrix[10], this.matrix[11],\n            this.matrix[12], this.matrix[13], this.matrix[14], this.matrix[15]\n        ];\n        return new Matrix (result);\n    }\n\n    CreateIdentity ()\n    {\n        this.matrix = [\n            1.0, 0.0, 0.0, 0.0,\n            0.0, 1.0, 0.0, 0.0,\n            0.0, 0.0, 1.0, 0.0,\n            0.0, 0.0, 0.0, 1.0\n        ];\n        return this;\n    }\n\n    IsIdentity ()\n    {\n        let identity = new Matrix ().CreateIdentity ().Get ();\n        for (let i = 0; i < 16; i++) {\n            if (!IsEqual (this.matrix[i], identity[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    CreateTranslation (x, y, z)\n    {\n        this.matrix = [\n            1.0, 0.0, 0.0, 0.0,\n            0.0, 1.0, 0.0, 0.0,\n            0.0, 0.0, 1.0, 0.0,\n            x, y, z, 1.0\n        ];\n        return this;\n    }\n\n    CreateRotation (x, y, z, w)\n    {\n        let x2 = x + x;\n        let y2 = y + y;\n        let z2 = z + z;\n        let xx = x * x2;\n        let xy = x * y2;\n        let xz = x * z2;\n        let yy = y * y2;\n        let yz = y * z2;\n        let zz = z * z2;\n        let wx = w * x2;\n        let wy = w * y2;\n        let wz = w * z2;\n        this.matrix = [\n            1.0 - (yy + zz), xy + wz, xz - wy, 0.0,\n            xy - wz, 1.0 - (xx + zz), yz + wx, 0.0,\n            xz + wy, yz - wx, 1.0 - (xx + yy), 0.0,\n            0.0, 0.0, 0.0, 1.0\n        ];\n        return this;\n    }\n\n    CreateRotationAxisAngle (axis, angle)\n    {\n        let quaternion = QuaternionFromAxisAngle (axis, angle);\n        return this.CreateRotation (quaternion.x, quaternion.y, quaternion.z, quaternion.w);\n    }\n\n    CreateScale (x, y, z)\n    {\n        this.matrix = [\n            x, 0.0, 0.0, 0.0,\n            0.0, y, 0.0, 0.0,\n            0.0, 0.0, z, 0.0,\n            0.0, 0.0, 0.0, 1.0\n        ];\n        return this;\n    }\n\n    ComposeTRS (translation, rotation, scale)\n    {\n        let tx = translation.x;\n        let ty = translation.y;\n        let tz = translation.z;\n        let qx = rotation.x;\n        let qy = rotation.y;\n        let qz = rotation.z;\n        let qw = rotation.w;\n        let sx = scale.x;\n        let sy = scale.y;\n        let sz = scale.z;\n\n        let x2 = qx + qx;\n        let y2 = qy + qy;\n        let z2 = qz + qz;\n        let xx = qx * x2;\n        let xy = qx * y2;\n        let xz = qx * z2;\n        let yy = qy * y2;\n        let yz = qy * z2;\n        let zz = qz * z2;\n        let wx = qw * x2;\n        let wy = qw * y2;\n        let wz = qw * z2;\n\n        this.matrix = [\n            (1.0 - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0.0,\n            (xy - wz) * sy, (1.0 - (xx + zz)) * sy, (yz + wx) * sy, 0.0,\n            (xz + wy) * sz, (yz - wx) * sz, (1.0 - (xx + yy)) * sz, 0.0,\n            tx, ty, tz, 1.0\n        ];\n        return this;\n    }\n\n    DecomposeTRS ()\n    {\n        let translation = new Coord3D (\n            this.matrix[12],\n            this.matrix[13],\n            this.matrix[14]\n        );\n\n        let sx = VectorLength3D (this.matrix[0], this.matrix[1], this.matrix[2]);\n        let sy = VectorLength3D (this.matrix[4], this.matrix[5], this.matrix[6]);\n        let sz = VectorLength3D (this.matrix[8], this.matrix[9], this.matrix[10]);\n        let determinant = this.Determinant ();\n        if (IsNegative (determinant)) {\n            sx *= -1.0;\n        }\n        let scale = new Coord3D (sx, sy, sz);\n\n        let m00 = this.matrix[0] / sx;\n        let m01 = this.matrix[4] / sy;\n        let m02 = this.matrix[8] / sz;\n        let m10 = this.matrix[1] / sx;\n        let m11 = this.matrix[5] / sy;\n        let m12 = this.matrix[9] / sz;\n        let m20 = this.matrix[2] / sx;\n        let m21 = this.matrix[6] / sy;\n        let m22 = this.matrix[10] / sz;\n\n        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n        let rotation = null;\n        let tr = m00 + m11 + m22;\n        if (tr > 0.0) {\n            let s = Math.sqrt (tr + 1.0) * 2.0;\n            rotation = new Quaternion (\n                (m21 - m12) / s,\n                (m02 - m20) / s,\n                (m10 - m01) / s,\n                0.25 * s\n            );\n        } else if ((m00 > m11) && (m00 > m22)) {\n            let s = Math.sqrt (1.0 + m00 - m11 - m22) * 2.0;\n            rotation = new Quaternion (\n                0.25 * s,\n                (m01 + m10) / s,\n                (m02 + m20) / s,\n                (m21 - m12) / s\n            );\n        } else if (m11 > m22) {\n            let s = Math.sqrt (1.0 + m11 - m00 - m22) * 2.0;\n            rotation = new Quaternion (\n                (m01 + m10) / s,\n                0.25 * s,\n                (m12 + m21) / s,\n                (m02 - m20) / s\n            );\n        } else {\n            let s = Math.sqrt (1.0 + m22 - m00 - m11) * 2.0;\n            rotation = new Quaternion (\n                (m02 + m20) / s,\n                (m12 + m21) / s,\n                0.25 * s,\n                (m10 - m01) / s\n            );\n        }\n\n        return {\n            translation : translation,\n            rotation : rotation,\n            scale : scale\n        };\n    }\n\n    Determinant ()\n    {\n        let a00 = this.matrix[0];\n        let a01 = this.matrix[1];\n        let a02 = this.matrix[2];\n        let a03 = this.matrix[3];\n        let a10 = this.matrix[4];\n        let a11 = this.matrix[5];\n        let a12 = this.matrix[6];\n        let a13 = this.matrix[7];\n        let a20 = this.matrix[8];\n        let a21 = this.matrix[9];\n        let a22 = this.matrix[10];\n        let a23 = this.matrix[11];\n        let a30 = this.matrix[12];\n        let a31 = this.matrix[13];\n        let a32 = this.matrix[14];\n        let a33 = this.matrix[15];\n\n        let b00 = a00 * a11 - a01 * a10;\n        let b01 = a00 * a12 - a02 * a10;\n        let b02 = a00 * a13 - a03 * a10;\n        let b03 = a01 * a12 - a02 * a11;\n        let b04 = a01 * a13 - a03 * a11;\n        let b05 = a02 * a13 - a03 * a12;\n        let b06 = a20 * a31 - a21 * a30;\n        let b07 = a20 * a32 - a22 * a30;\n        let b08 = a20 * a33 - a23 * a30;\n        let b09 = a21 * a32 - a22 * a31;\n        let b10 = a21 * a33 - a23 * a31;\n        let b11 = a22 * a33 - a23 * a32;\n\n        let determinant = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n        return determinant;\n    }\n\n    Invert ()\n    {\n        let a00 = this.matrix[0];\n        let a01 = this.matrix[1];\n        let a02 = this.matrix[2];\n        let a03 = this.matrix[3];\n        let a10 = this.matrix[4];\n        let a11 = this.matrix[5];\n        let a12 = this.matrix[6];\n        let a13 = this.matrix[7];\n        let a20 = this.matrix[8];\n        let a21 = this.matrix[9];\n        let a22 = this.matrix[10];\n        let a23 = this.matrix[11];\n        let a30 = this.matrix[12];\n        let a31 = this.matrix[13];\n        let a32 = this.matrix[14];\n        let a33 = this.matrix[15];\n\n        let b00 = a00 * a11 - a01 * a10;\n        let b01 = a00 * a12 - a02 * a10;\n        let b02 = a00 * a13 - a03 * a10;\n        let b03 = a01 * a12 - a02 * a11;\n        let b04 = a01 * a13 - a03 * a11;\n        let b05 = a02 * a13 - a03 * a12;\n        let b06 = a20 * a31 - a21 * a30;\n        let b07 = a20 * a32 - a22 * a30;\n        let b08 = a20 * a33 - a23 * a30;\n        let b09 = a21 * a32 - a22 * a31;\n        let b10 = a21 * a33 - a23 * a31;\n        let b11 = a22 * a33 - a23 * a32;\n\n        let determinant = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n        if (IsEqual (determinant, 0.0)) {\n            return null;\n        }\n\n        let result = [\n            (a11 * b11 - a12 * b10 + a13 * b09) / determinant,\n            (a02 * b10 - a01 * b11 - a03 * b09) / determinant,\n            (a31 * b05 - a32 * b04 + a33 * b03) / determinant,\n            (a22 * b04 - a21 * b05 - a23 * b03) / determinant,\n            (a12 * b08 - a10 * b11 - a13 * b07) / determinant,\n            (a00 * b11 - a02 * b08 + a03 * b07) / determinant,\n            (a32 * b02 - a30 * b05 - a33 * b01) / determinant,\n            (a20 * b05 - a22 * b02 + a23 * b01) / determinant,\n            (a10 * b10 - a11 * b08 + a13 * b06) / determinant,\n            (a01 * b08 - a00 * b10 - a03 * b06) / determinant,\n            (a30 * b04 - a31 * b02 + a33 * b00) / determinant,\n            (a21 * b02 - a20 * b04 - a23 * b00) / determinant,\n            (a11 * b07 - a10 * b09 - a12 * b06) / determinant,\n            (a00 * b09 - a01 * b07 + a02 * b06) / determinant,\n            (a31 * b01 - a30 * b03 - a32 * b00) / determinant,\n            (a20 * b03 - a21 * b01 + a22 * b00) / determinant\n        ];\n\n        return new Matrix (result);\n    }\n\n    MultiplyVector (vector)\n    {\n        let a00 = vector[0];\n        let a01 = vector[1];\n        let a02 = vector[2];\n        let a03 = vector[3];\n\n        let b00 = this.matrix[0];\n        let b01 = this.matrix[1];\n        let b02 = this.matrix[2];\n        let b03 = this.matrix[3];\n        let b10 = this.matrix[4];\n        let b11 = this.matrix[5];\n        let b12 = this.matrix[6];\n        let b13 = this.matrix[7];\n        let b20 = this.matrix[8];\n        let b21 = this.matrix[9];\n        let b22 = this.matrix[10];\n        let b23 = this.matrix[11];\n        let b30 = this.matrix[12];\n        let b31 = this.matrix[13];\n        let b32 = this.matrix[14];\n        let b33 = this.matrix[15];\n\n        let result = [\n            a00 * b00 + a01 * b10 + a02 * b20 + a03 * b30,\n            a00 * b01 + a01 * b11 + a02 * b21 + a03 * b31,\n            a00 * b02 + a01 * b12 + a02 * b22 + a03 * b32,\n            a00 * b03 + a01 * b13 + a02 * b23 + a03 * b33\n        ];\n        return result;\n    }\n\n    MultiplyMatrix (matrix)\n    {\n        let a00 = this.matrix[0];\n        let a01 = this.matrix[1];\n        let a02 = this.matrix[2];\n        let a03 = this.matrix[3];\n        let a10 = this.matrix[4];\n        let a11 = this.matrix[5];\n        let a12 = this.matrix[6];\n        let a13 = this.matrix[7];\n        let a20 = this.matrix[8];\n        let a21 = this.matrix[9];\n        let a22 = this.matrix[10];\n        let a23 = this.matrix[11];\n        let a30 = this.matrix[12];\n        let a31 = this.matrix[13];\n        let a32 = this.matrix[14];\n        let a33 = this.matrix[15];\n\n        let b00 = matrix.matrix[0];\n        let b01 = matrix.matrix[1];\n        let b02 = matrix.matrix[2];\n        let b03 = matrix.matrix[3];\n        let b10 = matrix.matrix[4];\n        let b11 = matrix.matrix[5];\n        let b12 = matrix.matrix[6];\n        let b13 = matrix.matrix[7];\n        let b20 = matrix.matrix[8];\n        let b21 = matrix.matrix[9];\n        let b22 = matrix.matrix[10];\n        let b23 = matrix.matrix[11];\n        let b30 = matrix.matrix[12];\n        let b31 = matrix.matrix[13];\n        let b32 = matrix.matrix[14];\n        let b33 = matrix.matrix[15];\n\n        let result = [\n            a00 * b00 + a01 * b10 + a02 * b20 + a03 * b30,\n            a00 * b01 + a01 * b11 + a02 * b21 + a03 * b31,\n            a00 * b02 + a01 * b12 + a02 * b22 + a03 * b32,\n            a00 * b03 + a01 * b13 + a02 * b23 + a03 * b33,\n            a10 * b00 + a11 * b10 + a12 * b20 + a13 * b30,\n            a10 * b01 + a11 * b11 + a12 * b21 + a13 * b31,\n            a10 * b02 + a11 * b12 + a12 * b22 + a13 * b32,\n            a10 * b03 + a11 * b13 + a12 * b23 + a13 * b33,\n            a20 * b00 + a21 * b10 + a22 * b20 + a23 * b30,\n            a20 * b01 + a21 * b11 + a22 * b21 + a23 * b31,\n            a20 * b02 + a21 * b12 + a22 * b22 + a23 * b32,\n            a20 * b03 + a21 * b13 + a22 * b23 + a23 * b33,\n            a30 * b00 + a31 * b10 + a32 * b20 + a33 * b30,\n            a30 * b01 + a31 * b11 + a32 * b21 + a33 * b31,\n            a30 * b02 + a31 * b12 + a32 * b22 + a33 * b32,\n            a30 * b03 + a31 * b13 + a32 * b23 + a33 * b33\n        ];\n\n        return new Matrix (result);\n    }\n}\n\nexport function MatrixIsEqual (a, b)\n{\n    const aMatrix = a.Get ();\n    const bMatrix = b.Get ();\n\tfor (let i = 0; i < 16; i++) {\n        if (!IsEqual (aMatrix[i], bMatrix[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n", "import { Coord3D } from './coord3d.js';\nimport { Matrix, MatrixIsEqual } from './matrix.js';\n\nexport class Transformation\n{\n    constructor (matrix)\n    {\n        if (matrix !== undefined && matrix !== null) {\n            this.matrix = matrix;\n        } else {\n            this.matrix = new Matrix ();\n            this.matrix.CreateIdentity ();\n        }\n    }\n\n    SetMatrix (matrix)\n    {\n        this.matrix = matrix;\n        return this;\n    }\n\n    GetMatrix ()\n    {\n        return this.matrix;\n    }\n\n    IsIdentity ()\n    {\n        return this.matrix.IsIdentity ();\n    }\n\n    AppendMatrix (matrix)\n    {\n        this.matrix = this.matrix.MultiplyMatrix (matrix);\n        return this;\n    }\n\n    Append (transformation)\n    {\n        this.AppendMatrix (transformation.GetMatrix ());\n        return this;\n    }\n\n    TransformCoord3D (coord)\n    {\n        let resultVector = this.matrix.MultiplyVector ([coord.x, coord.y, coord.z, 1.0]);\n        let result = new Coord3D (resultVector[0], resultVector[1], resultVector[2]);\n        return result;\n    }\n\n    Clone ()\n    {\n        const clonedMatrix = this.matrix.Clone ();\n        return new Transformation (clonedMatrix);\n    }\n}\n\nexport function TransformationIsEqual (a, b)\n{\n    return MatrixIsEqual (a.GetMatrix (), b.GetMatrix ());\n}\n", "import { Coord3D, CrossVector3D, SubCoord3D } from '../geometry/coord3d.js';\nimport { Matrix } from '../geometry/matrix.js';\nimport { Transformation } from '../geometry/transformation.js';\n\nexport const MeshType =\n{\n    Empty : 0,\n    TriangleMesh : 1\n};\n\nexport function GetMeshType (mesh)\n{\n    if (mesh.TriangleCount () > 0) {\n        return MeshType.TriangleMesh;\n    }\n    return MeshType.Empty;\n}\n\nexport function CalculateTriangleNormal (v0, v1, v2)\n{\n    let v = SubCoord3D (v1, v0);\n    let w = SubCoord3D (v2, v0);\n    let normal = CrossVector3D (v, w);\n    normal.Normalize ();\n    return normal;\n}\n\nexport function TransformMesh (mesh, transformation)\n{\n    if (transformation.IsIdentity ()) {\n        return;\n    }\n\n    for (let i = 0; i < mesh.VertexCount (); i++) {\n        let vertex = mesh.GetVertex (i);\n        let transformed = transformation.TransformCoord3D (vertex);\n        vertex.x = transformed.x;\n        vertex.y = transformed.y;\n        vertex.z = transformed.z;\n    }\n\n    if (mesh.NormalCount () > 0) {\n        let trs = transformation.GetMatrix ().DecomposeTRS ();\n        let normalMatrix = new Matrix ().ComposeTRS (new Coord3D (0.0, 0.0, 0.0), trs.rotation, new Coord3D (1.0, 1.0, 1.0));\n        let normalTransformation = new Transformation (normalMatrix);\n        for (let i = 0; i < mesh.NormalCount (); i++) {\n            let normal = mesh.GetNormal (i);\n            let transformed = normalTransformation.TransformCoord3D (normal);\n            normal.x = transformed.x;\n            normal.y = transformed.y;\n            normal.z = transformed.z;\n        }\n    }\n}\n\nexport function FlipMeshTrianglesOrientation (mesh)\n{\n    for (let i = 0; i < mesh.TriangleCount (); i++) {\n        let triangle = mesh.GetTriangle (i);\n        let tmp = triangle.v1;\n        triangle.v1 = triangle.v2;\n        triangle.v2 = tmp;\n    }\n}\n", "import { Coord3D } from './coord3d.js';\n\nexport class Box3D\n{\n    constructor (min, max)\n    {\n        this.min = min;\n        this.max = max;\n    }\n\n    GetMin ()\n    {\n        return this.min;\n    }\n\n    GetMax ()\n    {\n        return this.max;\n    }\n\n    GetCenter ()\n    {\n        return new Coord3D (\n            (this.min.x + this.max.x) / 2.0,\n            (this.min.y + this.max.y) / 2.0,\n            (this.min.z + this.max.z) / 2.0\n        );\n    }\n}\n\nexport class BoundingBoxCalculator3D\n{\n    constructor ()\n    {\n        this.box = new Box3D (\n            new Coord3D (Infinity, Infinity, Infinity),\n            new Coord3D (-Infinity, -Infinity, -Infinity)\n        );\n        this.isValid = false;\n    }\n\n    GetBox ()\n    {\n        if (!this.isValid) {\n            return null;\n        }\n        return this.box;\n    }\n\n    AddPoint (point)\n    {\n        this.box.min.x = Math.min (this.box.min.x, point.x);\n        this.box.min.y = Math.min (this.box.min.y, point.y);\n        this.box.min.z = Math.min (this.box.min.z, point.z);\n        this.box.max.x = Math.max (this.box.max.x, point.x);\n        this.box.max.y = Math.max (this.box.max.y, point.y);\n        this.box.max.z = Math.max (this.box.max.z, point.z);\n        this.isValid = true;\n    }\n}\n", "import { Box3D } from './box3d.js';\nimport { Coord3D, CoordIsEqual3D } from './coord3d.js';\nimport { IsGreaterOrEqual, IsLowerOrEqual } from './geometry.js';\n\nexport class OctreeNode\n{\n    constructor (boundingBox, level)\n    {\n        this.boundingBox = boundingBox;\n        this.level = level;\n        this.pointItems = [];\n        this.childNodes = [];\n    }\n\n    AddPoint (point, data, options)\n    {\n        let node = this.FindNodeForPoint (point);\n        if (node === null) {\n            return false;\n        }\n\n        if (node.FindPointDirectly (point) !== null) {\n            return false;\n        }\n\n        if (node.pointItems.length < options.maxPointsPerNode || node.level >= options.maxTreeDepth) {\n            node.AddPointDirectly (point, data);\n            return true;\n        } else {\n            node.CreateChildNodes ();\n            let oldPointItems = node.pointItems;\n            node.pointItems = [];\n            for (let i = 0; i < oldPointItems.length; i++) {\n                let pointItem = oldPointItems[i];\n                if (!node.AddPoint (pointItem.point, pointItem.data, options)) {\n                    return false;\n                }\n            }\n            return node.AddPoint (point, data, options);\n        }\n    }\n\n    FindPoint (point)\n    {\n        let node = this.FindNodeForPoint (point);\n        if (node === null) {\n            return null;\n        }\n        return node.FindPointDirectly (point);\n    }\n\n    AddPointDirectly (point, data)\n    {\n        this.pointItems.push ({\n            point : point,\n            data : data\n        });\n    }\n\n    FindPointDirectly (point)\n    {\n        for (let i = 0; i < this.pointItems.length; i++) {\n            let pointItem = this.pointItems[i];\n            if (CoordIsEqual3D (point, pointItem.point)) {\n                return pointItem.data;\n            }\n        }\n        return null;\n    }\n\n    FindNodeForPoint (point)\n    {\n        if (!this.IsPointInBounds (point)) {\n            return null;\n        }\n\n        if (this.childNodes.length === 0) {\n            return this;\n        }\n\n        for (let i = 0; i < this.childNodes.length; i++) {\n            let childNode = this.childNodes[i];\n            let foundNode = childNode.FindNodeForPoint (point);\n            if (foundNode !== null) {\n                return foundNode;\n            }\n        }\n\n        return null;\n    }\n\n    CreateChildNodes ()\n    {\n        function AddChildNode (node, minX, minY, minZ, sizeX, sizeY, sizeZ)\n        {\n            let box = new Box3D (\n                new Coord3D (minX, minY, minZ),\n                new Coord3D (minX + sizeX, minY + sizeY, minZ + sizeZ)\n            );\n            node.childNodes.push (new OctreeNode (box, node.level + 1, node.options));\n        }\n\n        let min = this.boundingBox.min;\n        let center = this.boundingBox.GetCenter ();\n        let sizeX = (this.boundingBox.max.x - this.boundingBox.min.x) / 2.0;\n        let sizeY = (this.boundingBox.max.y - this.boundingBox.min.y) / 2.0;\n        let sizeZ = (this.boundingBox.max.z - this.boundingBox.min.z) / 2.0;\n\n        AddChildNode (this, min.x, min.y, min.z, sizeX, sizeY, sizeZ);\n        AddChildNode (this, center.x, min.y, min.z, sizeX, sizeY, sizeZ);\n        AddChildNode (this, min.x, center.y, min.z, sizeX, sizeY, sizeZ);\n        AddChildNode (this, center.x, center.y, min.z, sizeX, sizeY, sizeZ);\n        AddChildNode (this, min.x, min.y, center.z, sizeX, sizeY, sizeZ);\n        AddChildNode (this, center.x, min.y, center.z, sizeX, sizeY, sizeZ);\n        AddChildNode (this, min.x, center.y, center.z, sizeX, sizeY, sizeZ);\n        AddChildNode (this, center.x, center.y, center.z, sizeX, sizeY, sizeZ);\n    }\n\n    IsPointInBounds (point)\n    {\n        let isEqual =\n            IsGreaterOrEqual (point.x, this.boundingBox.min.x) &&\n            IsGreaterOrEqual (point.y, this.boundingBox.min.y) &&\n            IsGreaterOrEqual (point.z, this.boundingBox.min.z) &&\n            IsLowerOrEqual (point.x, this.boundingBox.max.x) &&\n            IsLowerOrEqual (point.y, this.boundingBox.max.y) &&\n            IsLowerOrEqual (point.z, this.boundingBox.max.z);\n        return isEqual;\n    }\n}\n\nexport class Octree\n{\n    constructor (boundingBox, options)\n    {\n        this.options = {\n            maxPointsPerNode : 10,\n            maxTreeDepth : 10\n        };\n        if (options !== undefined) {\n            if (options.maxPointsPerNode !== undefined) {\n                this.options.maxPointsPerNode = options.maxPointsPerNode;\n            }\n            if (options.maxTreeDepth !== undefined) {\n                this.options.maxTreeDepth = options.maxTreeDepth;\n            }\n        }\n        this.rootNode = new OctreeNode (boundingBox, 0, this.options);\n    }\n\n    AddPoint (point, data)\n    {\n        return this.rootNode.AddPoint (point, data, this.options);\n    }\n\n    FindPoint (point)\n    {\n        return this.rootNode.FindPoint (point);\n    }\n}\n", "export class TopologyVertex\n{\n    constructor ()\n    {\n        this.edges = [];\n        this.triangles = [];\n    }\n}\n\nexport class TopologyEdge\n{\n    constructor (vertex1, vertex2)\n    {\n        this.vertex1 = vertex1;\n        this.vertex2 = vertex2;\n        this.triangles = [];\n    }\n}\n\nexport class TopologyTriangleEdge\n{\n    constructor (edge, reversed)\n    {\n        this.edge = edge;\n        this.reversed = reversed;\n    }\n}\n\nexport class TopologyTriangle\n{\n    constructor ()\n    {\n        this.triEdge1 = null;\n        this.triEdge2 = null;\n        this.triEdge3 = null;\n    }\n}\n\nexport class Topology\n{\n    constructor ()\n    {\n        this.vertices = [];\n        this.edges = [];\n        this.triangleEdges = [];\n        this.triangles = [];\n        this.edgeStartToEndVertexMap = new Map ();\n    }\n\n    AddVertex ()\n    {\n        this.vertices.push (new TopologyVertex ());\n        return this.vertices.length - 1;\n    }\n\n    AddTriangle (vertex1, vertex2, vertex3)\n    {\n        function AddTriangleToVertex (vertices, vertexIndex, triangleIndex)\n        {\n            let vertex = vertices[vertexIndex];\n            vertex.triangles.push (triangleIndex);\n        }\n\n        function AddEdgeToVertex (vertices, triangleEdges, vertexIndex, triangleEdgeIndex)\n        {\n            let vertex = vertices[vertexIndex];\n            let triangleEdge = triangleEdges[triangleEdgeIndex];\n            vertex.edges.push (triangleEdge.edge);\n        }\n\n        function AddTriangleToEdge (edges, triangleEdges, triangleEdgeIndex, triangleIndex)\n        {\n            let triangleEdge = triangleEdges[triangleEdgeIndex];\n            let edge = edges[triangleEdge.edge];\n            edge.triangles.push (triangleIndex);\n        }\n\n        let triangleIndex = this.triangles.length;\n        let triangle = new TopologyTriangle ();\n        triangle.triEdge1 = this.AddTriangleEdge (vertex1, vertex2);\n        triangle.triEdge2 = this.AddTriangleEdge (vertex2, vertex3);\n        triangle.triEdge3 = this.AddTriangleEdge (vertex3, vertex1);\n\n        AddTriangleToVertex (this.vertices, vertex1, triangleIndex);\n        AddTriangleToVertex (this.vertices, vertex2, triangleIndex);\n        AddTriangleToVertex (this.vertices, vertex3, triangleIndex);\n\n        AddEdgeToVertex (this.vertices, this.triangleEdges, vertex1, triangle.triEdge1);\n        AddEdgeToVertex (this.vertices, this.triangleEdges, vertex2, triangle.triEdge2);\n        AddEdgeToVertex (this.vertices, this.triangleEdges, vertex3, triangle.triEdge3);\n\n        AddTriangleToEdge (this.edges, this.triangleEdges, triangle.triEdge1, triangleIndex);\n        AddTriangleToEdge (this.edges, this.triangleEdges, triangle.triEdge2, triangleIndex);\n        AddTriangleToEdge (this.edges, this.triangleEdges, triangle.triEdge3, triangleIndex);\n\n        this.triangles.push (triangle);\n    }\n\n    AddTriangleEdge (vertex1, vertex2)\n    {\n        let startVertex = vertex1;\n        let endVertex = vertex2;\n        let reversed = false;\n        if (vertex2 < vertex1) {\n            startVertex = vertex2;\n            endVertex = vertex1;\n            reversed = true;\n        }\n\n        let edgeIndex = this.AddEdge (startVertex, endVertex);\n        this.triangleEdges.push (new TopologyTriangleEdge (edgeIndex, reversed));\n        return this.triangleEdges.length - 1;\n    }\n\n    AddEdge (startVertex, endVertex)\n    {\n        if (!this.edgeStartToEndVertexMap.has (startVertex)) {\n            this.edgeStartToEndVertexMap.set (startVertex, []);\n        }\n\n        let endVertices = this.edgeStartToEndVertexMap.get (startVertex);\n        for (let i = 0; i < endVertices.length; i++) {\n            let endVertexItem = endVertices[i];\n            if (endVertexItem.endVertex === endVertex) {\n                return endVertexItem.edgeIndex;\n            }\n        }\n\n        let edgeIndex = this.edges.length;\n        endVertices.push ({\n            endVertex : endVertex,\n            edgeIndex : edgeIndex\n        });\n\n        this.edges.push (new TopologyEdge (startVertex, endVertex));\n        return edgeIndex;\n    }\n}\n", "import { BoundingBoxCalculator3D } from '../geometry/box3d.js';\nimport { Octree } from '../geometry/octree.js';\nimport { GetMeshType, MeshType } from './meshutils.js';\nimport { Topology } from './topology.js';\n\nexport function IsModelEmpty (model)\n{\n    let isEmpty = true;\n    model.EnumerateMeshInstances ((meshInstance) => {\n        if (GetMeshType (meshInstance) !== MeshType.Empty) {\n            isEmpty = false;\n        }\n    });\n    return isEmpty;\n}\n\nexport function GetBoundingBox (object3D)\n{\n    let calculator = new BoundingBoxCalculator3D ();\n    object3D.EnumerateVertices ((vertex) => {\n        calculator.AddPoint (vertex);\n    });\n    return calculator.GetBox ();\n}\n\nexport function GetTopology (object3D)\n{\n    function GetVertexIndex (vertex, octree, topology)\n    {\n        let index = octree.FindPoint (vertex);\n        if (index === null) {\n            index = topology.AddVertex ();\n            octree.AddPoint (vertex, index);\n        }\n        return index;\n    }\n\n    let boundingBox = GetBoundingBox (object3D);\n    let octree = new Octree (boundingBox);\n    let topology = new Topology ();\n\n    object3D.EnumerateTriangleVertices ((v0, v1, v2) => {\n        let v0Index = GetVertexIndex (v0, octree, topology);\n        let v1Index = GetVertexIndex (v1, octree, topology);\n        let v2Index = GetVertexIndex (v2, octree, topology);\n        topology.AddTriangle (v0Index, v1Index, v2Index);\n    });\n    return topology;\n}\n\nexport function IsSolid (object3D)\n{\n    function GetEdgeOrientationInTriangle (topology, triangleIndex, edgeIndex)\n    {\n        const triangle = topology.triangles[triangleIndex];\n        const triEdge1 = topology.triangleEdges[triangle.triEdge1];\n        const triEdge2 = topology.triangleEdges[triangle.triEdge2];\n        const triEdge3 = topology.triangleEdges[triangle.triEdge3];\n        if (triEdge1.edge === edgeIndex) {\n            return triEdge1.reversed;\n        }\n        if (triEdge2.edge === edgeIndex) {\n            return triEdge2.reversed;\n        }\n        if (triEdge3.edge === edgeIndex) {\n            return triEdge3.reversed;\n        }\n        return null;\n    }\n\n    const topology = GetTopology (object3D);\n    for (let edgeIndex = 0; edgeIndex < topology.edges.length; edgeIndex++) {\n        const edge = topology.edges[edgeIndex];\n        let triCount = edge.triangles.length;\n        if (triCount === 0 || triCount % 2 !== 0) {\n            return false;\n        }\n        let edgesDirection = 0;\n        for (let triIndex = 0; triIndex < edge.triangles.length; triIndex++) {\n            const triangleIndex = edge.triangles[triIndex];\n            const edgeOrientation = GetEdgeOrientationInTriangle (topology, triangleIndex, edgeIndex);\n            if (edgeOrientation) {\n                edgesDirection += 1;\n            } else {\n                edgesDirection -= 1;\n            }\n        }\n        if (edgesDirection !== 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexport function HasDefaultMaterial (model)\n{\n    for (let i = 0; i < model.MaterialCount (); i++) {\n        let material = model.GetMaterial (i);\n        if (material.isDefault && !material.vertexColors) {\n            return true;\n        }\n    }\n    return false;\n}\n\nexport function ReplaceDefaultMaterialColor (model, color)\n{\n    for (let i = 0; i < model.MaterialCount (); i++) {\n        let material = model.GetMaterial (i);\n        if (material.isDefault) {\n            material.color = color;\n        }\n    }\n}\n", "export const PropertyType =\n{\n    Text : 1,\n    Integer : 2,\n    Number : 3,\n    Boolean : 4,\n    Percent : 5,\n    Color : 6\n};\n\nexport class Property\n{\n    constructor (type, name, value)\n    {\n        this.type = type;\n        this.name = name;\n        this.value = value;\n    }\n}\n\nexport class PropertyGroup\n{\n    constructor (name)\n    {\n        this.name = name;\n        this.properties = [];\n    }\n\n    PropertyCount ()\n    {\n        return this.properties.length;\n    }\n\n    AddProperty (property)\n    {\n        this.properties.push (property);\n    }\n\n    GetProperty (index)\n    {\n        return this.properties[index];\n    }\n}\n", "import { TransformMesh } from './meshutils.js';\nimport { ModelObject3D } from './object.js';\n\nexport class MeshInstanceId\n{\n    constructor (nodeId, meshIndex)\n    {\n        this.nodeId = nodeId;\n        this.meshIndex = meshIndex;\n    }\n\n    IsEqual (rhs)\n    {\n        return this.nodeId === rhs.nodeId && this.meshIndex === rhs.meshIndex;\n    }\n\n    GetKey ()\n    {\n        return this.nodeId.toString () + ':' + this.meshIndex.toString ();\n    }\n}\n\nexport class MeshInstance extends ModelObject3D\n{\n    constructor (id, node, mesh)\n    {\n        super ();\n        this.id = id;\n        this.node = node;\n        this.mesh = mesh;\n    }\n\n    GetId ()\n    {\n        return this.id;\n    }\n\n    GetTransformation ()\n    {\n        return this.node.GetWorldTransformation ();\n    }\n\n    GetMesh ()\n    {\n        return this.mesh;\n    }\n\n    VertexCount ()\n    {\n        return this.mesh.VertexCount ();\n    }\n\n    VertexColorCount ()\n    {\n        return this.mesh.VertexColorCount ();\n    }\n\n    NormalCount ()\n    {\n        return this.mesh.NormalCount ();\n    }\n\n    TextureUVCount ()\n    {\n        return this.mesh.TextureUVCount ();\n    }\n\n    TriangleCount ()\n    {\n        return this.mesh.TriangleCount ();\n    }\n\n    EnumerateVertices (onVertex)\n    {\n        let transformation = this.node.GetWorldTransformation ();\n        if (transformation.IsIdentity ()) {\n            this.mesh.EnumerateVertices (onVertex);\n        } else {\n            this.mesh.EnumerateVertices ((vertex) => {\n                const transformed = transformation.TransformCoord3D (vertex);\n                onVertex (transformed);\n            });\n        }\n    }\n\n    EnumerateTriangleVertexIndices (onTriangleVertexIndices)\n    {\n        this.mesh.EnumerateTriangleVertexIndices (onTriangleVertexIndices);\n    }\n\n    EnumerateTriangleVertices (onTriangleVertices)\n    {\n        let transformation = this.node.GetWorldTransformation ();\n        if (transformation.IsIdentity ()) {\n            this.mesh.EnumerateTriangleVertices (onTriangleVertices);\n        } else {\n            this.mesh.EnumerateTriangleVertices ((v0, v1, v2) => {\n                const v0Transformed = transformation.TransformCoord3D (v0);\n                const v1Transformed = transformation.TransformCoord3D (v1);\n                const v2Transformed = transformation.TransformCoord3D (v2);\n                onTriangleVertices (v0Transformed, v1Transformed, v2Transformed);\n            });\n        }\n    }\n\n    PropertyGroupCount ()\n    {\n        return this.mesh.PropertyGroupCount ();\n    }\n\n    AddPropertyGroup (propertyGroup)\n    {\n        return this.mesh.AddPropertyGroup (propertyGroup);\n    }\n\n    GetPropertyGroup (index)\n    {\n        return this.mesh.GetPropertyGroup (index);\n    }\n\n    GetTransformedMesh ()\n    {\n        let transformation = this.node.GetWorldTransformation ();\n        let transformed = this.mesh.Clone ();\n        TransformMesh (transformed, transformation);\n        return transformed;\n    }\n}\n", "import { Transformation } from '../geometry/transformation.js';\n\nclass NodeIdGenerator\n{\n    constructor ()\n    {\n        this.nextId = 0;\n    }\n\n    GenerateId ()\n    {\n        const id = this.nextId;\n        this.nextId += 1;\n        return id;\n    }\n}\n\nexport const NodeType =\n{\n    GroupNode : 0,\n    MeshNode : 1\n};\n\nexport class Node\n{\n    constructor ()\n    {\n        this.type = NodeType.GroupNode;\n        this.name = '';\n        this.parent = null;\n        this.transformation = new Transformation ();\n\n        this.childNodes = [];\n        this.meshIndices = [];\n\n        this.idGenerator = new NodeIdGenerator ();\n        this.id = this.idGenerator.GenerateId ();\n    }\n\n    IsEmpty ()\n    {\n        return this.childNodes.length === 0 && this.meshIndices.length === 0;\n    }\n\n    GetType ()\n    {\n        return this.type;\n    }\n\n    SetType (type)\n    {\n        this.type = type;\n    }\n\n    GetId ()\n    {\n        return this.id;\n    }\n\n    GetName ()\n    {\n        return this.name;\n    }\n\n    SetName (name)\n    {\n        this.name = name;\n    }\n\n    HasParent ()\n    {\n        return this.parent !== null;\n    }\n\n    GetParent ()\n    {\n        return this.parent;\n    }\n\n    GetTransformation ()\n    {\n        return this.transformation;\n    }\n\n    GetWorldTransformation ()\n    {\n        let transformation = this.transformation.Clone ();\n        let parent = this.parent;\n        while (parent !== null) {\n            transformation.Append (parent.transformation);\n            parent = parent.parent;\n        }\n        return transformation;\n    }\n\n    SetTransformation (transformation)\n    {\n        this.transformation = transformation;\n    }\n\n    AddChildNode (node)\n    {\n        node.parent = this;\n        node.idGenerator = this.idGenerator;\n        node.id = node.idGenerator.GenerateId ();\n        this.childNodes.push (node);\n        return this.childNodes.length - 1;\n    }\n\n    RemoveChildNode (node)\n    {\n        node.parent = null;\n        let index = this.childNodes.indexOf (node);\n        this.childNodes.splice (index, 1);\n    }\n\n    GetChildNodes ()\n    {\n        return this.childNodes;\n    }\n\n    ChildNodeCount ()\n    {\n        return this.childNodes.length;\n    }\n\n    GetChildNode (index)\n    {\n        return this.childNodes[index];\n    }\n\n    AddMeshIndex (index)\n    {\n        this.meshIndices.push (index);\n        return this.meshIndices.length - 1;\n    }\n\n    MeshIndexCount ()\n    {\n        return this.meshIndices.length;\n    }\n\n    GetMeshIndex (index)\n    {\n        return this.meshIndices[index];\n    }\n\n    GetMeshIndices ()\n    {\n        return this.meshIndices;\n    }\n\n    Enumerate (processor)\n    {\n        processor (this);\n        for (const childNode of this.childNodes) {\n            childNode.Enumerate (processor);\n        }\n    }\n\n    EnumerateChildren (processor)\n    {\n        for (const childNode of this.childNodes) {\n            processor (childNode);\n            childNode.EnumerateChildren (processor);\n        }\n    }\n\n    EnumerateMeshIndices (processor)\n    {\n        for (const meshIndex of this.meshIndices) {\n            processor (meshIndex);\n        }\n        for (const childNode of this.childNodes) {\n            childNode.EnumerateMeshIndices (processor);\n        }\n    }\n}\n", "import { MeshInstance, MeshInstanceId } from './meshinstance.js';\nimport { Node } from './node.js';\nimport { ModelObject3D } from './object.js';\n\nexport class Model extends ModelObject3D\n{\n    constructor ()\n    {\n        super ();\n        this.root = new Node ();\n        this.materials = [];\n        this.meshes = [];\n    }\n\n    GetRootNode ()\n    {\n        return this.root;\n    }\n\n    MaterialCount ()\n    {\n        return this.materials.length;\n    }\n\n    MeshCount ()\n    {\n        return this.meshes.length;\n    }\n\n    MeshInstanceCount ()\n    {\n        let count = 0;\n        this.root.Enumerate ((node) => {\n            count += node.MeshIndexCount ();\n        });\n        return count;\n    }\n\n    VertexCount ()\n    {\n        let count = 0;\n        this.EnumerateMeshInstances ((meshInstance) => {\n            count += meshInstance.VertexCount ();\n        });\n        return count;\n    }\n\n    VertexColorCount ()\n    {\n        let count = 0;\n        this.EnumerateMeshInstances ((meshInstance) => {\n            count += meshInstance.VertexColorCount ();\n        });\n        return count;\n    }\n\n    NormalCount ()\n    {\n        let count = 0;\n        this.EnumerateMeshInstances ((meshInstance) => {\n            count += meshInstance.NormalCount ();\n        });\n        return count;\n    }\n\n    TextureUVCount ()\n    {\n        let count = 0;\n        this.EnumerateMeshInstances ((meshInstance) => {\n            count += meshInstance.TextureUVCount ();\n        });\n        return count;\n    }\n\n    TriangleCount ()\n    {\n        let count = 0;\n        this.EnumerateMeshInstances ((meshInstance) => {\n            count += meshInstance.TriangleCount ();\n        });\n        return count;\n    }\n\n    AddMaterial (material)\n    {\n        this.materials.push (material);\n        return this.materials.length - 1;\n    }\n\n    GetMaterial (index)\n    {\n        return this.materials[index];\n    }\n\n    AddMesh (mesh)\n    {\n        this.meshes.push (mesh);\n        return this.meshes.length - 1;\n    }\n\n    AddMeshToRootNode (mesh)\n    {\n        const meshIndex = this.AddMesh (mesh);\n        this.root.AddMeshIndex (meshIndex);\n        return meshIndex;\n    }\n\n    RemoveMesh (index)\n    {\n        this.meshes.splice (index, 1);\n        this.root.Enumerate ((node) => {\n            for (let i = 0; i < node.meshIndices.length; i++) {\n                if (node.meshIndices[i] === index) {\n                    node.meshIndices.splice (i, 1);\n                    i -= 1;\n                } else if (node.meshIndices[i] > index) {\n                    node.meshIndices[i] -= 1;\n                }\n            }\n        });\n    }\n\n    GetMesh (index)\n    {\n        return this.meshes[index];\n    }\n\n    GetMeshInstance (instanceId)\n    {\n        let foundNode = null;\n        this.root.Enumerate ((node) => {\n            if (node.GetId () === instanceId.nodeId) {\n                foundNode = node;\n            }\n        });\n        if (foundNode === null) {\n            return null;\n        }\n        const nodeMeshIndices = foundNode.GetMeshIndices ();\n        if (nodeMeshIndices.indexOf (instanceId.meshIndex) === -1) {\n            return null;\n        }\n        let foundMesh = this.GetMesh (instanceId.meshIndex);\n        let id = new MeshInstanceId (foundNode.GetId (), instanceId.meshIndex);\n        return new MeshInstance (id, foundNode, foundMesh);\n    }\n\n    EnumerateMeshes (onMesh)\n    {\n        for (const mesh of this.meshes) {\n            onMesh (mesh);\n        }\n    }\n\n    EnumerateMeshInstances (onMeshInstance)\n    {\n        this.root.Enumerate ((node) => {\n            for (let meshIndex of node.GetMeshIndices ()) {\n                let id = new MeshInstanceId (node.GetId (), meshIndex);\n                let mesh = this.GetMesh (meshIndex);\n                let meshInstance = new MeshInstance (id, node, mesh);\n                onMeshInstance (meshInstance);\n            }\n        });\n    }\n\n    EnumerateTransformedMeshes (onMesh)\n    {\n        this.EnumerateMeshInstances ((meshInstance) => {\n            const transformed = meshInstance.GetTransformedMesh ();\n            onMesh (transformed);\n        });\n    }\n\n    EnumerateVertices (onVertex)\n    {\n        this.EnumerateMeshInstances ((meshInstance) => {\n            meshInstance.EnumerateVertices (onVertex);\n        });\n    }\n\n    EnumerateTriangleVertexIndices (onTriangleVertexIndices)\n    {\n        this.EnumerateMeshInstances ((meshInstance) => {\n            meshInstance.EnumerateTriangleVertexIndices (onTriangleVertexIndices);\n        });\n    }\n\n    EnumerateTriangleVertices (onTriangleVertices)\n    {\n        this.EnumerateMeshInstances ((meshInstance) => {\n            meshInstance.EnumerateTriangleVertices (onTriangleVertices);\n        });\n    }\n}\n", "import { CopyObjectAttributes } from '../core/core.js';\nimport { AddCoord3D, Coord3D, CoordIsEqual3D } from '../geometry/coord3d.js';\nimport { Color } from './color.js';\nimport { PhongMaterial } from './material.js';\nimport { CalculateTriangleNormal, GetMeshType, MeshType } from './meshutils.js';\n\nclass ModelFinalizer\n{\n    constructor (params)\n    {\n        this.params = {\n            getDefaultMaterialColor : () => {\n                return new Color (0, 0, 0);\n            }\n        };\n        CopyObjectAttributes (params, this.params);\n        this.defaultMaterialIndex = null;\n    }\n\n    Finalize (model)\n    {\n        this.Reset ();\n\n        this.FinalizeMeshes (model);\n        this.FinalizeMaterials (model);\n        this.FinalizeNodes (model);\n    }\n\n    FinalizeMaterials (model)\n    {\n        let hasVertexColors = (model.VertexColorCount () > 0);\n        if (!hasVertexColors) {\n            return;\n        }\n\n        let materialHasVertexColors = new Map ();\n        for (let meshIndex = 0; meshIndex < model.MeshCount (); meshIndex++) {\n            let mesh = model.GetMesh (meshIndex);\n            for (let triangleIndex = 0; triangleIndex < mesh.TriangleCount (); triangleIndex++) {\n                let triangle = mesh.GetTriangle (triangleIndex);\n                let hasVertexColors = triangle.HasVertexColors ();\n                if (!materialHasVertexColors.has (triangle.mat)) {\n                    materialHasVertexColors.set (triangle.mat, hasVertexColors);\n                } else if (!hasVertexColors) {\n                    materialHasVertexColors.set (triangle.mat, false);\n                }\n            }\n        }\n\n        for (let [materialIndex, hasVertexColors] of materialHasVertexColors) {\n            let material = model.GetMaterial (materialIndex);\n            material.vertexColors = hasVertexColors;\n        }\n    }\n\n    FinalizeMeshes (model)\n    {\n        for (let meshIndex = 0; meshIndex < model.MeshCount (); meshIndex++) {\n            let mesh = model.GetMesh (meshIndex);\n            let type = GetMeshType (mesh);\n            if (type === MeshType.Empty) {\n                model.RemoveMesh (meshIndex);\n                meshIndex = meshIndex - 1;\n                continue;\n            }\n            this.FinalizeMesh (model, mesh);\n        }\n    }\n\n    FinalizeMesh (model, mesh)\n    {\n        function CalculateCurveNormals (mesh)\n        {\n            function AddAverageNormal (mesh, triangle, vertexIndex, triangleNormals, vertexToTriangles)\n            {\n                function IsNormalInArray (array, normal)\n                {\n                    for (let i = 0; i < array.length; i++) {\n                        let current = array[i];\n                        if (CoordIsEqual3D (current, normal)) {\n                            return true;\n                        }\n                    }\n                    return false;\n                }\n\n                let averageNormals = [];\n                let neigTriangles = vertexToTriangles.get (vertexIndex);\n                for (let i = 0; i < neigTriangles.length; i++) {\n                    let neigIndex = neigTriangles[i];\n                    let neigTriangle = mesh.GetTriangle (neigIndex);\n                    if (triangle.curve === neigTriangle.curve) {\n                        let triangleNormal = triangleNormals[neigIndex];\n                        if (!IsNormalInArray (averageNormals, triangleNormal)) {\n                            averageNormals.push (triangleNormal);\n                        }\n                    }\n                }\n\n                let averageNormal = new Coord3D (0.0, 0.0, 0.0);\n                for (let i = 0; i < averageNormals.length; i++) {\n                    averageNormal = AddCoord3D (averageNormal, averageNormals[i]);\n                }\n                averageNormal.MultiplyScalar (1.0 / averageNormals.length);\n                averageNormal.Normalize ();\n                return mesh.AddNormal (averageNormal);\n            }\n\n            let triangleNormals = [];\n            let vertexToTriangles = new Map ();\n\n            for (let vertexIndex = 0; vertexIndex < mesh.VertexCount (); vertexIndex++) {\n                vertexToTriangles.set (vertexIndex, []);\n            }\n\n            for (let triangleIndex = 0; triangleIndex < mesh.TriangleCount (); triangleIndex++) {\n                let triangle = mesh.GetTriangle (triangleIndex);\n                let v0 = mesh.GetVertex (triangle.v0);\n                let v1 = mesh.GetVertex (triangle.v1);\n                let v2 = mesh.GetVertex (triangle.v2);\n                let normal = CalculateTriangleNormal (v0, v1, v2);\n                triangleNormals.push (normal);\n                vertexToTriangles.get (triangle.v0).push (triangleIndex);\n                vertexToTriangles.get (triangle.v1).push (triangleIndex);\n                vertexToTriangles.get (triangle.v2).push (triangleIndex);\n            }\n\n            for (let triangleIndex = 0; triangleIndex < mesh.TriangleCount (); triangleIndex++) {\n                let triangle = mesh.GetTriangle (triangleIndex);\n                if (!triangle.HasNormals ()) {\n                    let n0 = AddAverageNormal (mesh, triangle, triangle.v0, triangleNormals, vertexToTriangles);\n                    let n1 = AddAverageNormal (mesh, triangle, triangle.v1, triangleNormals, vertexToTriangles);\n                    let n2 = AddAverageNormal (mesh, triangle, triangle.v2, triangleNormals, vertexToTriangles);\n                    triangle.SetNormals (n0, n1, n2);\n                }\n            }\n        }\n\n        let meshStatus = {\n            calculateCurveNormals : false\n        };\n\n        for (let i = 0; i < mesh.TriangleCount (); i++) {\n            let triangle = mesh.GetTriangle (i);\n            this.FinalizeTriangle (mesh, triangle, meshStatus);\n\n            if (triangle.mat === null) {\n                triangle.mat = this.GetDefaultMaterialIndex (model);\n            }\n        }\n\n        if (meshStatus.calculateCurveNormals) {\n            CalculateCurveNormals (mesh);\n        }\n    }\n\n    FinalizeTriangle (mesh, triangle, meshStatus)\n    {\n        if (!triangle.HasNormals ()) {\n            if (triangle.curve === null || triangle.curve === 0) {\n                let v0 = mesh.GetVertex (triangle.v0);\n                let v1 = mesh.GetVertex (triangle.v1);\n                let v2 = mesh.GetVertex (triangle.v2);\n                let normal = CalculateTriangleNormal (v0, v1, v2);\n                let normalIndex = mesh.AddNormal (normal);\n                triangle.SetNormals (normalIndex, normalIndex, normalIndex);\n            } else {\n                meshStatus.calculateCurveNormals = true;\n            }\n        }\n\n        if (triangle.curve === null) {\n            triangle.curve = 0;\n        }\n    }\n\n    FinalizeNodes (model)\n    {\n        let rootNode = model.GetRootNode ();\n\n        let emptyNodes = [];\n        rootNode.EnumerateChildren ((node) => {\n            if (node.IsEmpty ()) {\n                emptyNodes.push (node);\n            }\n        });\n\n        for (let nodeIndex = 0; nodeIndex < emptyNodes.length; nodeIndex++) {\n            let node = emptyNodes[nodeIndex];\n            let parentNode = node.GetParent ();\n            if (parentNode === null) {\n                continue;\n            }\n            parentNode.RemoveChildNode (node);\n            if (parentNode.IsEmpty ()) {\n                emptyNodes.push (parentNode);\n            }\n        }\n    }\n\n    GetDefaultMaterialIndex (model)\n    {\n        if (this.defaultMaterialIndex === null) {\n            let defaultMaterialColor = this.params.getDefaultMaterialColor ();\n            let defaultMaterial = new PhongMaterial ();\n            defaultMaterial.color = defaultMaterialColor;\n            defaultMaterial.isDefault = true;\n            this.defaultMaterialIndex = model.AddMaterial (defaultMaterial);\n        }\n        return this.defaultMaterialIndex;\n    }\n\n    Reset ()\n    {\n        this.defaultMaterialIndex = null;\n    }\n}\n\nexport function FinalizeModel (model, params)\n{\n    let finalizer = new ModelFinalizer (params);\n    finalizer.Finalize (model);\n}\n\nexport function CheckModel (model)\n{\n    function IsCorrectValue (val)\n    {\n        if (val === undefined || val === null) {\n            return false;\n        }\n        return true;\n    }\n\n    function IsCorrectNumber (val)\n    {\n        if (!IsCorrectValue (val)) {\n            return false;\n        }\n        if (isNaN (val)) {\n            return false;\n        }\n        return true;\n    }\n\n    function IsCorrectIndex (val, count)\n    {\n        if (!IsCorrectNumber (val)) {\n            return false;\n        }\n        if (val < 0 || val >= count) {\n            return false;\n        }\n        return true;\n    }\n\n    function CheckMesh (model, mesh)\n    {\n        function CheckTriangle (model, mesh, triangle)\n        {\n            if (!IsCorrectIndex (triangle.v0, mesh.VertexCount ())) {\n                return false;\n            }\n            if (!IsCorrectIndex (triangle.v1, mesh.VertexCount ())) {\n                return false;\n            }\n            if (!IsCorrectIndex (triangle.v2, mesh.VertexCount ())) {\n                return false;\n            }\n            if (triangle.HasVertexColors ()) {\n                if (!IsCorrectIndex (triangle.c0, mesh.VertexColorCount ())) {\n                    return false;\n                }\n                if (!IsCorrectIndex (triangle.c1, mesh.VertexColorCount ())) {\n                    return false;\n                }\n                if (!IsCorrectIndex (triangle.c2, mesh.VertexColorCount ())) {\n                    return false;\n                }\n            }\n            if (!IsCorrectIndex (triangle.n0, mesh.NormalCount ())) {\n                return false;\n            }\n            if (!IsCorrectIndex (triangle.n1, mesh.NormalCount ())) {\n                return false;\n            }\n            if (!IsCorrectIndex (triangle.n2, mesh.NormalCount ())) {\n                return false;\n            }\n            if (triangle.HasTextureUVs ()) {\n                if (!IsCorrectIndex (triangle.u0, mesh.TextureUVCount ())) {\n                    return false;\n                }\n                    if (!IsCorrectIndex (triangle.u1, mesh.TextureUVCount ())) {\n                    return false;\n                }\n                if (!IsCorrectIndex (triangle.u2, mesh.TextureUVCount ())) {\n                    return false;\n                }\n            }\n            if (!IsCorrectIndex (triangle.mat, model.MaterialCount ())) {\n                return false;\n            }\n            if (!IsCorrectNumber (triangle.curve)) {\n                return false;\n            }\n\n            return true;\n        }\n\n        for (let i = 0; i < mesh.VertexCount (); i++) {\n            let vertex = mesh.GetVertex (i);\n            if (!IsCorrectNumber (vertex.x)) {\n                return false;\n            }\n            if (!IsCorrectNumber (vertex.y)) {\n                return false;\n            }\n            if (!IsCorrectNumber (vertex.z)) {\n                return false;\n            }\n        }\n\n        for (let i = 0; i < mesh.VertexColorCount (); i++) {\n            let color = mesh.GetVertexColor (i);\n            if (!IsCorrectNumber (color.r)) {\n                return false;\n            }\n            if (!IsCorrectNumber (color.g)) {\n                return false;\n            }\n            if (!IsCorrectNumber (color.b)) {\n                return false;\n            }\n        }\n\n        for (let i = 0; i < mesh.NormalCount (); i++) {\n            let normal = mesh.GetNormal (i);\n            if (!IsCorrectNumber (normal.x)) {\n                return false;\n            }\n            if (!IsCorrectNumber (normal.y)) {\n                return false;\n            }\n            if (!IsCorrectNumber (normal.z)) {\n                return false;\n            }\n        }\n\n        for (let i = 0; i < mesh.TextureUVCount (); i++) {\n            let uv = mesh.GetTextureUV (i);\n            if (!IsCorrectNumber (uv.x)) {\n                return false;\n            }\n            if (!IsCorrectNumber (uv.y)) {\n                return false;\n            }\n        }\n\n        for (let i = 0; i < mesh.TriangleCount (); i++) {\n            let triangle = mesh.GetTriangle (i);\n            if (!CheckTriangle (model, mesh, triangle)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    for (let i = 0; i < model.MeshCount (); i++) {\n        let mesh = model.GetMesh (i);\n        if (!CheckMesh (model, mesh)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n", "import { Direction } from '../geometry/geometry.js';\nimport { Model } from '../model/model.js';\nimport { FinalizeModel } from '../model/modelfinalization.js';\nimport { IsModelEmpty } from '../model/modelutils.js';\n\nexport class ImporterBase\n{\n    constructor ()\n    {\n        this.name = null;\n        this.extension = null;\n        this.callbacks = null;\n        this.model = null;\n        this.error = null;\n        this.message = null;\n    }\n\n    Import (name, extension, content, callbacks)\n    {\n        this.Clear ();\n\n        this.name = name;\n        this.extension = extension;\n        this.callbacks = callbacks;\n        this.model = new Model ();\n        this.error = false;\n        this.message = null;\n        this.ResetContent ();\n        this.ImportContent (content, () => {\n            this.CreateResult (callbacks);\n        });\n    }\n\n    Clear ()\n    {\n        this.name = null;\n        this.extension = null;\n        this.callbacks = null;\n        this.model = null;\n        this.error = null;\n        this.message = null;\n        this.ClearContent ();\n    }\n\n    CreateResult (callbacks)\n    {\n        if (this.error) {\n            callbacks.onError ();\n            callbacks.onComplete ();\n            return;\n        }\n\n        if (IsModelEmpty (this.model)) {\n            this.SetError ('The model doesn\\'t contain any meshes.');\n            callbacks.onError ();\n            callbacks.onComplete ();\n            return;\n        }\n\n        FinalizeModel (this.model, {\n            getDefaultMaterialColor : this.callbacks.getDefaultMaterialColor\n        });\n\n        callbacks.onSuccess ();\n        callbacks.onComplete ();\n    }\n\n    CanImportExtension (extension)\n    {\n        return false;\n    }\n\n    GetUpDirection ()\n    {\n        return Direction.Z;\n    }\n\n    ClearContent ()\n    {\n\n    }\n\n    ResetContent ()\n    {\n\n    }\n\n    ImportContent (fileContent, onFinish)\n    {\n\n    }\n\n    GetModel ()\n    {\n        return this.model;\n    }\n\n    SetError (message)\n    {\n        this.error = true;\n        if (message !== undefined && message !== null) {\n            this.message = message;\n        }\n    }\n\n    WasError ()\n    {\n        return this.error;\n    }\n\n    GetErrorMessage ()\n    {\n        return this.message;\n    }\n}\n", "import { IsLower } from '../geometry/geometry.js';\n\nexport function NameFromLine (line, startIndex, commentChar)\n{\n\tlet name = line.substring (startIndex);\n\tlet commentStart = name.indexOf (commentChar);\n\tif (commentStart !== -1) {\n\t\tname = name.substring (0, commentStart);\n\t}\n\treturn name.trim ();\n}\n\nexport function ParametersFromLine (line, commentChar)\n{\n\tif (commentChar !== null) {\n\t\tlet commentStart = line.indexOf (commentChar);\n\t\tif (commentStart !== -1) {\n\t\t\tline = line.substring (0, commentStart).trim ();\n\t\t}\n\t}\n\treturn line.split (/\\s+/u);\n}\n\nexport function ReadLines (str, onLine)\n{\n\tfunction LineFound (line, onLine)\n\t{\n\t\tlet trimmed = line.trim ();\n\t\tif (trimmed.length > 0) {\n\t\t\tonLine (trimmed);\n\t\t}\n\t}\n\n\tlet cursor = 0;\n\tlet next = str.indexOf ('\\n', cursor);\n\twhile (next !== -1) {\n\t\tLineFound (str.substring (cursor, next), onLine);\n\t\tcursor = next + 1;\n\t\tnext = str.indexOf ('\\n', cursor);\n\t}\n\tLineFound (str.substring (cursor), onLine);\n}\n\nexport function IsPowerOfTwo (x)\n{\n\treturn (x & (x - 1)) === 0;\n}\n\nexport function NextPowerOfTwo (x)\n{\n\tif (IsPowerOfTwo (x)) {\n\t\treturn x;\n\t}\n\tlet npot = Math.pow (2, Math.ceil (Math.log (x) / Math.log (2)));\n\treturn parseInt (npot, 10);\n}\n\nexport function UpdateMaterialTransparency (material)\n{\n\tmaterial.transparent = false;\n\tif (IsLower (material.opacity, 1.0)) {\n\t\tmaterial.transparent = true;\n\t}\n}\n", "import { Direction } from '../geometry/geometry.js';\nimport { Matrix } from '../geometry/matrix.js';\nimport { Transformation } from '../geometry/transformation.js';\nimport { LoadExternalLibrary } from '../io/externallibs.js';\nimport { PhongMaterial, PhysicalMaterial } from '../model/material.js';\nimport { TransformMesh } from '../model/meshutils.js';\nimport { IsModelEmpty } from '../model/modelutils.js';\nimport { Property, PropertyGroup, PropertyType } from '../model/property.js';\nimport { ConvertThreeGeometryToMesh } from '../threejs/threeutils.js';\nimport { ImporterBase } from './importerbase.js';\nimport { UpdateMaterialTransparency } from './importerutils.js';\n\nexport class Importer3dm extends ImporterBase\n{\n    constructor ()\n    {\n        super ();\n\t\tthis.rhino = null;\n    }\n\n    CanImportExtension (extension)\n    {\n        return extension === '3dm';\n    }\n\n    GetUpDirection ()\n    {\n        return Direction.Z;\n    }\n\n\tClearContent ()\n\t{\n\t\tthis.instanceIdToObject = null;\n\t\tthis.instanceIdToDefinition = null;\n\t}\n\n    ResetContent ()\n    {\n\t\tthis.instanceIdToObject = new Map ();\n\t\tthis.instanceIdToDefinition = new Map ();\n    }\n\n    ImportContent (fileContent, onFinish)\n    {\n\t\tif (this.rhino === null) {\n\t\t\tLoadExternalLibrary ('loaders/rhino3dm.min.js').then (() => {\n\t\t\t\trhino3dm ().then ((rhino) => {\n\t\t\t\t\tthis.rhino = rhino;\n\t\t\t\t\tthis.ImportRhinoContent (fileContent);\n\t\t\t\t\tonFinish ();\n\t\t\t\t});\n            }).catch (() => {\n                onFinish ();\n            });\n\t\t} else {\n\t\t\tthis.ImportRhinoContent (fileContent);\n\t\t\tonFinish ();\n\t\t}\n    }\n\n\tImportRhinoContent (fileContent)\n\t{\n\t\tlet rhinoDoc = this.rhino.File3dm.fromByteArray (fileContent);\n\t\tif (rhinoDoc === null) {\n\t\t\tthis.SetError ('Failed to read Rhino file.');\n\t\t\treturn;\n\t\t}\n\t\tthis.ImportRhinoDocument (rhinoDoc);\n        if (IsModelEmpty (this.model)) {\n\t\t\tthis.SetError ('The model doesn\\'t contain any 3D meshes. Try to save the model while you are in shaded view in Rhino.');\n        }\n\t}\n\n\tImportRhinoDocument (rhinoDoc)\n\t{\n\t\tthis.InitRhinoInstances (rhinoDoc);\n\t\tthis.ImportRhinoUserStrings (rhinoDoc);\n\t\tthis.ImportRhinoGeometry (rhinoDoc);\n\t}\n\n\tInitRhinoInstances (rhinoDoc)\n\t{\n\t\tlet rhinoObjects = rhinoDoc.objects ();\n\t\tfor (let i = 0; i < rhinoObjects.count; i++) {\n\t\t\tlet rhinoObject = rhinoObjects.get (i);\n\t\t\tlet rhinoAttributes = rhinoObject.attributes ();\n\t\t\tif (rhinoAttributes.isInstanceDefinitionObject) {\n\t\t\t\tthis.instanceIdToObject.set (rhinoAttributes.id, rhinoObject);\n\t\t\t}\n\t\t}\n\t\tlet rhinoInstanceDefinitions = rhinoDoc.instanceDefinitions ();\n\t\tfor (let i = 0; i < rhinoInstanceDefinitions.count (); i++) {\n\t\t\tlet rhinoInstanceDefinition = rhinoInstanceDefinitions.get (i);\n\t\t\tthis.instanceIdToDefinition.set (rhinoInstanceDefinition.id, rhinoInstanceDefinition);\n\t\t}\n\t}\n\n\tImportRhinoUserStrings (rhinoDoc)\n\t{\n\t\tlet docStrings = rhinoDoc.strings ();\n\t\tif (docStrings.count () > 0) {\n\t\t\tlet propertyGroup = new PropertyGroup ('Document user texts');\n\t\t\tfor (let i = 0; i < docStrings.count (); i++) {\n\t\t\t\tlet docString = docStrings.get (i);\n\t\t\t\tpropertyGroup.AddProperty (new Property (PropertyType.Text, docString[0], docString[1]));\n\t\t\t}\n\t\t\tthis.model.AddPropertyGroup (propertyGroup);\n\t\t}\n\t}\n\n\tImportRhinoGeometry (rhinoDoc)\n\t{\n\t\tlet rhinoObjects = rhinoDoc.objects ();\n\t\tfor (let i = 0; i < rhinoObjects.count; i++) {\n\t\t\tlet rhinoObject = rhinoObjects.get (i);\n\t\t\tthis.ImportRhinoGeometryObject (rhinoDoc, rhinoObject, []);\n\t\t}\n\t}\n\n\tImportRhinoGeometryObject (rhinoDoc, rhinoObject, rhinoInstanceReferences)\n\t{\n\t\tlet rhinoGeometry = rhinoObject.geometry ();\n\t\tlet rhinoAttributes = rhinoObject.attributes ();\n\n\t\tlet objectType = rhinoGeometry.objectType;\n\t\tif (rhinoAttributes.isInstanceDefinitionObject && rhinoInstanceReferences.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet rhinoMesh = null;\n\t\tlet deleteMesh = false;\n\n\t\tif (objectType === this.rhino.ObjectType.Mesh) {\n\t\t\trhinoMesh = rhinoGeometry;\n\t\t\tdeleteMesh = false;\n\t\t} else if (objectType === this.rhino.ObjectType.Extrusion) {\n\t\t\trhinoMesh = rhinoGeometry.getMesh (this.rhino.MeshType.Any);\n\t\t\tdeleteMesh = true;\n\t\t} else if (objectType === this.rhino.ObjectType.Brep) {\n\t\t\trhinoMesh = new this.rhino.Mesh ();\n\t\t\tlet faces = rhinoGeometry.faces ();\n\t\t\tfor (let i = 0; i < faces.count; i++) {\n\t\t\t\tlet face = faces.get (i);\n\t\t\t\tlet mesh = face.getMesh (this.rhino.MeshType.Any);\n\t\t\t\tif (mesh) {\n\t\t\t\t\trhinoMesh.append (mesh);\n\t\t\t\t\tmesh.delete ();\n\t\t\t\t}\n\t\t\t\tface.delete ();\n\t\t\t}\n\t\t\tfaces.delete ();\n\t\t\trhinoMesh.compact ();\n\t\t\tdeleteMesh = true;\n\t\t} else if (objectType === this.rhino.ObjectType.SubD) {\n\t\t\trhinoGeometry.subdivide (3);\n\t\t\trhinoMesh = this.rhino.Mesh.createFromSubDControlNet (rhinoGeometry);\n\t\t\tdeleteMesh = true;\n\t\t} else if (objectType === this.rhino.ObjectType.InstanceReference) {\n\t\t\tlet parentDefinitionId = rhinoGeometry.parentIdefId;\n\t\t\tif (this.instanceIdToDefinition.has (parentDefinitionId)) {\n\t\t\t\tlet instanceDefinition = this.instanceIdToDefinition.get (parentDefinitionId);\n\t\t\t\tlet instanceObjectIds = instanceDefinition.getObjectIds ();\n\t\t\t\tfor (let i = 0; i < instanceObjectIds.length; i++) {\n\t\t\t\t\tlet instanceObjectId = instanceObjectIds[i];\n\t\t\t\t\tif (this.instanceIdToObject.has (instanceObjectId)) {\n\t\t\t\t\t\tlet instanceObject = this.instanceIdToObject.get (instanceObjectId);\n\t\t\t\t\t\trhinoInstanceReferences.push (rhinoObject);\n\t\t\t\t\t\tthis.ImportRhinoGeometryObject (rhinoDoc, instanceObject, rhinoInstanceReferences);\n\t\t\t\t\t\trhinoInstanceReferences.pop ();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (rhinoMesh !== null) {\n\t\t\tthis.ImportRhinoMesh (rhinoDoc, rhinoMesh, rhinoObject, rhinoInstanceReferences);\n\t\t\tif (deleteMesh) {\n\t\t\t\trhinoMesh.delete ();\n\t\t\t}\n\t\t}\n\t}\n\n\tImportRhinoMesh (rhinoDoc, rhinoMesh, rhinoObject, rhinoInstanceReferences)\n\t{\n\t\tlet rhinoAttributes = rhinoObject.attributes ();\n\n\t\tlet materialIndex = this.GetMaterialIndex (rhinoDoc, rhinoObject, rhinoInstanceReferences);\n\t\tlet threeJson = rhinoMesh.toThreejsJSON ();\n\t\tlet mesh = ConvertThreeGeometryToMesh (threeJson.data, materialIndex);\n\t\tmesh.SetName (rhinoAttributes.name);\n\n\t\tlet userStrings = rhinoAttributes.getUserStrings ();\n\t\tif (userStrings.length > 0) {\n\t\t\tlet propertyGroup = new PropertyGroup ('User texts');\n\t\t\tfor (let i = 0; i < userStrings.length; i++) {\n\t\t\t\tlet userString = userStrings[i];\n\t\t\t\tpropertyGroup.AddProperty (new Property (PropertyType.Text, userString[0], userString[1]));\n\t\t\t}\n\t\t\tmesh.AddPropertyGroup (propertyGroup);\n\t\t}\n\n\t\tif (rhinoInstanceReferences.length !== 0) {\n\t\t\tlet matrix = new Matrix ().CreateIdentity ();\n\t\t\tfor (let i = rhinoInstanceReferences.length - 1; i >= 0; i--) {\n\t\t\t\tlet rhinoInstanceReference = rhinoInstanceReferences[i];\n\t\t\t\tlet rhinoInstanceReferenceGeometry = rhinoInstanceReference.geometry ();\n\t\t\t\tlet rhinoInstanceReferenceMatrix = rhinoInstanceReferenceGeometry.xform.toFloatArray (false);\n\t\t\t\tlet transformationMatrix = new Matrix (rhinoInstanceReferenceMatrix);\n\t\t\t\tmatrix = matrix.MultiplyMatrix (transformationMatrix);\n\t\t\t}\n\t\t\tlet transformation = new Transformation (matrix);\n\t\t\tTransformMesh (mesh, transformation);\n\t\t}\n\t\tthis.model.AddMeshToRootNode (mesh);\n\t}\n\n\tGetMaterialIndex (rhinoDoc, rhinoObject, rhinoInstanceReferences)\n\t{\n\t\tfunction GetRhinoMaterial (rhino, rhinoObject, rhinoInstanceReferences)\n\t\t{\n\t\t\tlet rhinoAttributes = rhinoObject.attributes ();\n\t\t\tif (rhinoAttributes.materialSource === rhino.ObjectMaterialSource.MaterialFromObject) {\n\t\t\t\tlet materialIndex = rhinoAttributes.materialIndex;\n\t\t\t\tif (materialIndex > -1) {\n\t\t\t\t\treturn rhinoDoc.materials ().get (materialIndex);\n\t\t\t\t}\n\t\t\t} else if (rhinoAttributes.materialSource === rhino.ObjectMaterialSource.MaterialFromLayer) {\n\t\t\t\tlet layerIndex = rhinoAttributes.layerIndex;\n\t\t\t\tif (layerIndex > -1) {\n\t\t\t\t\tlet layer = rhinoDoc.layers ().get (layerIndex);\n\t\t\t\t\tlet layerMaterialIndex = layer.renderMaterialIndex;\n\t\t\t\t\tif (layerMaterialIndex > -1) {\n\t\t\t\t\t\treturn rhinoDoc.materials ().get (layerMaterialIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (rhinoAttributes.materialSource === rhino.ObjectMaterialSource.MaterialFromParent) {\n\t\t\t\tif (rhinoInstanceReferences.length !== 0) {\n\t\t\t\t\treturn GetRhinoMaterial (rhino, rhinoInstanceReferences[0], []);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\tfunction FindMatchingMaterial (model, rhinoMaterial)\n\t\t{\n\t\t\tfunction SetColor (color, rhinoColor)\n\t\t\t{\n\t\t\t\tcolor.Set (rhinoColor.r, rhinoColor.g, rhinoColor.b);\n\t\t\t}\n\n\t\t\tfunction IsBlack (rhinoColor)\n\t\t\t{\n\t\t\t\treturn rhinoColor.r === 0 && rhinoColor.g === 0 && rhinoColor.b === 0;\n\t\t\t}\n\n\t\t\tfunction IsWhite (rhinoColor)\n\t\t\t{\n\t\t\t\treturn rhinoColor.r === 255 && rhinoColor.g === 255 && rhinoColor.b === 255;\n\t\t\t}\n\n\t\t\tlet material = null;\n\t\t\tif (rhinoMaterial === null) {\n\t\t\t\tmaterial = new PhongMaterial ();\n\t\t\t\tmaterial.color.Set (255, 255, 255);\n\t\t\t} else {\n\t\t\t\tlet physicallyBased = rhinoMaterial.physicallyBased ();\n\t\t\t\tif (physicallyBased.supported) {\n\t\t\t\t\tmaterial = new PhysicalMaterial ();\n\t\t\t\t\tmaterial.metalness = physicallyBased.metallic ? 1.0 : 0.0;\n\t\t\t\t\tmaterial.roughness = physicallyBased.roughness;\n\t\t\t\t} else {\n\t\t\t\t\tmaterial = new PhongMaterial ();\n\t\t\t\t\tSetColor (material.ambient, rhinoMaterial.ambientColor);\n\t\t\t\t\tSetColor (material.specular, rhinoMaterial.specularColor);\n\t\t\t\t}\n\t\t\t\tmaterial.name = rhinoMaterial.name;\n\t\t\t\tSetColor (material.color, rhinoMaterial.diffuseColor);\n\t\t\t\tmaterial.opacity = 1.0 - rhinoMaterial.transparency;\n\t\t\t\tUpdateMaterialTransparency (material);\n\t\t\t\t// material.shininess = rhinoMaterial.shine / 255.0;\n\t\t\t\tif (IsBlack (material.color) && !IsWhite (rhinoMaterial.reflectionColor)) {\n\t\t\t\t\tSetColor (material.color, rhinoMaterial.reflectionColor);\n\t\t\t\t}\n\t\t\t\tif (IsBlack (material.color) && !IsWhite (rhinoMaterial.transparentColor)) {\n\t\t\t\t\tSetColor (material.color, rhinoMaterial.transparentColor);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (let i = 0; i < model.MaterialCount (); i++) {\n\t\t\t\tlet current = model.GetMaterial (i);\n\t\t\t\tif (current.IsEqual (material)) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn model.AddMaterial (material);\n\t\t}\n\n\t\tlet rhinoMaterial = GetRhinoMaterial (this.rhino, rhinoObject, rhinoInstanceReferences);\n\t\treturn FindMatchingMaterial (this.model, rhinoMaterial);\n\t}\n}\n", "import { Coord2D } from '../geometry/coord2d.js';\nimport { ArrayToCoord3D, Coord3D } from '../geometry/coord3d.js';\nimport { DegRad, Direction, IsNegative } from '../geometry/geometry.js';\nimport { Matrix } from '../geometry/matrix.js';\nimport { ArrayToQuaternion } from '../geometry/quaternion.js';\nimport { Transformation } from '../geometry/transformation.js';\nimport { BinaryReader } from '../io/binaryreader.js';\nimport { Color, ColorComponentFromFloat } from '../model/color.js';\nimport { PhongMaterial, TextureMap } from '../model/material.js';\nimport { Mesh } from '../model/mesh.js';\nimport { FlipMeshTrianglesOrientation, TransformMesh } from '../model/meshutils.js';\nimport { Node, NodeType } from '../model/node.js';\nimport { Triangle } from '../model/triangle.js';\nimport { ImporterBase } from './importerbase.js';\nimport { UpdateMaterialTransparency } from './importerutils.js';\n\nconst CHUNK3DS =\n{\n    MAIN3DS : 0x4D4D,\n    EDIT3DS : 0x3D3D,\n    EDIT_MATERIAL : 0xAFFF,\n    MAT_NAME : 0xA000,\n    MAT_AMBIENT : 0xA010,\n    MAT_DIFFUSE : 0xA020,\n    MAT_SPECULAR : 0xA030,\n    MAT_SHININESS : 0xA040,\n    MAT_SHININESS_STRENGTH : 0xA041,\n    MAT_TRANSPARENCY : 0xA050,\n    MAT_COLOR_F : 0x0010,\n    MAT_COLOR : 0x0011,\n    MAT_LIN_COLOR : 0x0012,\n    MAT_LIN_COLOR_F : 0x0013,\n    MAT_TEXMAP : 0xA200,\n    MAT_TEXMAP_NAME : 0xA300,\n    MAT_TEXMAP_UOFFSET : 0xA358,\n    MAT_TEXMAP_VOFFSET : 0xA35A,\n    MAT_TEXMAP_USCALE : 0xA354,\n    MAT_TEXMAP_VSCALE : 0xA356,\n    MAT_TEXMAP_ROTATION : 0xA35C,\n    PERCENTAGE : 0x0030,\n    PERCENTAGE_F : 0x0031,\n    EDIT_OBJECT : 0x4000,\n    OBJ_TRIMESH : 0x4100,\n    OBJ_LIGHT : 0x4600,\n    OBJ_CAMERA : 0x4700,\n    TRI_VERTEX : 0x4110,\n    TRI_TEXVERTEX : 0x4140,\n    TRI_FACE : 0x4120,\n    TRI_TRANSFORMATION : 0x4160,\n    TRI_MATERIAL : 0x4130,\n    TRI_SMOOTH : 0x4150,\n    KF3DS : 0xB000,\n    OBJECT_NODE : 0xB002,\n    OBJECT_HIERARCHY : 0xB010,\n    OBJECT_INSTANCE_NAME : 0xB011,\n    OBJECT_PIVOT : 0xB013,\n    OBJECT_POSITION : 0xB020,\n    OBJECT_ROTATION : 0xB021,\n    OBJECT_SCALE : 0xB022,\n    OBJECT_ID : 0xB030\n};\n\nclass Importer3dsNode\n{\n    constructor ()\n    {\n        this.id = -1;\n        this.name = '';\n        this.flags = -1;\n        this.parentId = -1;\n        this.instanceName = '';\n        this.pivot = [0.0, 0.0, 0.0];\n        this.positions = [];\n        this.rotations = [];\n        this.scales = [];\n    }\n}\n\nclass Importer3dsNodeList\n{\n    constructor ()\n    {\n        this.nodes = [];\n        this.nodeIdToNode = new Map ();\n    }\n\n    IsEmpty ()\n    {\n        return this.nodes.length === 0;\n    }\n\n    AddNode (node)\n    {\n        this.nodes.push (node);\n        this.nodeIdToNode.set (node.nodeId, node);\n    }\n\n    GetNodes ()\n    {\n        return this.nodes;\n    }\n}\n\nexport class Importer3ds extends ImporterBase\n{\n    constructor ()\n    {\n        super ();\n    }\n\n    CanImportExtension (extension)\n    {\n        return extension === '3ds';\n    }\n\n    GetUpDirection ()\n    {\n        return Direction.Z;\n    }\n\n    ClearContent ()\n    {\n        this.materialNameToIndex = null;\n        this.meshNameToIndex = null;\n        this.nodeList = null;\n    }\n\n    ResetContent ()\n    {\n        this.materialNameToIndex = new Map ();\n        this.meshNameToIndex = new Map ();\n        this.nodeList = new Importer3dsNodeList ();\n    }\n\n    ImportContent (fileContent, onFinish)\n    {\n        this.ProcessBinary (fileContent);\n        onFinish ();\n    }\n\n    ProcessBinary (fileContent)\n    {\n        let reader = new BinaryReader (fileContent, true);\n        let endByte = reader.GetByteLength ();\n        this.ReadChunks (reader, endByte, (chunkId, chunkLength) => {\n            if (chunkId === CHUNK3DS.MAIN3DS) {\n                this.ReadMainChunk (reader, chunkLength);\n            } else {\n                this.SkipChunk (reader, chunkLength);\n            }\n        });\n    }\n\n    ReadMainChunk (reader, length)\n    {\n        let endByte = this.GetChunkEnd (reader, length);\n        this.ReadChunks (reader, endByte, (chunkId, chunkLength) => {\n            if (chunkId === CHUNK3DS.EDIT3DS) {\n                this.ReadEditorChunk (reader, chunkLength);\n            } else if (chunkId === CHUNK3DS.KF3DS) {\n                this.ReadKeyFrameChunk (reader, chunkLength);\n            } else {\n                this.SkipChunk (reader, chunkLength);\n            }\n        });\n        this.BuildNodeHierarchy ();\n    }\n\n    ReadEditorChunk (reader, length)\n    {\n        let endByte = this.GetChunkEnd (reader, length);\n        this.ReadChunks (reader, endByte, (chunkId, chunkLength) => {\n            if (chunkId === CHUNK3DS.EDIT_MATERIAL) {\n                this.ReadMaterialChunk (reader, chunkLength);\n            } else if (chunkId === CHUNK3DS.EDIT_OBJECT) {\n                this.ReadObjectChunk (reader, chunkLength);\n            } else {\n                this.SkipChunk (reader, chunkLength);\n            }\n        });\n    }\n\n    ReadMaterialChunk (reader, length)\n    {\n        let material = new PhongMaterial ();\n        let endByte = this.GetChunkEnd (reader, length);\n        let shininess = null;\n        let shininessStrength = null;\n        this.ReadChunks (reader, endByte, (chunkId, chunkLength) => {\n            if (chunkId === CHUNK3DS.MAT_NAME) {\n                material.name = this.ReadName (reader);\n            } else if (chunkId === CHUNK3DS.MAT_AMBIENT) {\n                material.ambient = this.ReadColorChunk (reader, chunkLength);\n            } else if (chunkId === CHUNK3DS.MAT_DIFFUSE) {\n                material.color = this.ReadColorChunk (reader, chunkLength);\n            } else if (chunkId === CHUNK3DS.MAT_SPECULAR) {\n                material.specular = this.ReadColorChunk (reader, chunkLength);\n            } else if (chunkId === CHUNK3DS.MAT_SHININESS) {\n                shininess = this.ReadPercentageChunk (reader, chunkLength);\n            } else if (chunkId === CHUNK3DS.MAT_SHININESS_STRENGTH) {\n                shininessStrength = this.ReadPercentageChunk (reader, chunkLength);\n            } else if (chunkId === CHUNK3DS.MAT_TRANSPARENCY) {\n                material.opacity = 1.0 - this.ReadPercentageChunk (reader, chunkLength);\n                UpdateMaterialTransparency (material);\n            } else if (chunkId === CHUNK3DS.MAT_TEXMAP) {\n                material.diffuseMap = this.ReadTextureMapChunk (reader, chunkLength);\n                UpdateMaterialTransparency (material);\n            } else {\n                this.SkipChunk (reader, chunkLength);\n            }\n        });\n\n        if (shininess !== null && shininessStrength !== null) {\n            material.shininess = shininess * shininessStrength / 10.0;\n        }\n        let materialIndex = this.model.AddMaterial (material);\n        this.materialNameToIndex.set (material.name, materialIndex);\n    }\n\n    ReadTextureMapChunk (reader, length)\n    {\n        let texture = new TextureMap ();\n        let endByte = this.GetChunkEnd (reader, length);\n        this.ReadChunks (reader, endByte, (chunkId, chunkLength) => {\n            if (chunkId === CHUNK3DS.MAT_TEXMAP_NAME) {\n                let textureName = this.ReadName (reader);\n                let textureBuffer = this.callbacks.getTextureBuffer (textureName);\n                texture.name = textureName;\n                if (textureBuffer !== null) {\n                    texture.url = textureBuffer.url;\n                    texture.buffer = textureBuffer.buffer;\n                }\n            } else if (chunkId === CHUNK3DS.MAT_TEXMAP_UOFFSET) {\n                texture.offset.x = reader.ReadFloat32 ();\n            } else if (chunkId === CHUNK3DS.MAT_TEXMAP_VOFFSET) {\n                texture.offset.y = reader.ReadFloat32 ();\n            } else if (chunkId === CHUNK3DS.MAT_TEXMAP_USCALE) {\n                texture.scale.x = reader.ReadFloat32 ();\n            } else if (chunkId === CHUNK3DS.MAT_TEXMAP_VSCALE) {\n                texture.scale.y = reader.ReadFloat32 ();\n            } else if (chunkId === CHUNK3DS.MAT_TEXMAP_ROTATION) {\n                texture.rotation = reader.ReadFloat32 () * DegRad;\n            } else {\n                this.SkipChunk (reader, chunkLength);\n            }\n        });\n        return texture;\n    }\n\n    ReadColorChunk (reader, length)\n    {\n        let color = new Color (0, 0, 0);\n        let endByte = this.GetChunkEnd (reader, length);\n        let hasLinColor = false;\n        this.ReadChunks (reader, endByte, (chunkId, chunkLength) => {\n            if (chunkId === CHUNK3DS.MAT_COLOR) {\n                if (!hasLinColor) {\n                    color.r = reader.ReadUnsignedCharacter8 ();\n                    color.g = reader.ReadUnsignedCharacter8 ();\n                    color.b = reader.ReadUnsignedCharacter8 ();\n                }\n            } else if (chunkId === CHUNK3DS.MAT_LIN_COLOR) {\n                color.r = reader.ReadUnsignedCharacter8 ();\n                color.g = reader.ReadUnsignedCharacter8 ();\n                color.b = reader.ReadUnsignedCharacter8 ();\n                hasLinColor = true;\n            } else if (chunkId === CHUNK3DS.MAT_COLOR_F) {\n                if (!hasLinColor) {\n                    color.r = ColorComponentFromFloat (reader.ReadFloat32 ());\n                    color.g = ColorComponentFromFloat (reader.ReadFloat32 ());\n                    color.b = ColorComponentFromFloat (reader.ReadFloat32 ());\n                }\n            } else if (chunkId === CHUNK3DS.MAT_LIN_COLOR_F) {\n                color.r = ColorComponentFromFloat (reader.ReadFloat32 ());\n                color.g = ColorComponentFromFloat (reader.ReadFloat32 ());\n                color.b = ColorComponentFromFloat (reader.ReadFloat32 ());\n                hasLinColor = true;\n            } else {\n                this.SkipChunk (reader, chunkLength);\n            }\n        });\n        return color;\n    }\n\n    ReadPercentageChunk (reader, length)\n    {\n        let percentage = 0.0;\n        let endByte = this.GetChunkEnd (reader, length);\n        this.ReadChunks (reader, endByte, (chunkId, chunkLength) => {\n            if (chunkId === CHUNK3DS.PERCENTAGE) {\n                percentage = reader.ReadUnsignedInteger16 () / 100.0;\n            } else if (chunkId === CHUNK3DS.PERCENTAGE_F) {\n                percentage = reader.ReadFloat32 ();\n            } else {\n                this.SkipChunk (reader, chunkLength);\n            }\n        });\n        return percentage;\n    }\n\n    ReadObjectChunk (reader, length)\n    {\n        let endByte = this.GetChunkEnd (reader, length);\n        let objectName = this.ReadName (reader);\n        this.ReadChunks (reader, endByte, (chunkId, chunkLength) => {\n            if (chunkId === CHUNK3DS.OBJ_TRIMESH) {\n                this.ReadMeshChunk (reader, chunkLength, objectName);\n            } else if (chunkId === CHUNK3DS.OBJ_LIGHT) {\n                this.SkipChunk (reader, chunkLength);\n            } else if (chunkId === CHUNK3DS.OBJ_CAMERA) {\n                this.SkipChunk (reader, chunkLength);\n            } else {\n                this.SkipChunk (reader, chunkLength);\n            }\n        });\n    }\n\n    ReadMeshChunk (reader, length, objectName)\n    {\n        function ApplyMeshTransformation (mesh, meshMatrix)\n        {\n            if (!meshMatrix.IsValid ()) {\n                return;\n            }\n\n            let determinant = meshMatrix.Determinant ();\n            let mirrorByX = IsNegative (determinant);\n            if (mirrorByX) {\n                let scaleMatrix = new Matrix ().CreateScale (-1.0, 1.0, 1.0);\n                meshMatrix = scaleMatrix.MultiplyMatrix (meshMatrix);\n            }\n\n            let invMeshMatrix = meshMatrix.Invert ();\n            if (invMeshMatrix === null) {\n                return;\n            }\n\n            let transformation = new Transformation (invMeshMatrix);\n            TransformMesh (mesh, transformation);\n            if (mirrorByX) {\n                FlipMeshTrianglesOrientation (mesh);\n            }\n        }\n\n        let mesh = new Mesh ();\n        mesh.SetName (objectName);\n\n        let endByte = this.GetChunkEnd (reader, length);\n        let matrixElements = null;\n        this.ReadChunks (reader, endByte, (chunkId, chunkLength) => {\n            if (chunkId === CHUNK3DS.TRI_VERTEX) {\n                this.ReadVerticesChunk (mesh, reader);\n            } else if (chunkId === CHUNK3DS.TRI_TEXVERTEX) {\n                this.ReadTextureVerticesChunk (mesh, reader);\n            } else if (chunkId === CHUNK3DS.TRI_FACE) {\n                this.ReadFacesChunk (mesh, reader, chunkLength);\n            } else if (chunkId === CHUNK3DS.TRI_TRANSFORMATION) {\n                matrixElements = this.ReadTransformationChunk (reader);\n            } else {\n                this.SkipChunk (reader, chunkLength);\n            }\n        });\n\n        if (mesh.VertexCount () === mesh.TextureUVCount ()) {\n            for (let i = 0; i < mesh.TriangleCount (); i++) {\n                let triangle = mesh.GetTriangle (i);\n                triangle.SetTextureUVs (\n                    triangle.v0,\n                    triangle.v1,\n                    triangle.v2\n                );\n            }\n        }\n\n        let meshMatrix = new Matrix (matrixElements);\n        ApplyMeshTransformation (mesh, meshMatrix);\n\n        let meshIndex = this.model.AddMesh (mesh);\n        this.meshNameToIndex.set (mesh.GetName (), meshIndex);\n    }\n\n    ReadVerticesChunk (mesh, reader)\n    {\n        let vertexCount = reader.ReadUnsignedInteger16 ();\n        for (let i = 0; i < vertexCount; i++) {\n            let x = reader.ReadFloat32 ();\n            let y = reader.ReadFloat32 ();\n            let z = reader.ReadFloat32 ();\n            mesh.AddVertex (new Coord3D (x, y, z));\n        }\n    }\n\n    ReadTextureVerticesChunk (mesh, reader)\n    {\n        let texVertexCount = reader.ReadUnsignedInteger16 ();\n        for (let i = 0; i < texVertexCount; i++) {\n            let x = reader.ReadFloat32 ();\n            let y = reader.ReadFloat32 ();\n            mesh.AddTextureUV (new Coord2D (x, y));\n        }\n    }\n\n    ReadFacesChunk (mesh, reader, length)\n    {\n        let endByte = this.GetChunkEnd (reader, length);\n        let faceCount = reader.ReadUnsignedInteger16 ();\n        for (let i = 0; i < faceCount; i++) {\n            let v0 = reader.ReadUnsignedInteger16 ();\n            let v1 = reader.ReadUnsignedInteger16 ();\n            let v2 = reader.ReadUnsignedInteger16 ();\n            reader.ReadUnsignedInteger16 (); // flags\n            mesh.AddTriangle (new Triangle (v0, v1, v2));\n        }\n\n        this.ReadChunks (reader, endByte, (chunkId, chunkLength) => {\n            if (chunkId === CHUNK3DS.TRI_MATERIAL) {\n                this.ReadFaceMaterialsChunk (mesh, reader);\n            } else if (chunkId === CHUNK3DS.TRI_SMOOTH) {\n                this.ReadFaceSmoothingGroupsChunk (mesh, faceCount, reader);\n            } else {\n                this.SkipChunk (reader, chunkLength);\n            }\n        });\n    }\n\n    ReadFaceMaterialsChunk (mesh, reader)\n    {\n        let materialName = this.ReadName (reader);\n        let materialIndex = this.materialNameToIndex.get (materialName);\n        let faceCount = reader.ReadUnsignedInteger16 ();\n        for (let i = 0; i < faceCount; i++) {\n            let faceIndex = reader.ReadUnsignedInteger16 ();\n            let triangle = mesh.GetTriangle (faceIndex);\n            if (materialIndex !== undefined) {\n                triangle.mat = materialIndex;\n            }\n        }\n    }\n\n    ReadFaceSmoothingGroupsChunk (mesh, faceCount, reader)\n    {\n        for (let i = 0; i < faceCount; i++) {\n            let smoothingGroup = reader.ReadUnsignedInteger32 ();\n            let triangle = mesh.GetTriangle (i);\n            triangle.curve = smoothingGroup;\n        }\n    }\n\n    ReadTransformationChunk (reader)\n    {\n        let matrix = [];\n        for (let i = 0; i < 4; i++) {\n            for (let j = 0; j < 3; j++) {\n                matrix.push (reader.ReadFloat32 ());\n            }\n            if (i < 3) {\n                matrix.push (0);\n            } else {\n                matrix.push (1);\n            }\n        }\n        return matrix;\n    }\n\n    ReadKeyFrameChunk (reader, length)\n    {\n        let endByte = this.GetChunkEnd (reader, length);\n        this.ReadChunks (reader, endByte, (chunkId, chunkLength) => {\n            if (chunkId === CHUNK3DS.OBJECT_NODE) {\n                this.ReadObjectNodeChunk (reader, chunkLength);\n            } else {\n                this.SkipChunk (reader, chunkLength);\n            }\n        });\n    }\n\n    BuildNodeHierarchy ()\n    {\n        function GetNodeTransformation (node3ds, isMeshNode)\n        {\n            function GetNodePosition (node3ds)\n            {\n                if (node3ds.positions.length === 0) {\n                    return [0.0, 0.0, 0.0];\n                }\n                return node3ds.positions[0];\n            }\n\n            function GetNodeRotation (node3ds)\n            {\n                function GetQuaternionFromAxisAndAngle (axisAngle)\n                {\n                    let result = [0.0, 0.0, 0.0, 1.0];\n                    let length = Math.sqrt (axisAngle[0] * axisAngle[0] + axisAngle[1] * axisAngle[1] + axisAngle[2] * axisAngle[2]);\n                    if (length > 0.0) {\n                        let omega = axisAngle[3] * -0.5;\n                        let si = Math.sin (omega) / length;\n                        result = [si * axisAngle[0], si * axisAngle[1], si * axisAngle[2], Math.cos (omega)];\n                    }\n                    return result;\n                }\n\n                if (node3ds.rotations.length === 0) {\n                    return [0.0, 0.0, 0.0, 1.0];\n                }\n\n                let rotation = node3ds.rotations[0];\n                return GetQuaternionFromAxisAndAngle (rotation);\n            }\n\n            function GetNodeScale (node3ds)\n            {\n                if (node3ds.scales.length === 0) {\n                    return [1.0, 1.0, 1.0];\n                }\n                return node3ds.scales[0];\n            }\n\n            let matrix = new Matrix ();\n            matrix.ComposeTRS (\n                ArrayToCoord3D (GetNodePosition (node3ds)),\n                ArrayToQuaternion (GetNodeRotation (node3ds)),\n                ArrayToCoord3D (GetNodeScale (node3ds))\n            );\n\n            if (isMeshNode) {\n                let pivotPoint = node3ds.pivot;\n                let pivotMatrix = new Matrix ().CreateTranslation (-pivotPoint[0], -pivotPoint[1], -pivotPoint[2]);\n                matrix = pivotMatrix.MultiplyMatrix (matrix);\n            }\n\n            return new Transformation (matrix);\n        }\n\n        let rootNode = this.model.GetRootNode ();\n        if (this.nodeList.IsEmpty ()) {\n            for (let meshIndex = 0; meshIndex < this.model.MeshCount (); meshIndex++) {\n                rootNode.AddMeshIndex (meshIndex);\n            }\n        } else {\n            let nodeIdToModelNode = new Map ();\n            for (let node3ds of this.nodeList.GetNodes ()) {\n                let node = new Node ();\n                if (node3ds.name.length > 0 && node3ds.name !== '$$$DUMMY') {\n                    node.SetName (node3ds.name);\n                    if (node3ds.instanceName.length > 0) {\n                        node.SetName (node.GetName () + ' ' + node3ds.instanceName);\n                    }\n                }\n                if (node3ds.parentId === 65535 || !nodeIdToModelNode.has (node3ds.parentId)) {\n                    rootNode.AddChildNode (node);\n                } else {\n                    let parentNode = nodeIdToModelNode.get (node3ds.parentId);\n                    parentNode.AddChildNode (node);\n                }\n                nodeIdToModelNode.set (node3ds.id, node);\n                let isMeshNode = this.meshNameToIndex.has (node3ds.name);\n                node.SetTransformation (GetNodeTransformation (node3ds, isMeshNode));\n                if (isMeshNode) {\n                    node.SetType (NodeType.MeshNode);\n                    node.AddMeshIndex (this.meshNameToIndex.get (node3ds.name));\n                }\n            }\n        }\n    }\n\n    ReadObjectNodeChunk (reader, length)\n    {\n        function ReadTrackVector (obj, reader, type)\n        {\n            let result = [];\n            reader.Skip (10);\n\n            let keyNum = reader.ReadInteger32 ();\n            for (let i = 0; i < keyNum; i++) {\n                reader.ReadInteger32 ();\n                let flags = reader.ReadUnsignedInteger16 ();\n                if (flags !== 0) {\n                    reader.ReadFloat32 ();\n                }\n\n                let current = null;\n                if (type === CHUNK3DS.OBJECT_ROTATION) {\n                    let tmp = reader.ReadFloat32 ();\n                    current = obj.ReadVector (reader);\n                    current[3] = tmp;\n                } else {\n                    current = obj.ReadVector (reader);\n                }\n                result.push (current);\n            }\n\n            return result;\n        }\n\n        let node3ds = new Importer3dsNode ();\n        let endByte = this.GetChunkEnd (reader, length);\n        this.ReadChunks (reader, endByte, (chunkId, chunkLength) => {\n            if (chunkId === CHUNK3DS.OBJECT_HIERARCHY) {\n                node3ds.name = this.ReadName (reader);\n                node3ds.flags = reader.ReadUnsignedInteger32 ();\n                node3ds.parentId = reader.ReadUnsignedInteger16 ();\n            } else if (chunkId === CHUNK3DS.OBJECT_INSTANCE_NAME) {\n                node3ds.instanceName = this.ReadName (reader);\n            } else if (chunkId === CHUNK3DS.OBJECT_PIVOT) {\n                node3ds.pivot = this.ReadVector (reader);\n            } else if (chunkId === CHUNK3DS.OBJECT_POSITION) {\n                node3ds.positions = ReadTrackVector (this, reader, CHUNK3DS.OBJECT_POSITION);\n            } else if (chunkId === CHUNK3DS.OBJECT_ROTATION) {\n                node3ds.rotations = ReadTrackVector (this, reader, CHUNK3DS.OBJECT_ROTATION);\n            } else if (chunkId === CHUNK3DS.OBJECT_SCALE) {\n                node3ds.scales = ReadTrackVector (this, reader, CHUNK3DS.OBJECT_SCALE);\n            } else if (chunkId === CHUNK3DS.OBJECT_ID) {\n                node3ds.id = reader.ReadUnsignedInteger16 ();\n            } else {\n                this.SkipChunk (reader, chunkLength);\n            }\n        });\n\n        this.nodeList.AddNode (node3ds);\n    }\n\n    ReadName (reader)\n    {\n        let name = '';\n        let char = 0;\n        let count = 0;\n        while (count < 64) {\n            char = reader.ReadCharacter8 ();\n            if (char === 0) {\n                break;\n            }\n            name = name + String.fromCharCode (char);\n            count = count + 1;\n        }\n        return name;\n    }\n\n    ReadVector (reader)\n    {\n        let result = [\n            reader.ReadFloat32 (),\n            reader.ReadFloat32 (),\n            reader.ReadFloat32 ()\n        ];\n        return result;\n    }\n\n    ReadChunks (reader, endByte, onChunk)\n    {\n        while (reader.GetPosition () <= endByte - 6) {\n        let chunkId = reader.ReadUnsignedInteger16 ();\n            let chunkLength = reader.ReadUnsignedInteger32 ();\n            onChunk (chunkId, chunkLength);\n        }\n    }\n\n    GetChunkEnd (reader, length)\n    {\n        return reader.GetPosition () + length - 6;\n    }\n\n    SkipChunk (reader, length)\n    {\n        reader.Skip (length - 6);\n    }\n}\n", "export class Coord4D\n{\n\tconstructor (x, y, z, w)\n\t{\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n        this.w = w;\n\t}\n\n\tClone ()\n\t{\n\t\treturn new Coord4D (this.x, this.y, this.z, this.w);\n\t}\n}\n", "import { Coord2D } from '../geometry/coord2d.js';\nimport { ArrayToCoord3D, Coord3D } from '../geometry/coord3d.js';\nimport { Coord4D } from '../geometry/coord4d.js';\nimport { Direction } from '../geometry/geometry.js';\nimport { Matrix } from '../geometry/matrix.js';\nimport { ArrayToQuaternion } from '../geometry/quaternion.js';\nimport { Transformation } from '../geometry/transformation.js';\nimport { BinaryReader } from '../io/binaryreader.js';\nimport { ArrayBufferToUtf8String, Base64DataURIToArrayBuffer, CreateObjectUrlWithMimeType, GetFileExtensionFromMimeType } from '../io/bufferutils.js';\nimport { LoadExternalLibrary } from '../io/externallibs.js';\nimport { Color, ColorComponentFromFloat, ColorFromFloatComponents, LinearToSRGB } from '../model/color.js';\nimport { PhongMaterial, PhysicalMaterial, TextureMap } from '../model/material.js';\nimport { Mesh } from '../model/mesh.js';\nimport { Node, NodeType } from '../model/node.js';\nimport { Property, PropertyGroup, PropertyType } from '../model/property.js';\nimport { Triangle } from '../model/triangle.js';\nimport { ImporterBase } from './importerbase.js';\n\nconst GltfComponentType =\n{\n    BYTE : 5120,\n    UNSIGNED_BYTE : 5121,\n    SHORT : 5122,\n    UNSIGNED_SHORT : 5123,\n    UNSIGNED_INT : 5125,\n    FLOAT  : 5126\n};\n\nconst GltfDataType =\n{\n    SCALAR : 0,\n    VEC2 : 1,\n    VEC3 : 2,\n    VEC4 : 3,\n    MAT2 : 4,\n    MAT3  : 5,\n    MAT4  : 6\n};\n\nconst GltfRenderMode =\n{\n    POINTS : 0,\n    LINES : 1,\n    LINE_LOOP : 2,\n    LINE_STRIP : 3,\n    TRIANGLES : 4,\n    TRIANGLE_STRIP  : 5,\n    TRIANGLE_FAN : 6\n};\n\nconst GltfConstants =\n{\n    GLTF_STRING : 0x46546C67,\n    JSON_CHUNK_TYPE : 0x4E4F534A,\n    BINARY_CHUNK_TYPE : 0x004E4942\n};\n\nfunction GetGltfColor (color)\n{\n    return ColorFromFloatComponents (\n        LinearToSRGB (color[0]),\n        LinearToSRGB (color[1]),\n        LinearToSRGB (color[2])\n    );\n}\n\nfunction GetGltfVertexColor (color, componentType)\n{\n    function GetColorComponent (component, componentType)\n    {\n        let normalized = component;\n        if (componentType !== GltfComponentType.FLOAT) {\n            normalized /= 255.0;\n        }\n        return ColorComponentFromFloat (LinearToSRGB (normalized));\n    }\n\n    return new Color (\n        GetColorComponent (color[0], componentType),\n        GetColorComponent (color[1], componentType),\n        GetColorComponent (color[2], componentType)\n    );\n}\n\nclass GltfBufferReader\n{\n    constructor (buffer)\n    {\n        this.reader = new BinaryReader (buffer, true);\n        this.componentType = null;\n        this.dataType = null;\n        this.byteStride = null;\n        this.dataCount = null;\n        this.sparseReader = null;\n    }\n\n    SetComponentType (componentType)\n    {\n        this.componentType = componentType;\n    }\n\n    SetDataType (dataType)\n    {\n        if (dataType === 'SCALAR') {\n            this.dataType = GltfDataType.SCALAR;\n        } else if (dataType === 'VEC2') {\n            this.dataType = GltfDataType.VEC2;\n        } else if (dataType === 'VEC3') {\n            this.dataType = GltfDataType.VEC3;\n        } else if (dataType === 'VEC4') {\n            this.dataType = GltfDataType.VEC4;\n        } else if (dataType === 'MAT2') {\n            this.dataType = GltfDataType.MAT2;\n        } else if (dataType === 'MAT3') {\n            this.dataType = GltfDataType.MAT3;\n        } else if (dataType === 'MAT4') {\n            this.dataType = GltfDataType.MAT4;\n        }\n    }\n\n    SetByteStride (byteStride)\n    {\n        this.byteStride = byteStride;\n    }\n\n    SetDataCount (dataCount)\n    {\n        this.dataCount = dataCount;\n    }\n\n    SetSparseReader (indexReader, valueReader)\n    {\n        this.sparseReader = {\n            indexReader : indexReader,\n            valueReader : valueReader\n        };\n    }\n\n    ReadArrayBuffer (byteLength)\n    {\n        return this.reader.ReadArrayBuffer (byteLength);\n    }\n\n    GetDataCount ()\n    {\n        return this.dataCount;\n    }\n\n    ReadData ()\n    {\n        if (this.dataType === null) {\n            return null;\n        }\n        if (this.dataType === GltfDataType.SCALAR) {\n            let data = this.ReadComponent ();\n            this.SkipBytesByStride (1);\n            return data;\n        } else if (this.dataType === GltfDataType.VEC2) {\n            let x = this.ReadComponent ();\n            let y = this.ReadComponent ();\n            this.SkipBytesByStride (2);\n            return new Coord2D (x, y);\n        } else if (this.dataType === GltfDataType.VEC3) {\n            let x = this.ReadComponent ();\n            let y = this.ReadComponent ();\n            let z = this.ReadComponent ();\n            this.SkipBytesByStride (3);\n            return new Coord3D (x, y, z);\n        } else if (this.dataType === GltfDataType.VEC4) {\n            let x = this.ReadComponent ();\n            let y = this.ReadComponent ();\n            let z = this.ReadComponent ();\n            let w = this.ReadComponent ();\n            this.SkipBytesByStride (4);\n            return new Coord4D (x, y, z, w);\n        }\n        return null;\n    }\n\n    EnumerateData (onData)\n    {\n        if (this.sparseReader === null) {\n            for (let i = 0; i < this.dataCount; i++) {\n                onData (this.ReadData ());\n            }\n        } else {\n            let sparseData = [];\n            for (let i = 0; i < this.sparseReader.indexReader.GetDataCount (); i++) {\n                let index = this.sparseReader.indexReader.ReadData ();\n                let value = this.sparseReader.valueReader.ReadData ();\n                sparseData.push ({\n                    index : index,\n                    value : value\n                });\n            }\n            let sparseIndex = 0;\n            for (let i = 0; i < this.dataCount; i++) {\n                let data = this.ReadData ();\n                if (sparseIndex < sparseData.length && sparseData[sparseIndex].index === i) {\n                    onData (sparseData[sparseIndex].value);\n                    sparseIndex += 1;\n                } else {\n                    onData (data);\n                }\n            }\n        }\n    }\n\n    SkipBytes (bytes)\n    {\n        this.reader.Skip (bytes);\n    }\n\n    ReadComponent ()\n    {\n        if (this.componentType === null) {\n            return null;\n        }\n        if (this.componentType === GltfComponentType.BYTE) {\n            return this.reader.ReadCharacter8 ();\n        } else if (this.componentType === GltfComponentType.UNSIGNED_BYTE) {\n            return this.reader.ReadUnsignedCharacter8 ();\n        } else if (this.componentType === GltfComponentType.SHORT) {\n            return this.reader.ReadInteger16 ();\n        } else if (this.componentType === GltfComponentType.UNSIGNED_SHORT) {\n            return this.reader.ReadUnsignedInteger16 ();\n        } else if (this.componentType === GltfComponentType.UNSIGNED_INT) {\n            return this.reader.ReadInteger32 ();\n        } else if (this.componentType === GltfComponentType.FLOAT) {\n            return this.reader.ReadFloat32 ();\n        }\n        return null;\n    }\n\n    SkipBytesByStride (componentCount)\n    {\n        if (this.byteStride === null) {\n            return;\n        }\n        let readBytes = componentCount * this.GetComponentSize ();\n        this.reader.Skip (this.byteStride - readBytes);\n    }\n\n    GetComponentSize ()\n    {\n        if (this.componentType === GltfComponentType.BYTE) {\n            return 1;\n        } else if (this.componentType === GltfComponentType.UNSIGNED_BYTE) {\n            return 1;\n        } else if (this.componentType === GltfComponentType.SHORT) {\n            return 2;\n        } else if (this.componentType === GltfComponentType.UNSIGNED_SHORT) {\n            return 2;\n        } else if (this.componentType === GltfComponentType.UNSIGNED_INT) {\n            return 4;\n        } else if (this.componentType === GltfComponentType.FLOAT) {\n            return 4;\n        }\n        return 0;\n    }\n}\n\nclass GltfExtensions\n{\n    constructor ()\n    {\n        this.supportedExtensions = [\n            'KHR_draco_mesh_compression',\n            'KHR_materials_pbrSpecularGlossiness',\n            'KHR_texture_transform',\n        ];\n        this.draco = null;\n    }\n\n    LoadLibraries (extensionsRequired, callbacks)\n    {\n        if (extensionsRequired === undefined) {\n            callbacks.onSuccess ();\n            return;\n        }\n        if (this.draco === null && extensionsRequired.indexOf ('KHR_draco_mesh_compression') !== -1) {\n\t\t\tLoadExternalLibrary ('loaders/draco_decoder.js').then (() => {\n                DracoDecoderModule ().then ((draco) => {\n                    this.draco = draco;\n                    callbacks.onSuccess ();\n                });\n            }).catch (() => {\n                callbacks.onError ();\n            });\n        } else {\n            callbacks.onSuccess ();\n        }\n    }\n\n    GetUnsupportedExtensions (extensionsRequired)\n    {\n        let unsupportedExtensions = [];\n        if (extensionsRequired === undefined) {\n            return unsupportedExtensions;\n        }\n        for (let i = 0; i < extensionsRequired.length; i++) {\n            let requiredExtension = extensionsRequired[i];\n            if (this.supportedExtensions.indexOf (requiredExtension) === -1) {\n                unsupportedExtensions.push (requiredExtension);\n            }\n        }\n        return unsupportedExtensions;\n    }\n\n    ProcessMaterial (gltfMaterial, material, imporTextureFn)\n    {\n        if (gltfMaterial.extensions === undefined) {\n            return null;\n        }\n\n        let khrSpecularGlossiness = gltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness;\n        if (khrSpecularGlossiness === undefined) {\n            return null;\n        }\n\n        let phongMaterial = new PhongMaterial ();\n        let diffuseColor = khrSpecularGlossiness.diffuseFactor;\n        if (diffuseColor !== undefined) {\n            phongMaterial.color = GetGltfColor (diffuseColor);\n            phongMaterial.opacity = diffuseColor[3];\n        }\n        let diffuseTexture = khrSpecularGlossiness.diffuseTexture;\n        if (diffuseTexture !== undefined) {\n            phongMaterial.diffuseMap = imporTextureFn (diffuseTexture);\n        }\n        let specularColor = khrSpecularGlossiness.specularFactor;\n        if (specularColor !== undefined) {\n            phongMaterial.specular = GetGltfColor (specularColor);\n        }\n        let specularTexture = khrSpecularGlossiness.specularGlossinessTexture;\n        if (specularTexture !== undefined) {\n            phongMaterial.specularMap = imporTextureFn (specularTexture);\n        }\n        let glossiness = khrSpecularGlossiness.glossinessFactor;\n        if (glossiness !== undefined) {\n            phongMaterial.shininess = glossiness;\n        }\n\n        return phongMaterial;\n    }\n\n    ProcessTexture (gltfTexture, texture)\n    {\n        if (gltfTexture.extensions === undefined) {\n            return;\n        }\n        let khrTextureTransform = gltfTexture.extensions.KHR_texture_transform;\n        if (khrTextureTransform !== undefined) {\n            if (khrTextureTransform.offset !== undefined) {\n                texture.offset.x = khrTextureTransform.offset[0];\n                texture.offset.y = -khrTextureTransform.offset[1];\n            }\n            if (khrTextureTransform.scale !== undefined) {\n                texture.scale.x = khrTextureTransform.scale[0];\n                texture.scale.y = khrTextureTransform.scale[1];\n            }\n            if (khrTextureTransform.rotation !== undefined) {\n                texture.rotation = -khrTextureTransform.rotation;\n            }\n        }\n    }\n\n    ProcessPrimitive (importer, gltf, primitive, mesh)\n    {\n        function EnumerateComponents (draco, decoder, dracoMesh, attributeId, processor)\n        {\n            let attribute = decoder.GetAttributeByUniqueId (dracoMesh, attributeId);\n            let numComponents = attribute.num_components ();\n            let numPoints = dracoMesh.num_points ();\n            let numValues = numPoints * numComponents;\n            let dataSize = numValues * 4;\n            let attributePtr = draco._malloc (dataSize);\n            decoder.GetAttributeDataArrayForAllPoints (dracoMesh, attribute, draco.DT_FLOAT32, dataSize, attributePtr);\n            let attributeArray = new Float32Array (draco.HEAPF32.buffer, attributePtr, numValues).slice ();\n            if (numComponents === 2) {\n                for (let i = 0; i < attributeArray.length; i += 2) {\n                    processor (new Coord2D (\n                        attributeArray[i + 0],\n                        attributeArray[i + 1]\n                    ));\n                }\n            } else if (numComponents === 3) {\n                for (let i = 0; i < attributeArray.length; i += 3) {\n                    processor (new Coord3D (\n                        attributeArray[i + 0],\n                        attributeArray[i + 1],\n                        attributeArray[i + 2]\n                    ));\n                }\n            } else if (numComponents === 4) {\n                for (let i = 0; i < attributeArray.length; i += 4) {\n                    processor (new Coord4D (\n                        attributeArray[i + 0],\n                        attributeArray[i + 1],\n                        attributeArray[i + 2],\n                        attributeArray[i + 3]\n                    ));\n                }\n            }\n            draco._free (attributePtr);\n        }\n\n        if (this.draco === null) {\n            return false;\n        }\n\n        if (primitive.extensions === undefined || primitive.extensions.KHR_draco_mesh_compression === undefined) {\n            return false;\n        }\n\n        let decoder = new this.draco.Decoder ();\n        let decoderBuffer = new this.draco.DecoderBuffer ();\n\n        let extensionParams = primitive.extensions.KHR_draco_mesh_compression;\n        let compressedBufferView = gltf.bufferViews[extensionParams.bufferView];\n        let compressedReader = importer.GetReaderFromBufferView (compressedBufferView);\n        let compressedArrayBuffer = compressedReader.ReadArrayBuffer (compressedBufferView.byteLength);\n        decoderBuffer.Init (new Int8Array (compressedArrayBuffer), compressedArrayBuffer.byteLength);\n        let geometryType = decoder.GetEncodedGeometryType (decoderBuffer);\n        if (geometryType !== this.draco.TRIANGULAR_MESH) {\n            return true;\n        }\n\n        let dracoMesh = new this.draco.Mesh ();\n        let decodingStatus = decoder.DecodeBufferToMesh (decoderBuffer, dracoMesh);\n        if (!decodingStatus.ok ()) {\n            return true;\n        }\n\n        let hasVertices = (extensionParams.attributes.POSITION !== undefined);\n        let hasVertexColors = false;\n        let hasNormals = (extensionParams.attributes.NORMAL !== undefined);\n        let hasUVs = (extensionParams.attributes.TEXCOORD_0 !== undefined);\n\n        if (!hasVertices) {\n            return true;\n        }\n\n        let vertexOffset = mesh.VertexCount ();\n        let vertexColorOffset = mesh.VertexColorCount ();\n        let normalOffset = mesh.NormalCount ();\n        let uvOffset = mesh.TextureUVCount ();\n\n        EnumerateComponents (this.draco, decoder, dracoMesh, extensionParams.attributes.POSITION, (vertex) => {\n            mesh.AddVertex (vertex);\n        });\n\n        if (hasNormals) {\n            EnumerateComponents (this.draco, decoder, dracoMesh, extensionParams.attributes.NORMAL, (normal) => {\n                mesh.AddNormal (normal);\n            });\n        }\n\n        if (hasUVs) {\n            EnumerateComponents (this.draco, decoder, dracoMesh, extensionParams.attributes.TEXCOORD_0, (uv) => {\n                uv.y = -uv.y;\n                mesh.AddTextureUV (uv);\n            });\n        }\n\n        let faceCount = dracoMesh.num_faces ();\n        let indexCount = faceCount * 3;\n        let indexDataSize = indexCount * 4;\n        let indexDataPtr = this.draco._malloc (indexDataSize);\n        decoder.GetTrianglesUInt32Array (dracoMesh, indexDataSize, indexDataPtr);\n        let indexArray = new Uint32Array (this.draco.HEAPU32.buffer, indexDataPtr, indexCount).slice ();\n        for (let i = 0; i < indexArray.length; i += 3) {\n            let v0 = indexArray[i];\n            let v1 = indexArray[i + 1];\n            let v2 = indexArray[i + 2];\n            importer.AddTriangle (primitive, mesh, v0, v1, v2, hasVertexColors, hasNormals, hasUVs, vertexOffset, vertexColorOffset, normalOffset, uvOffset);\n        }\n        this.draco._free (indexDataPtr);\n\n        return true;\n    }\n}\n\nexport class ImporterGltf extends ImporterBase\n{\n    constructor ()\n    {\n        super ();\n        this.gltfExtensions = new GltfExtensions ();\n    }\n\n    CanImportExtension (extension)\n    {\n        return extension === 'gltf' || extension === 'glb';\n    }\n\n    GetUpDirection ()\n    {\n        return Direction.Y;\n    }\n\n    ClearContent ()\n    {\n        this.bufferContents = null;\n        this.imageIndexToTextureParams = null;\n    }\n\n    ResetContent ()\n    {\n        this.bufferContents = [];\n        this.imageIndexToTextureParams = new Map ();\n    }\n\n    ImportContent (fileContent, onFinish)\n    {\n        if (this.extension === 'gltf') {\n            this.ProcessGltf (fileContent, onFinish);\n        } else if (this.extension === 'glb') {\n            this.ProcessBinaryGltf (fileContent, onFinish);\n        }\n    }\n\n    ProcessGltf (fileContent, onFinish)\n    {\n        let textContent = ArrayBufferToUtf8String (fileContent);\n        let gltf = JSON.parse (textContent);\n        if (gltf.asset.version !== '2.0') {\n            this.SetError ('Invalid glTF version.');\n            onFinish ();\n            return;\n        }\n\n        for (let i = 0; i < gltf.buffers.length; i++) {\n            let buffer = null;\n            let gltfBuffer = gltf.buffers[i];\n            let base64Buffer = Base64DataURIToArrayBuffer (gltfBuffer.uri);\n            if (base64Buffer !== null) {\n                buffer = base64Buffer.buffer;\n            } else {\n                let fileBuffer = this.callbacks.getFileBuffer (gltfBuffer.uri);\n                if (fileBuffer !== null) {\n                    buffer = fileBuffer;\n                }\n            }\n            if (buffer === null) {\n                this.SetError ('One of the requested buffers is missing.');\n                onFinish ();\n                return;\n            }\n            this.bufferContents.push (buffer);\n        }\n\n        this.ProcessMainFile (gltf, onFinish);\n    }\n\n    ProcessBinaryGltf (fileContent, onFinish)\n    {\n        function ReadChunk (reader)\n        {\n            let length = reader.ReadUnsignedInteger32 ();\n            let type = reader.ReadUnsignedInteger32 ();\n            let buffer = reader.ReadArrayBuffer (length);\n            return {\n                type : type,\n                buffer : buffer\n            };\n        }\n\n        let reader = new BinaryReader (fileContent, true);\n        let magic = reader.ReadUnsignedInteger32 ();\n        if (magic !== GltfConstants.GLTF_STRING) {\n            this.SetError ('Invalid glTF file.');\n            onFinish ();\n            return;\n        }\n        let version = reader.ReadUnsignedInteger32 ();\n        if (version !== 2) {\n            this.SetError ('Invalid glTF version.');\n            onFinish ();\n            return;\n        }\n        let length = reader.ReadUnsignedInteger32 ();\n        if (length !== reader.GetByteLength ()) {\n            this.SetError ('Invalid glTF file.');\n            onFinish ();\n            return;\n        }\n\n        let gltfTextContent = null;\n        while (!reader.End ()) {\n            let chunk = ReadChunk (reader);\n            if (chunk.type === GltfConstants.JSON_CHUNK_TYPE) {\n                gltfTextContent = ArrayBufferToUtf8String (chunk.buffer);\n            } else if (chunk.type === GltfConstants.BINARY_CHUNK_TYPE) {\n                this.bufferContents.push (chunk.buffer);\n            }\n        }\n\n        if (gltfTextContent !== null) {\n            let gltf = JSON.parse (gltfTextContent);\n            this.ProcessMainFile (gltf, onFinish);\n        }\n    }\n\n    ProcessMainFile (gltf, onFinish)\n    {\n        let unsupportedExtensions = this.gltfExtensions.GetUnsupportedExtensions (gltf.extensionsRequired);\n        if (unsupportedExtensions.length > 0) {\n            this.SetError ('Unsupported extension: ' + unsupportedExtensions.join (', ') + '.');\n            onFinish ();\n            return;\n        }\n\n        this.gltfExtensions.LoadLibraries (gltf.extensionsRequired, {\n            onSuccess : () => {\n                this.ImportModel (gltf);\n                onFinish ();\n            },\n            onError : () => {\n                this.SetError ('Failed to load draco decoder.');\n                onFinish ();\n            }\n        });\n    }\n\n    ImportModel (gltf)\n    {\n        let materials = gltf.materials;\n        if (materials !== undefined) {\n            for (let material of materials) {\n                this.ImportMaterial (gltf, material);\n            }\n        }\n\n        let meshes = gltf.meshes;\n        if (meshes !== undefined) {\n            for (let mesh of meshes) {\n                this.ImportMesh (gltf, mesh);\n            }\n        }\n\n        this.ImportNodes (gltf);\n        this.ImportModelProperties (gltf);\n    }\n\n    ImportModelProperties (gltf)\n    {\n        function ImportProperties (model, propertyGroupName, propertyObject)\n        {\n            let propertyGroup = new PropertyGroup (propertyGroupName);\n            for (let propertyName in propertyObject) {\n                if (Object.prototype.hasOwnProperty.call (propertyObject, propertyName)) {\n                    if (typeof propertyObject[propertyName] === 'string') {\n                        const property = new Property (PropertyType.Text, propertyName, propertyObject[propertyName]);\n                        propertyGroup.AddProperty (property);\n                    }\n                }\n            }\n            if (propertyGroup.PropertyCount () > 0) {\n                model.AddPropertyGroup (propertyGroup);\n            }\n            return propertyGroup;\n        }\n\n        ImportProperties (this.model, 'Asset properties', gltf.asset);\n        if (gltf.asset['extras']) {\n            ImportProperties (this.model, 'Extras', gltf.asset['extras']);\n        }\n    }\n\n    GetDefaultScene (gltf)\n    {\n        let defaultSceneIndex = gltf.scene || 0;\n        if (defaultSceneIndex >= gltf.scenes.length) {\n            return null;\n        }\n        return gltf.scenes[defaultSceneIndex];\n    }\n\n    ImportMaterial (gltf, gltfMaterial)\n    {\n        let material = new PhysicalMaterial ();\n        if (gltfMaterial.name !== undefined) {\n            material.name = gltfMaterial.name;\n        }\n\n        material.color = GetGltfColor ([1.0, 1.0, 1.0]);\n        if (gltfMaterial.pbrMetallicRoughness !== undefined) {\n            let baseColor = gltfMaterial.pbrMetallicRoughness.baseColorFactor;\n            if (baseColor !== undefined) {\n                material.color = GetGltfColor (baseColor);\n                material.opacity = baseColor[3];\n            }\n            let metallicFactor = gltfMaterial.pbrMetallicRoughness.metallicFactor;\n            if (metallicFactor !== undefined) {\n                material.metalness = metallicFactor;\n            }\n            let roughnessFactor = gltfMaterial.pbrMetallicRoughness.roughnessFactor;\n            if (roughnessFactor !== undefined) {\n                material.roughness = roughnessFactor;\n            }\n            let emissiveColor = gltfMaterial.emissiveFactor;\n            if (emissiveColor !== undefined) {\n                material.emissive = GetGltfColor (emissiveColor);\n            }\n\n            material.diffuseMap = this.ImportTexture (gltf, gltfMaterial.pbrMetallicRoughness.baseColorTexture);\n            material.metalnessMap = this.ImportTexture (gltf, gltfMaterial.pbrMetallicRoughness.metallicRoughnessTexture);\n            material.normalMap = this.ImportTexture (gltf, gltfMaterial.normalTexture);\n            material.emissiveMap = this.ImportTexture (gltf, gltfMaterial.emissiveTexture);\n            if (material.diffuseMap !== null) {\n                material.multiplyDiffuseMap = true;\n            }\n\n            let alphaMode = gltfMaterial.alphaMode;\n            if (alphaMode !== undefined) {\n                if (alphaMode === 'BLEND') {\n                    material.transparent = true;\n                } else if (alphaMode === 'MASK') {\n                    material.transparent = true;\n                    material.alphaTest = gltfMaterial.alphaCutoff || 0.5;\n                }\n            }\n        }\n\n        let newMaterial = this.gltfExtensions.ProcessMaterial (gltfMaterial, material, (textureRef) => {\n            return this.ImportTexture (gltf, textureRef);\n        });\n        if (newMaterial !== null) {\n            material = newMaterial;\n        }\n        this.model.AddMaterial (material);\n    }\n\n    ImportTexture (gltf, gltfTextureRef)\n    {\n        if (gltfTextureRef === undefined || gltfTextureRef === null) {\n            return null;\n        }\n\n        let texture = new TextureMap ();\n        let gltfTexture = gltf.textures[gltfTextureRef.index];\n        let gltfImageIndex = gltfTexture.source;\n        let gltfImage = gltf.images[gltfImageIndex];\n\n        let textureParams = null;\n        if (this.imageIndexToTextureParams.has (gltfImageIndex)) {\n            textureParams = this.imageIndexToTextureParams.get (gltfImageIndex);\n        } else {\n            textureParams = {\n                name : null,\n                url : null,\n                buffer : null\n            };\n            let textureIndexString = gltfImageIndex.toString ();\n            if (gltfImage.uri !== undefined) {\n                let base64Buffer = Base64DataURIToArrayBuffer (gltfImage.uri);\n                if (base64Buffer !== null) {\n                    textureParams.name = 'Embedded_' + textureIndexString + '.' + GetFileExtensionFromMimeType (base64Buffer.mimeType);\n                    textureParams.url = CreateObjectUrlWithMimeType (base64Buffer.buffer, base64Buffer.mimeType);\n                    textureParams.buffer = base64Buffer.buffer;\n                } else {\n                    let textureBuffer = this.callbacks.getTextureBuffer (gltfImage.uri);\n                    textureParams.name = gltfImage.uri;\n                    if (textureBuffer !== null) {\n                        textureParams.url = textureBuffer.url;\n                        textureParams.buffer = textureBuffer.buffer;\n                    }\n                }\n            } else if (gltfImage.bufferView !== undefined) {\n                let bufferView = gltf.bufferViews[gltfImage.bufferView];\n                let reader = this.GetReaderFromBufferView (bufferView);\n                if (reader !== null) {\n                    let buffer = reader.ReadArrayBuffer (bufferView.byteLength);\n                    textureParams.name = 'Binary_' + textureIndexString + '.' + GetFileExtensionFromMimeType (gltfImage.mimeType);\n                    textureParams.url = CreateObjectUrlWithMimeType (buffer, gltfImage.mimeType);\n                    textureParams.buffer = buffer;\n                }\n            }\n            this.imageIndexToTextureParams.set (gltfImageIndex, textureParams);\n        }\n\n        texture.name = textureParams.name;\n        texture.url = textureParams.url;\n        texture.buffer = textureParams.buffer;\n\n        this.gltfExtensions.ProcessTexture (gltfTextureRef, texture);\n        return texture;\n    }\n\n    ImportMesh (gltf, gltfMesh)\n    {\n        let mesh = new Mesh ();\n        this.model.AddMesh (mesh);\n        if (gltfMesh.name !== undefined) {\n            mesh.SetName (gltfMesh.name);\n        }\n\n        for (let i = 0; i < gltfMesh.primitives.length; i++) {\n            let primitive = gltfMesh.primitives[i];\n            this.ImportPrimitive (gltf, primitive, mesh);\n        }\n    }\n\n    ImportPrimitive (gltf, primitive, mesh)\n    {\n        if (this.gltfExtensions.ProcessPrimitive (this, gltf, primitive, mesh)) {\n            return;\n        }\n\n        if (primitive.attributes === undefined) {\n            return;\n        }\n\n        let hasVertices = (primitive.attributes.POSITION !== undefined);\n        let hasVertexColors = (primitive.attributes.COLOR_0 !== undefined);\n        let hasNormals = (primitive.attributes.NORMAL !== undefined);\n        let hasUVs = (primitive.attributes.TEXCOORD_0 !== undefined);\n        let hasIndices = (primitive.indices !== undefined);\n\n        let mode = GltfRenderMode.TRIANGLES;\n        if (primitive.mode !== undefined) {\n            mode = primitive.mode;\n        }\n        if (mode !== GltfRenderMode.TRIANGLES && mode !== GltfRenderMode.TRIANGLE_STRIP && mode !== GltfRenderMode.TRIANGLE_FAN) {\n            return;\n        }\n\n        let vertexOffset = mesh.VertexCount ();\n        let vertexColorOffset = mesh.VertexColorCount ();\n        let normalOffset = mesh.NormalCount ();\n        let uvOffset = mesh.TextureUVCount ();\n\n        if (hasVertices) {\n            let accessor = gltf.accessors[primitive.attributes.POSITION];\n            let reader = this.GetReaderFromAccessor (gltf, accessor);\n            if (reader === null) {\n                return;\n            }\n            reader.EnumerateData ((data) => {\n                mesh.AddVertex (data);\n            });\n        } else {\n            return;\n        }\n\n        if (hasVertexColors) {\n            let accessor = gltf.accessors[primitive.attributes.COLOR_0];\n            let reader = this.GetReaderFromAccessor (gltf, accessor);\n            if (reader === null) {\n                return;\n            }\n            reader.EnumerateData ((data) => {\n                let color = GetGltfVertexColor ([data.x, data.y, data.z], reader.componentType);\n                mesh.AddVertexColor (color);\n            });\n        }\n\n        if (hasNormals) {\n            let accessor = gltf.accessors[primitive.attributes.NORMAL];\n            let reader = this.GetReaderFromAccessor (gltf, accessor);\n            if (reader === null) {\n                return;\n            }\n            reader.EnumerateData ((data) => {\n                mesh.AddNormal (data);\n            });\n        }\n\n        if (hasUVs) {\n            let accessor = gltf.accessors[primitive.attributes.TEXCOORD_0];\n            let reader = this.GetReaderFromAccessor (gltf, accessor);\n            if (reader === null) {\n                return;\n            }\n            reader.EnumerateData ((data) => {\n                data.y = -data.y;\n                mesh.AddTextureUV (data);\n            });\n        }\n\n        let vertexIndices = [];\n        if (hasIndices) {\n            let accessor = gltf.accessors[primitive.indices];\n            let reader = this.GetReaderFromAccessor (gltf, accessor);\n            if (reader === null) {\n                return;\n            }\n            reader.EnumerateData ((data) => {\n                vertexIndices.push (data);\n            });\n        } else {\n            for (let i = 0; i < mesh.VertexCount (); i++) {\n                vertexIndices.push (i);\n            }\n        }\n\n        if (mode === GltfRenderMode.TRIANGLES) {\n            for (let i = 0; i < vertexIndices.length; i += 3) {\n                let v0 = vertexIndices[i];\n                let v1 = vertexIndices[i + 1];\n                let v2 = vertexIndices[i + 2];\n                this.AddTriangle (primitive, mesh, v0, v1, v2, hasVertexColors, hasNormals, hasUVs, vertexOffset, vertexColorOffset, normalOffset, uvOffset);\n            }\n        } else if (mode === GltfRenderMode.TRIANGLE_STRIP) {\n            for (let i = 0; i < vertexIndices.length - 2; i++) {\n                let v0 = vertexIndices[i];\n                let v1 = vertexIndices[i + 1];\n                let v2 = vertexIndices[i + 2];\n                if (i % 2 === 1) {\n                    let tmp = v1;\n                    v1 = v2;\n                    v2 = tmp;\n                }\n                this.AddTriangle (primitive, mesh, v0, v1, v2, hasVertexColors, hasNormals, hasUVs, vertexOffset, vertexColorOffset, normalOffset, uvOffset);\n            }\n        } else if (mode === GltfRenderMode.TRIANGLE_FAN) {\n            for (let i = 1; i < vertexIndices.length - 1; i++) {\n                let v0 = vertexIndices[0];\n                let v1 = vertexIndices[i];\n                let v2 = vertexIndices[i + 1];\n                this.AddTriangle (primitive, mesh, v0, v1, v2, hasVertexColors, hasNormals, hasUVs, vertexOffset, vertexColorOffset, normalOffset, uvOffset);\n            }\n        }\n    }\n\n    AddTriangle (primitive, mesh, v0, v1, v2, hasVertexColors, hasNormals, hasUVs, vertexOffset, vertexColorOffset, normalOffset, uvOffset)\n    {\n        let triangle = new Triangle (vertexOffset + v0, vertexOffset + v1, vertexOffset + v2);\n        if (hasVertexColors) {\n            triangle.SetVertexColors (\n                vertexColorOffset + v0,\n                vertexColorOffset + v1,\n                vertexColorOffset + v2\n            );\n        }\n        if (hasNormals) {\n            triangle.SetNormals (\n                normalOffset + v0,\n                normalOffset + v1,\n                normalOffset + v2\n            );\n        }\n        if (hasUVs) {\n            triangle.SetTextureUVs (\n                uvOffset + v0,\n                uvOffset + v1,\n                uvOffset + v2\n            );\n        }\n        if (primitive.material !== undefined) {\n            triangle.mat = primitive.material;\n        }\n        mesh.AddTriangle (triangle);\n    }\n\n    ImportNodes (gltf)\n    {\n        let scene = this.GetDefaultScene (gltf);\n        if (scene === null) {\n            return;\n        }\n        let rootNode = this.model.GetRootNode ();\n        for (let nodeIndex of scene.nodes) {\n            let gltfNode = gltf.nodes[nodeIndex];\n            this.ImportNode (gltf, gltfNode, rootNode);\n        }\n    }\n\n    ImportNode (gltf, gltfNode, parentNode)\n    {\n        function GetNodeTransformation (gltfNode)\n        {\n            let matrix = new Matrix ().CreateIdentity ();\n            if (gltfNode.matrix !== undefined) {\n                matrix.Set (gltfNode.matrix);\n            } else {\n                let translation = [0.0, 0.0, 0.0];\n                let rotation = [0.0, 0.0, 0.0, 1.0];\n                let scale = [1.0, 1.0, 1.0];\n                if (gltfNode.translation !== undefined) {\n                    translation = gltfNode.translation;\n                }\n                if (gltfNode.rotation !== undefined) {\n                    rotation = gltfNode.rotation;\n                }\n                if (gltfNode.scale !== undefined) {\n                    scale = gltfNode.scale;\n                }\n                matrix.ComposeTRS (\n                    ArrayToCoord3D (translation),\n                    ArrayToQuaternion (rotation),\n                    ArrayToCoord3D (scale)\n                );\n            }\n            return new Transformation (matrix);\n        }\n\n        if (gltfNode.children === undefined && gltfNode.mesh === undefined) {\n            return;\n        }\n\n        let node = new Node ();\n        if (gltfNode.name !== undefined) {\n            node.SetName (gltfNode.name);\n        }\n        node.SetTransformation (GetNodeTransformation (gltfNode));\n        parentNode.AddChildNode (node);\n\n        if (gltfNode.children !== undefined) {\n            for (let childIndex of gltfNode.children) {\n                let childGltfNode = gltf.nodes[childIndex];\n                this.ImportNode (gltf, childGltfNode, node);\n            }\n        }\n\n        if (gltfNode.mesh !== undefined) {\n            if (gltfNode.children === undefined || gltfNode.children.length === 0) {\n                node.SetType (NodeType.MeshNode);\n            }\n            node.AddMeshIndex (gltfNode.mesh);\n        }\n    }\n\n    GetReaderFromBufferView (bufferView)\n    {\n        let bufferIndex = bufferView.buffer || 0;\n        let buffer = this.bufferContents[bufferIndex];\n        if (buffer === undefined || buffer === null) {\n            return null;\n        }\n\n        let reader = new GltfBufferReader (buffer);\n        reader.SkipBytes (bufferView.byteOffset || 0);\n        let byteStride = bufferView.byteStride;\n        if (byteStride !== undefined && byteStride !== 0) {\n            reader.SetByteStride (byteStride);\n        }\n\n        return reader;\n    }\n\n    GetReaderFromAccessor (gltf, accessor)\n    {\n        let bufferViewIndex = accessor.bufferView || 0;\n        let bufferView = gltf.bufferViews[bufferViewIndex];\n        let reader = this.GetReaderFromBufferView (bufferView);\n        if (reader === null) {\n            return null;\n        }\n\n        reader.SetComponentType (accessor.componentType);\n        reader.SetDataType (accessor.type);\n        reader.SetDataCount (accessor.count);\n        reader.SkipBytes (accessor.byteOffset || 0);\n\n        if (accessor.sparse !== undefined) {\n            let indexReader = this.GetReaderFromSparseAccessor (gltf, accessor.sparse.indices, accessor.sparse.indices.componentType, 'SCALAR', accessor.sparse.count);\n            let valueReader = this.GetReaderFromSparseAccessor (gltf, accessor.sparse.values, accessor.componentType, accessor.type, accessor.sparse.count);\n            if (indexReader !== null && valueReader !== null) {\n                reader.SetSparseReader (indexReader, valueReader);\n            }\n        }\n        return reader;\n    }\n\n    GetReaderFromSparseAccessor (gltf, sparseAccessor, componentType, type, count)\n    {\n        if (sparseAccessor.bufferView === undefined) {\n            return null;\n        }\n\n        let bufferView = gltf.bufferViews[sparseAccessor.bufferView];\n        let reader = this.GetReaderFromBufferView (bufferView);\n        if (reader === null) {\n            return null;\n        }\n\n        reader.SetComponentType (componentType);\n        reader.SetDataType (type);\n        reader.SetDataCount (count);\n        reader.SkipBytes (sparseAccessor.byteOffset || 0);\n        return reader;\n    }\n}\n", "import { Coord3D } from '../geometry/coord3d.js';\nimport { Direction } from '../geometry/geometry.js';\nimport { Matrix } from '../geometry/matrix.js';\nimport { Transformation } from '../geometry/transformation.js';\nimport { LoadExternalLibrary } from '../io/externallibs.js';\nimport { ColorFromFloatComponents, IntegerToHexString } from '../model/color.js';\nimport { PhongMaterial } from '../model/material.js';\nimport { Mesh } from '../model/mesh.js';\nimport { Property, PropertyGroup, PropertyType } from '../model/property.js';\nimport { Triangle } from '../model/triangle.js';\nimport { ImporterBase } from './importerbase.js';\nimport { UpdateMaterialTransparency } from './importerutils.js';\n\nexport class ImporterIfc extends ImporterBase\n{\n    constructor ()\n    {\n        super ();\n        this.ifc = null;\n    }\n\n    CanImportExtension (extension)\n    {\n        return extension === 'ifc';\n    }\n\n    GetUpDirection ()\n    {\n        return Direction.Y;\n    }\n\n\tClearContent ()\n\t{\n        this.materialNameToIndex = null;\n        this.expressIDToMesh = null;\n\t}\n\n    ResetContent ()\n    {\n        this.materialNameToIndex = new Map ();\n        this.expressIDToMesh = new Map ();\n    }\n\n    ImportContent (fileContent, onFinish)\n    {\n\t\tif (this.ifc === null) {\n\t\t\tLoadExternalLibrary ('loaders/web-ifc-api-browser.js').then (() => {\n                this.ifc = new WebIFC.IfcAPI ();\n                this.ifc.Init ().then (() => {\n                    this.ImportIfcContent (fileContent);\n                    onFinish ();\n                });\n            }).catch (() => {\n                onFinish ();\n            });\n\t\t} else {\n\t\t\tthis.ImportIfcContent (fileContent);\n\t\t\tonFinish ();\n\t\t}\n    }\n\n\tImportIfcContent (fileContent)\n\t{\n        const fileBuffer = new Uint8Array (fileContent);\n\t\tconst modelID = this.ifc.OpenModel (fileBuffer, {\n            COORDINATE_TO_ORIGIN : true\n        });\n        const ifcMeshes = this.ifc.LoadAllGeometry (modelID);\n        for (let meshIndex = 0; meshIndex < ifcMeshes.size (); meshIndex++) {\n            const ifcMesh = ifcMeshes.get (meshIndex);\n            if (ifcMesh.geometries.size () > 0) {\n                this.ImportIfcMesh (modelID, ifcMesh);\n            }\n        }\n        this.ImportProperties (modelID);\n        this.ifc.CloseModel (modelID);\n\t}\n\n    ImportIfcMesh (modelID, ifcMesh)\n    {\n        let mesh = new Mesh ();\n        mesh.SetName ('Mesh ' + ifcMesh.expressID.toString ());\n\n        let vertexOffset = 0;\n        const ifcGeometries = ifcMesh.geometries;\n        for (let geometryIndex = 0; geometryIndex < ifcGeometries.size (); geometryIndex++) {\n            const ifcGeometry = ifcGeometries.get (geometryIndex);\n            const ifcGeometryData = this.ifc.GetGeometry (modelID, ifcGeometry.geometryExpressID);\n            const ifcVertices = this.ifc.GetVertexArray (ifcGeometryData.GetVertexData (), ifcGeometryData.GetVertexDataSize ());\n            const ifcIndices = this.ifc.GetIndexArray (ifcGeometryData.GetIndexData (), ifcGeometryData.GetIndexDataSize ());\n            const materialIndex = this.GetMaterialIndexByColor (ifcGeometry.color);\n            const matrix = new Matrix (ifcGeometry.flatTransformation);\n            const transformation = new Transformation (matrix);\n\n            for (let i = 0; i < ifcVertices.length; i += 6) {\n                const x = ifcVertices[i];\n                const y = ifcVertices[i + 1];\n                const z = ifcVertices[i + 2];\n                const coord = new Coord3D (x, y, z);\n                const transformed = transformation.TransformCoord3D (coord);\n                mesh.AddVertex (transformed);\n            }\n            // TODO: normals\n            for (let i = 0; i < ifcIndices.length; i += 3) {\n                const v0 = ifcIndices[i];\n                const v1 = ifcIndices[i + 1];\n                const v2 = ifcIndices[i + 2];\n                const triangle = new Triangle (\n                    vertexOffset + v0,\n                    vertexOffset + v1,\n                    vertexOffset + v2\n                );\n                triangle.SetMaterial (materialIndex);\n                mesh.AddTriangle (triangle);\n            }\n            vertexOffset += ifcVertices.length / 6;\n        }\n\n        this.expressIDToMesh.set (ifcMesh.expressID, mesh);\n        this.model.AddMeshToRootNode (mesh);\n    }\n\n    ImportProperties (modelID)\n    {\n        const lines = this.ifc.GetLineIDsWithType (modelID, WebIFC.IFCRELDEFINESBYPROPERTIES);\n        for (let i = 0; i < lines.size (); i++) {\n            const relID = lines.get (i);\n            const rel = this.ifc.GetLine (modelID, relID);\n            if (Array.isArray (rel.RelatingPropertyDefinition)) {\n                continue;\n            }\n            rel.RelatedObjects.forEach ((objectRelID) => {\n                let element = null;\n                if (this.expressIDToMesh.has (objectRelID.value)) {\n                    element = this.expressIDToMesh.get (objectRelID.value);\n                } else {\n                    let propSetOwner = this.ifc.GetLine (modelID, objectRelID.value, true);\n                    if (propSetOwner.type === WebIFC.IFCBUILDING) {\n                        element = this.model;\n                    }\n                }\n                if (element === null) {\n                    return;\n                }\n                let propSetDef = rel.RelatingPropertyDefinition;\n                let propSet = this.ifc.GetLine (modelID, propSetDef.value, true);\n                if (!propSet || !propSet.HasProperties) {\n                    return;\n                }\n                let propertyGroup = new PropertyGroup (propSet.Name.value);\n                propSet.HasProperties.forEach ((property) => {\n                    if (!property || !property.Name || !property.NominalValue) {\n                        return;\n                    }\n                    let elemProperty = null;\n                    let propertyName = this.GetIFCString (property.Name.value);\n                    let strValue = null;\n                    switch (property.NominalValue.label) {\n                        case 'IFCTEXT':\n                        case 'IFCLABEL':\n                        case 'IFCIDENTIFIER':\n                            elemProperty = new Property (PropertyType.Text, propertyName, this.GetIFCString (property.NominalValue.value));\n                            break;\n                        case 'IFCBOOLEAN':\n                        case 'IFCLOGICAL':\n                            strValue = 'Unknown';\n                            if (property.NominalValue.value === 'T') {\n                                strValue = 'True';\n                            } else if (property.NominalValue.value === 'F') {\n                                strValue = 'False';\n                            }\n                            elemProperty = new Property (PropertyType.Text, propertyName, strValue);\n                            break;\n                        case 'IFCINTEGER':\n                        case 'IFCCOUNTMEASURE':\n                            elemProperty = new Property (PropertyType.Integer, propertyName, property.NominalValue.value);\n                            break;\n                        case 'IFCREAL':\n                        case 'IFCLENGTHMEASURE':\n                        case 'IFCPOSITIVELENGTHMEASURE':\n                        case 'IFCAREAMEASURE':\n                        case 'IFCVOLUMEMEASURE':\n                        case 'IFCRATIOMEASURE':\n                        case 'IFCPOSITIVERATIOMEASURE':\n                        case 'IFCMASSMEASURE':\n                        case 'IFCMASSPERLENGTHMEASURE':\n                        case 'IFCPLANEANGLEMEASURE':\n                        case 'IFCTHERMALTRANSMITTANCEMEASURE':\n                            elemProperty = new Property (PropertyType.Number, propertyName, property.NominalValue.value);\n                            break;\n                        default:\n                            // TODO\n                            console.log (property.NominalValue.label);\n                            console.log (property.NominalValue.value);\n                            break;\n                    }\n                    if (elemProperty !== null) {\n                        propertyGroup.AddProperty (elemProperty);\n                    }\n                });\n                if (propertyGroup.PropertyCount () > 0) {\n                    element.AddPropertyGroup (propertyGroup);\n                }\n            });\n        }\n    }\n\n    GetMaterialIndexByColor (ifcColor)\n    {\n        const color = ColorFromFloatComponents (ifcColor.x, ifcColor.y, ifcColor.z);\n\n        const materialName = 'Color ' +\n            IntegerToHexString (color.r) +\n            IntegerToHexString (color.g) +\n            IntegerToHexString (color.b) +\n            IntegerToHexString (parseInt (ifcColor.w * 255.0, 10));\n\n        if (this.materialNameToIndex.has (materialName)) {\n            return this.materialNameToIndex.get (materialName);\n        } else {\n\t\t\tlet material = new PhongMaterial ();\n            material.name = materialName;\n\t\t\tmaterial.color = color;\n            material.opacity = ifcColor.w;\n            UpdateMaterialTransparency (material);\n            let materialIndex = this.model.AddMaterial (material);\n            this.materialNameToIndex.set (materialName, materialIndex);\n            return materialIndex;\n        }\n    }\n\n    GetIFCString (ifcString)\n    {\n        let decoded = this.DecodeIFCString (ifcString);\n        if (decoded.length === 0) {\n            decoded = '-';\n        }\n        return decoded;\n    }\n\n    DecodeIFCString (ifcString)\n    {\n        // TODO: https://github.com/tomvandig/web-ifc/issues/58\n        const ifcUnicodeRegEx = /\\\\X2\\\\(.*?)\\\\X0\\\\/uig;\n        let resultString = ifcString;\n        let match = ifcUnicodeRegEx.exec (ifcString);\n        while (match) {\n            const unicodeChar = String.fromCharCode (parseInt (match[1], 16));\n            resultString = resultString.replace (match[0], unicodeChar);\n            match = ifcUnicodeRegEx.exec (ifcString);\n        }\n        return resultString;\n    }\n}\n", "import { Coord2D } from '../geometry/coord2d.js';\nimport { Coord3D } from '../geometry/coord3d.js';\nimport { IsZero } from '../geometry/geometry.js';\nimport { Mesh } from './mesh.js';\nimport { Triangle } from './triangle.js';\n\nexport class GeneratorParams\n{\n    constructor ()\n    {\n        this.name = null;\n        this.material = null;\n    }\n\n    SetName (name)\n    {\n        this.name = name;\n        return this;\n    }\n\n    SetMaterial (material)\n    {\n        this.material = material;\n        return this;\n    }\n}\n\nexport class Generator\n{\n    constructor (params)\n    {\n        this.params = params || new GeneratorParams ();\n        this.mesh = new Mesh ();\n        if (this.params.name !== null) {\n            this.mesh.SetName (this.params.name);\n        }\n        this.curve = null;\n    }\n\n    GetMesh ()\n    {\n        return this.mesh;\n    }\n\n    AddVertex (x, y, z)\n    {\n        let coord = new Coord3D (x, y, z);\n        return this.mesh.AddVertex (coord);\n    }\n\n    AddVertices (vertices)\n    {\n        let indices = [];\n        for (let i = 0; i < vertices.length; i++) {\n            let vertex = vertices[i];\n            indices.push (this.AddVertex (vertex.x, vertex.y, vertex.z));\n        }\n        return indices;\n    }\n\n    SetCurve (curve)\n    {\n        this.curve = curve;\n    }\n\n    ResetCurve ()\n    {\n        this.curve = null;\n    }\n\n    AddTriangle (v0, v1, v2)\n    {\n        let triangle = new Triangle (v0, v1, v2);\n        if (this.params.material !== null) {\n            triangle.mat = this.params.material;\n        }\n        if (this.curve !== null) {\n            triangle.SetCurve (this.curve);\n        }\n        return this.mesh.AddTriangle (triangle);\n    }\n\n    AddTriangleInverted (v0, v1, v2)\n    {\n        this.AddTriangle (v0, v2, v1);\n    }\n\n    AddConvexPolygon (vertices)\n    {\n        for (let vertexIndex = 0; vertexIndex < vertices.length - 2; vertexIndex++) {\n            this.AddTriangle (\n                vertices[0],\n                vertices[vertexIndex + 1],\n                vertices[vertexIndex + 2]\n            );\n        }\n    }\n\n    AddConvexPolygonInverted (vertices)\n    {\n        for (let vertexIndex = 0; vertexIndex < vertices.length - 2; vertexIndex++) {\n            this.AddTriangleInverted (\n                vertices[0],\n                vertices[vertexIndex + 1],\n                vertices[vertexIndex + 2]\n            );\n        }\n    }\n}\n\nexport class GeneratorHelper\n{\n    constructor (generator)\n    {\n        this.generator = generator;\n    }\n\n    GenerateExtrude (vertices, height, curve)\n    {\n        let topPolygon = [];\n        let bottomPolygon = [];\n        for (let i = 0; i < vertices.length; i++) {\n            const vertex = vertices[i];\n            bottomPolygon.push (this.generator.AddVertex (vertex.x, vertex.y, 0.0));\n            topPolygon.push (this.generator.AddVertex (vertex.x, vertex.y, height));\n        }\n        this.generator.SetCurve (curve);\n        this.GenerateSurfaceBetweenPolygons (bottomPolygon, topPolygon);\n        this.generator.ResetCurve ();\n        this.generator.AddConvexPolygonInverted (bottomPolygon);\n        this.generator.AddConvexPolygon (topPolygon);\n    }\n\n    GenerateSurfaceBetweenPolygons (startIndices, endIndices)\n    {\n        if (startIndices.length !== endIndices.length) {\n            return;\n        }\n        const vertexCount = startIndices.length;\n        for (let i = 0; i < vertexCount; i++) {\n            const index = i;\n            const nextIndex = (i < vertexCount - 1) ? index + 1 : 0;\n            this.generator.AddConvexPolygon ([\n                startIndices[index],\n                startIndices[nextIndex],\n                endIndices[nextIndex],\n                endIndices[index]\n            ]);\n        }\n    }\n\n    GenerateTriangleFan (startIndices, endIndex)\n    {\n        const vertexCount = startIndices.length;\n        for (let i = 0; i < vertexCount; i++) {\n            const index = i;\n            const nextIndex = (i < vertexCount - 1) ? index + 1 : 0;\n            this.generator.AddTriangle (\n                endIndex,\n                startIndices[index],\n                startIndices[nextIndex]\n            );\n        }\n    }\n}\n\nexport function GenerateCuboid (genParams, xSize, ySize, zSize)\n{\n    let generator = new Generator (genParams);\n    let vertices = [\n        new Coord2D (0.0, 0.0),\n        new Coord2D (xSize, 0.0),\n        new Coord2D (xSize, ySize),\n        new Coord2D (0.0, ySize),\n    ];\n    let helper = new GeneratorHelper (generator);\n    helper.GenerateExtrude (vertices, zSize, null);\n    return generator.GetMesh ();\n}\n\nexport function GenerateCylinder (genParams, radius, height, segments, smooth)\n{\n    function GetCylindricalCoord (radius, angle)\n    {\n        return new Coord2D (\n            radius * Math.cos (angle),\n            radius * Math.sin (angle)\n        );\n    }\n\n    if (segments < 3) {\n        return null;\n    }\n\n    let generator = new Generator (genParams);\n    let baseVertices = [];\n\tconst step = 2.0 * Math.PI / segments;\n\tfor (let i = 0; i < segments; i++) {\n        let cylindrical = GetCylindricalCoord (radius, i * step);\n\t\tbaseVertices.push (cylindrical);\n\t}\n    let helper = new GeneratorHelper (generator);\n    helper.GenerateExtrude (baseVertices, height, smooth ? 1 : null);\n    return generator.GetMesh ();\n}\n\nexport function GenerateSphere (genParams, radius, segments, smooth)\n{\n    function GetSphericalCoord (radius, theta, phi)\n    {\n        return new Coord3D (\n            radius * Math.sin (theta) * Math.cos (phi),\n            radius * Math.sin (theta) * Math.sin (phi),\n            radius * Math.cos (theta)\n        );\n    }\n\n    if (segments < 3) {\n        return null;\n    }\n\n    let generator = new Generator (genParams);\n    let helper = new GeneratorHelper (generator);\n\n    generator.SetCurve (smooth ? 1 : null);\n\n    let allLevelVertices = [];\n    let levels = segments + 1;\n    const levelStep = Math.PI / segments;\n\tconst cylindricalStep = 2.0 * Math.PI / segments;\n    for (let levelIndex = 1; levelIndex < levels - 1; levelIndex++) {\n        let levelVertices = [];\n        let theta = levelIndex * levelStep;\n        for (let cylindricalIndex = 0; cylindricalIndex < segments; cylindricalIndex++) {\n            let phi = cylindricalIndex * cylindricalStep;\n            let vertex = GetSphericalCoord (radius, theta, -phi);\n            levelVertices.push (generator.AddVertex (vertex.x, vertex.y, vertex.z));\n        }\n        if (levelIndex > 1) {\n            helper.GenerateSurfaceBetweenPolygons (allLevelVertices[allLevelVertices.length - 1], levelVertices);\n        }\n        allLevelVertices.push (levelVertices);\n    }\n\n    let topVertex = generator.AddVertex (0.0, 0.0, radius);\n    let bottomVertex = generator.AddVertex (0.0, 0.0, -radius);\n    helper.GenerateTriangleFan (allLevelVertices[0].slice ().reverse (), topVertex);\n    helper.GenerateTriangleFan (allLevelVertices[allLevelVertices.length - 1], bottomVertex);\n\n    generator.ResetCurve ();\n\n    return generator.GetMesh ();\n}\n\nexport function GeneratePlatonicSolid (genParams, type, radius)\n{\n    function AddVertex (generator, radius, x, y, z)\n    {\n        let vertex = new Coord3D (x, y, z);\n        vertex.MultiplyScalar (radius / vertex.Length ());\n        generator.AddVertex (vertex.x, vertex.y, vertex.z);\n    }\n\n    if (IsZero (radius)) {\n        return null;\n    }\n\n    let generator = new Generator (genParams);\n    if (type === 'tetrahedron') {\n        let a = 1.0;\n        AddVertex (generator, radius, +a, +a, +a);\n        AddVertex (generator, radius, -a, -a, +a);\n        AddVertex (generator, radius, -a, +a, -a);\n        AddVertex (generator, radius, +a, -a, -a);\n        generator.AddTriangle (0, 1, 3);\n        generator.AddTriangle (0, 2, 1);\n        generator.AddTriangle (0, 3, 2);\n        generator.AddTriangle (1, 2, 3);\n    } else if (type === 'hexahedron') {\n        let a = 1.0;\n        AddVertex (generator, radius, +a, +a, +a);\n        AddVertex (generator, radius, +a, +a, -a);\n        AddVertex (generator, radius, +a, -a, +a);\n        AddVertex (generator, radius, +a, -a, -a);\n        AddVertex (generator, radius, -a, +a, +a);\n        AddVertex (generator, radius, -a, +a, -a);\n        AddVertex (generator, radius, -a, -a, +a);\n        AddVertex (generator, radius, -a, -a, -a);\n        generator.AddConvexPolygon ([0, 1, 5, 4]);\n        generator.AddConvexPolygon ([0, 2, 3, 1]);\n        generator.AddConvexPolygon ([0, 4, 6, 2]);\n        generator.AddConvexPolygon ([1, 3, 7, 5]);\n        generator.AddConvexPolygon ([2, 6, 7, 3]);\n        generator.AddConvexPolygon ([4, 5, 7, 6]);\n    } else if (type === 'octahedron') {\n        let a = 1.0;\n        let b = 0.0;\n        AddVertex (generator, radius, +a, +b, +b);\n        AddVertex (generator, radius, -a, +b, +b);\n        AddVertex (generator, radius, +b, +a, +b);\n        AddVertex (generator, radius, +b, -a, +b);\n        AddVertex (generator, radius, +b, +b, +a);\n        AddVertex (generator, radius, +b, +b, -a);\n        generator.AddTriangle (0, 2, 4);\n        generator.AddTriangle (0, 3, 5);\n        generator.AddTriangle (0, 4, 3);\n        generator.AddTriangle (0, 5, 2);\n        generator.AddTriangle (1, 2, 5);\n        generator.AddTriangle (1, 3, 4);\n        generator.AddTriangle (1, 4, 2);\n        generator.AddTriangle (1, 5, 3);\n    } else if (type === 'dodecahedron') {\n        let a = 1.0;\n        let b = 0.0;\n        let c = (1.0 + Math.sqrt (5.0)) / 2.0;\n        let d = 1.0 / c;\n        AddVertex (generator, radius, +a, +a, +a);\n        AddVertex (generator, radius, +a, +a, -a);\n        AddVertex (generator, radius, +a, -a, +a);\n        AddVertex (generator, radius, -a, +a, +a);\n        AddVertex (generator, radius, +a, -a, -a);\n        AddVertex (generator, radius, -a, +a, -a);\n        AddVertex (generator, radius, -a, -a, +a);\n        AddVertex (generator, radius, -a, -a, -a);\n        AddVertex (generator, radius, +b, +d, +c);\n        AddVertex (generator, radius, +b, +d, -c);\n        AddVertex (generator, radius, +b, -d, +c);\n        AddVertex (generator, radius, +b, -d, -c);\n        AddVertex (generator, radius, +d, +c, +b);\n        AddVertex (generator, radius, +d, -c, +b);\n        AddVertex (generator, radius, -d, +c, +b);\n        AddVertex (generator, radius, -d, -c, +b);\n        AddVertex (generator, radius, +c, +b, +d);\n        AddVertex (generator, radius, -c, +b, +d);\n        AddVertex (generator, radius, +c, +b, -d);\n        AddVertex (generator, radius, -c, +b, -d);\n        generator.AddConvexPolygon ([0, 8, 10, 2, 16]);\n        generator.AddConvexPolygon ([0, 16, 18, 1, 12]);\n        generator.AddConvexPolygon ([0, 12, 14, 3, 8]);\n        generator.AddConvexPolygon ([1, 9, 5, 14, 12]);\n        generator.AddConvexPolygon ([1, 18, 4, 11, 9]);\n        generator.AddConvexPolygon ([2, 10, 6, 15, 13]);\n        generator.AddConvexPolygon ([2, 13, 4, 18, 16]);\n        generator.AddConvexPolygon ([3, 14, 5, 19, 17]);\n        generator.AddConvexPolygon ([3, 17, 6, 10, 8]);\n        generator.AddConvexPolygon ([4, 13, 15, 7, 11]);\n        generator.AddConvexPolygon ([5, 9, 11, 7, 19]);\n        generator.AddConvexPolygon ([6, 17, 19, 7, 15]);\n    } else if (type === 'icosahedron') {\n        let a = 1.0;\n        let b = 0.0;\n        let c = (1.0 + Math.sqrt (5.0)) / 2.0;\n        AddVertex (generator, radius, +b, +a, +c);\n        AddVertex (generator, radius, +b, +a, -c);\n        AddVertex (generator, radius, +b, -a, +c);\n        AddVertex (generator, radius, +b, -a, -c);\n        AddVertex (generator, radius, +a, +c, +b);\n        AddVertex (generator, radius, +a, -c, +b);\n        AddVertex (generator, radius, -a, +c, +b);\n        AddVertex (generator, radius, -a, -c, +b);\n        AddVertex (generator, radius, +c, +b, +a);\n        AddVertex (generator, radius, +c, +b, -a);\n        AddVertex (generator, radius, -c, +b, +a);\n        AddVertex (generator, radius, -c, +b, -a);\n        generator.AddTriangle (0, 2, 8);\n        generator.AddTriangle (0, 4, 6);\n        generator.AddTriangle (0, 6, 10);\n        generator.AddTriangle (0, 8, 4);\n        generator.AddTriangle (0, 10, 2);\n        generator.AddTriangle (1, 3, 11);\n        generator.AddTriangle (1, 4, 9);\n        generator.AddTriangle (1, 6, 4);\n        generator.AddTriangle (1, 9, 3);\n        generator.AddTriangle (1, 11, 6);\n        generator.AddTriangle (2, 5, 8);\n        generator.AddTriangle (2, 7, 5);\n        generator.AddTriangle (2, 10, 7);\n        generator.AddTriangle (3, 5, 7);\n        generator.AddTriangle (3, 7, 11);\n        generator.AddTriangle (3, 9, 5);\n        generator.AddTriangle (4, 8, 9);\n        generator.AddTriangle (5, 9, 8);\n        generator.AddTriangle (6, 11, 10);\n        generator.AddTriangle (7, 10, 11);\n    }\n    return generator.GetMesh ();\n}\n", "import { ValueOrDefault } from '../core/core.js';\nimport { ArrayToCoord3D, Coord3D } from '../geometry/coord3d.js';\nimport { Direction } from '../geometry/geometry.js';\nimport { Matrix } from '../geometry/matrix.js';\nimport { ArrayToQuaternion, Quaternion } from '../geometry/quaternion.js';\nimport { Transformation } from '../geometry/transformation.js';\nimport { ArrayBufferToUtf8String } from '../io/bufferutils.js';\nimport { ArrayToColor } from '../model/color.js';\nimport { GenerateCuboid, GenerateCylinder, GeneratePlatonicSolid, GenerateSphere, GeneratorParams } from '../model/generator.js';\nimport { PhysicalMaterial } from '../model/material.js';\nimport { Node, NodeType } from '../model/node.js';\nimport { Property, PropertyGroup, PropertyType } from '../model/property.js';\nimport { ImporterBase } from './importerbase.js';\n\nexport class ImporterO3dv extends ImporterBase\n{\n    constructor ()\n    {\n        super ();\n    }\n\n    CanImportExtension (extension)\n    {\n        return extension === 'o3dv';\n    }\n\n    GetUpDirection ()\n    {\n        return Direction.Z;\n    }\n\n    ClearContent ()\n    {\n\n    }\n\n    ResetContent ()\n    {\n\n    }\n\n    ImportContent (fileContent, onFinish)\n    {\n        let textContent = ArrayBufferToUtf8String (fileContent);\n        let content = JSON.parse (textContent);\n        if (content.root === undefined) {\n            onFinish ();\n            return;\n        }\n\n        if (content.materials !== undefined) {\n            for (let i = 0; i < content.materials.length; i++) {\n                const materialContent = content.materials[i];\n                this.ImportMaterial (materialContent);\n            }\n        }\n        if (content.meshes !== undefined) {\n            for (let i = 0; i < content.meshes.length; i++) {\n                const meshContent = content.meshes[i];\n                this.ImportMesh (meshContent);\n            }\n        }\n\n        let rootNode = content.nodes[content.root];\n        this.ImportNode (content, rootNode, this.model.GetRootNode ());\n        this.ImportProperties (this.model, content);\n\n        onFinish ();\n    }\n\n    ImportMaterial (materialContent)\n    {\n        let material = new PhysicalMaterial ();\n        material.color.Set (255, 255, 255);\n        if (materialContent.name !== undefined) {\n            material.name = materialContent.name;\n        }\n        if (materialContent.color !== undefined) {\n            material.color = ArrayToColor (materialContent.color);\n        }\n        material.metalness = ValueOrDefault (materialContent.metalness, 0.0);\n        material.roughness = ValueOrDefault (materialContent.roughness, 1.0);\n        this.model.AddMaterial (material);\n    }\n\n    ImportMesh (meshContent)\n    {\n        let genParams = new GeneratorParams ();\n        if (meshContent.name !== undefined) {\n            genParams.SetName (meshContent.name);\n        }\n        if (meshContent.material !== undefined) {\n            genParams.SetMaterial (meshContent.material);\n        }\n\n        let parameters = meshContent.parameters;\n        if (parameters === undefined) {\n            return;\n        }\n\n        let mesh = null;\n        if (meshContent.type === 'cuboid') {\n            if (parameters.size_x === undefined || parameters.size_y === undefined || parameters.size_z === undefined) {\n                return;\n            }\n            mesh = GenerateCuboid (genParams, parameters.size_x, parameters.size_y, parameters.size_z);\n        } else if (meshContent.type === 'cylinder') {\n            if (parameters.radius === undefined || parameters.height === undefined) {\n                return;\n            }\n            let segments = ValueOrDefault (parameters.segments, 25);\n            let smooth = ValueOrDefault (parameters.smooth, true);\n            mesh = GenerateCylinder (genParams, parameters.radius, parameters.height, segments, smooth);\n        } else if (meshContent.type === 'sphere') {\n            if (parameters.radius === undefined) {\n                return;\n            }\n            let segments = ValueOrDefault (parameters.segments, 20);\n            let smooth = ValueOrDefault (parameters.smooth, true);\n            mesh = GenerateSphere (genParams, parameters.radius, segments, smooth);\n        } else if (meshContent.type === 'platonic') {\n            if (parameters.solid_type === undefined) {\n                return;\n            }\n            let radius = ValueOrDefault (parameters.radius, 1.0);\n            mesh = GeneratePlatonicSolid (genParams, parameters.solid_type, radius);\n        }\n        if (mesh !== null) {\n            this.ImportProperties (mesh, meshContent);\n            this.model.AddMesh (mesh);\n        }\n    }\n\n    ImportNode (content, nodeContent, node)\n    {\n        if (nodeContent.name !== undefined) {\n            node.SetName (nodeContent.name);\n        }\n        if (nodeContent.transformation !== undefined) {\n            const nodeTransformation = this.GetTransformation (nodeContent.transformation);\n            node.SetTransformation (nodeTransformation);\n        }\n        if (nodeContent.children !== undefined) {\n            for (const childIndex of nodeContent.children) {\n                let childContent = content.nodes[childIndex];\n                let childNode = new Node ();\n                node.AddChildNode (childNode);\n                this.ImportNode (content, childContent, childNode);\n            }\n        }\n        if (nodeContent.mesh !== undefined) {\n            if (nodeContent.children === undefined || nodeContent.children.length === 0) {\n                node.SetType (NodeType.MeshNode);\n            }\n            node.AddMeshIndex (nodeContent.mesh);\n        }\n    }\n\n    ImportProperties (element, nodeContent)\n    {\n        if (nodeContent.properties !== undefined) {\n            const propertyGroup = new PropertyGroup ('Properties');\n            element.AddPropertyGroup (propertyGroup);\n            for (const nodeProperty of nodeContent.properties) {\n                const property = new Property (PropertyType.Text, nodeProperty.name, nodeProperty.value);\n                propertyGroup.AddProperty (property);\n            }\n        }\n    }\n\n    GetTransformation (contentTransformation)\n    {\n        let translation = new Coord3D (0.0, 0.0, 0.0);\n        let rotation = new Quaternion (0.0, 0.0, 0.0, 1.0);\n        let scale = new Coord3D (1.0, 1.0, 1.0);\n        if (contentTransformation.translation !== undefined) {\n            translation = ArrayToCoord3D (contentTransformation.translation);\n        }\n        if (contentTransformation.rotation !== undefined) {\n            rotation = ArrayToQuaternion (contentTransformation.rotation);\n        }\n        if (contentTransformation.scale !== undefined) {\n            scale = ArrayToCoord3D (contentTransformation.scale);\n        }\n        const matrix = new Matrix ().ComposeTRS (translation, rotation, scale);\n        return new Transformation (matrix);\n    }\n}\n", "import { VertexColors } from 'three';\nimport { Coord2D } from '../geometry/coord2d.js';\nimport { Coord3D } from '../geometry/coord3d.js';\nimport { Direction } from '../geometry/geometry.js';\nimport { ArrayBufferToUtf8String } from '../io/bufferutils.js';\nimport { Color, ColorFromFloatComponents } from '../model/color.js';\nimport { PhongMaterial, TextureMap } from '../model/material.js';\nimport { Mesh } from '../model/mesh.js';\nimport { Triangle } from '../model/triangle.js';\nimport { ImporterBase } from './importerbase.js';\nimport { NameFromLine, ParametersFromLine, ReadLines, UpdateMaterialTransparency } from './importerutils.js';\n\nclass ObjMeshConverter\n{\n    constructor (mesh)\n    {\n        this.mesh = mesh;\n        this.globalToMeshVertices = new Map ();\n        this.globalToMeshVertexColors = new Map ();\n        this.globalToMeshNormals = new Map ();\n        this.globalToMeshUvs = new Map ();\n    }\n\n    AddVertex (globalIndex, globalVertices)\n    {\n        return this.GetLocalIndex (globalIndex, globalVertices, this.globalToMeshVertices, (val) => {\n            return this.mesh.AddVertex (new Coord3D (val.x, val.y, val.z));\n        });\n    }\n\n    AddVertexColor (globalIndex, globalVertexColors)\n    {\n        return this.GetLocalIndex (globalIndex, globalVertexColors, this.globalToMeshVertexColors, (val) => {\n            return this.mesh.AddVertexColor (new Color (val.r, val.g, val.b));\n        });\n    }\n\n    AddNormal (globalIndex, globalNormals)\n    {\n        return this.GetLocalIndex (globalIndex, globalNormals, this.globalToMeshNormals, (val) => {\n            return this.mesh.AddNormal (new Coord3D (val.x, val.y, val.z));\n        });\n    }\n\n    AddUV (globalIndex, globalUvs)\n    {\n        return this.GetLocalIndex (globalIndex, globalUvs, this.globalToMeshUvs, (val) => {\n            return this.mesh.AddTextureUV (new Coord2D (val.x, val.y));\n        });\n    }\n\n    AddTriangle (triangle)\n    {\n        this.mesh.AddTriangle (triangle);\n    }\n\n    GetLocalIndex (globalIndex, globalValueArray, globalToMeshIndices, valueAdderFunc)\n    {\n        if (isNaN (globalIndex) || globalIndex < 0 || globalIndex >= globalValueArray.length) {\n            return null;\n        }\n        if (globalToMeshIndices.has (globalIndex)) {\n            return globalToMeshIndices.get (globalIndex);\n        } else {\n            let globalValue = globalValueArray[globalIndex];\n            let localIndex = valueAdderFunc (globalValue);\n            globalToMeshIndices.set (globalIndex, localIndex);\n            return localIndex;\n        }\n    }\n}\n\nfunction CreateColor (r, g, b)\n{\n    return ColorFromFloatComponents (\n        parseFloat (r),\n        parseFloat (g),\n        parseFloat (b)\n    );\n}\n\nexport class ImporterObj extends ImporterBase\n{\n    constructor ()\n    {\n        super ();\n    }\n\n    CanImportExtension (extension)\n    {\n        return extension === 'obj';\n    }\n\n    GetUpDirection ()\n    {\n        return Direction.Y;\n    }\n\n    ClearContent ()\n    {\n        this.globalVertices = null;\n        this.globalVertexColors = null;\n        this.globalNormals = null;\n        this.globalUvs = null;\n\n        this.currentMeshConverter = null;\n        this.currentMaterial = null;\n        this.currentMaterialIndex = null;\n\n        this.meshNameToConverter = null;\n        this.materialNameToIndex = null;\n    }\n\n    ResetContent ()\n    {\n        this.globalVertices = [];\n        this.globalVertexColors = [];\n        this.globalNormals = [];\n        this.globalUvs = [];\n\n        this.currentMeshConverter = null;\n        this.currentMaterial = null;\n        this.currentMaterialIndex = null;\n\n        this.meshNameToConverter = new Map ();\n        this.materialNameToIndex = new Map ();\n    }\n\n    ImportContent (fileContent, onFinish)\n    {\n        let textContent = ArrayBufferToUtf8String (fileContent);\n        ReadLines (textContent, (line) => {\n            if (!this.WasError ()) {\n                this.ProcessLine (line);\n            }\n        });\n        onFinish ();\n    }\n\n    ProcessLine (line)\n    {\n        if (line[0] === '#') {\n            return;\n        }\n\n        let parameters = ParametersFromLine (line, '#');\n        if (parameters.length === 0) {\n            return;\n        }\n\n        let keyword = parameters[0].toLowerCase ();\n        parameters.shift ();\n\n        if (this.ProcessMeshParameter (keyword, parameters, line)) {\n            return;\n        }\n\n        if (this.ProcessMaterialParameter (keyword, parameters, line)) {\n            return;\n        }\n    }\n\n    AddNewMesh (name)\n    {\n        if (this.meshNameToConverter.has (name)) {\n            this.currentMeshConverter = this.meshNameToConverter.get (name);\n        } else {\n            let mesh = new Mesh ();\n            mesh.SetName (name);\n            this.model.AddMeshToRootNode (mesh);\n            this.currentMeshConverter = new ObjMeshConverter (mesh);\n            this.meshNameToConverter.set (name, this.currentMeshConverter);\n        }\n    }\n\n    ProcessMeshParameter (keyword, parameters, line)\n    {\n        if (keyword === 'g' || keyword === 'o') {\n            if (parameters.length === 0) {\n                return true;\n            }\n            let name = NameFromLine (line, keyword.length, '#');\n            this.AddNewMesh (name);\n            return true;\n        } else if (keyword === 'v') {\n            if (parameters.length < 3) {\n                return true;\n            }\n            this.globalVertices.push (new Coord3D (\n                parseFloat (parameters[0]),\n                parseFloat (parameters[1]),\n                parseFloat (parameters[2])\n            ));\n            if (parameters.length >= 6) {\n                this.globalVertexColors.push (CreateColor (parameters[3], parameters[4], parameters[5]));\n            }\n            return true;\n        } else if (keyword === 'vn') {\n            if (parameters.length < 3) {\n                return true;\n            }\n            this.globalNormals.push (new Coord3D (\n                parseFloat (parameters[0]),\n                parseFloat (parameters[1]),\n                parseFloat (parameters[2])\n            ));\n            return true;\n        } else if (keyword === 'vt') {\n            if (parameters.length < 2) {\n                return true;\n            }\n            this.globalUvs.push (new Coord2D (\n                parseFloat (parameters[0]),\n                parseFloat (parameters[1])\n            ));\n            return true;\n        } else if (keyword === 'f') {\n            if (parameters.length < 3) {\n                return true;\n            }\n            this.ProcessFace (parameters);\n            return true;\n        }\n\n        return false;\n    }\n\n    ProcessMaterialParameter (keyword, parameters, line)\n    {\n        function CreateTexture (keyword, line, callbacks)\n        {\n            let texture = new TextureMap ();\n            let textureName = NameFromLine (line, keyword.length, '#');\n            let textureBuffer = callbacks.getTextureBuffer (textureName);\n            texture.name = textureName;\n            if (textureBuffer !== null) {\n                texture.url = textureBuffer.url;\n                texture.buffer = textureBuffer.buffer;\n            }\n            return texture;\n        }\n\n        if (keyword === 'newmtl') {\n            if (parameters.length === 0) {\n                return true;\n            }\n\n            let material = new PhongMaterial ();\n            let materialName = NameFromLine (line, keyword.length, '#');\n            let materialIndex = this.model.AddMaterial (material);\n            material.name = materialName;\n            this.currentMaterial = material;\n            this.materialNameToIndex.set (materialName, materialIndex);\n            return true;\n        } else if (keyword === 'usemtl') {\n            if (parameters.length === 0) {\n                return true;\n            }\n\n            let materialName = NameFromLine (line, keyword.length, '#');\n            if (this.materialNameToIndex.has (materialName)) {\n                this.currentMaterialIndex = this.materialNameToIndex.get (materialName);\n            }\n            return true;\n        } else if (keyword === 'mtllib') {\n            if (parameters.length === 0) {\n                return true;\n            }\n            let fileName = NameFromLine (line, keyword.length, '#');\n            let fileBuffer = this.callbacks.getFileBuffer (fileName);\n            if (fileBuffer !== null) {\n                let textContent = ArrayBufferToUtf8String (fileBuffer);\n                ReadLines (textContent, (line) => {\n                    if (!this.WasError ()) {\n                        this.ProcessLine (line);\n                    }\n                });\n            }\n            return true;\n        } else if (keyword === 'map_kd') {\n            if (this.currentMaterial === null || parameters.length === 0) {\n                return true;\n            }\n            this.currentMaterial.diffuseMap = CreateTexture (keyword, line, this.callbacks);\n            UpdateMaterialTransparency (this.currentMaterial);\n            return true;\n        } else if (keyword === 'map_ks') {\n            if (this.currentMaterial === null || parameters.length === 0) {\n                return true;\n            }\n            this.currentMaterial.specularMap = CreateTexture (keyword, line, this.callbacks);\n            return true;\n        } else if (keyword === 'map_bump' || keyword === 'bump') {\n            if (this.currentMaterial === null || parameters.length === 0) {\n                return true;\n            }\n            this.currentMaterial.bumpMap = CreateTexture (keyword, line, this.callbacks);\n            return true;\n        } else if (keyword === 'ka') {\n            if (this.currentMaterial === null || parameters.length < 3) {\n                return true;\n            }\n            this.currentMaterial.ambient = CreateColor (parameters[0], parameters[1], parameters[2]);\n            return true;\n        } else if (keyword === 'kd') {\n            if (this.currentMaterial === null || parameters.length < 3) {\n                return true;\n            }\n            this.currentMaterial.color = CreateColor (parameters[0], parameters[1], parameters[2]);\n            return true;\n        } else if (keyword === 'ks') {\n            if (this.currentMaterial === null || parameters.length < 3) {\n                return true;\n            }\n            this.currentMaterial.specular = CreateColor (parameters[0], parameters[1], parameters[2]);\n            return true;\n        } else if (keyword === 'ns') {\n            if (this.currentMaterial === null || parameters.length < 1) {\n                return true;\n            }\n            this.currentMaterial.shininess = parseFloat (parameters[0]) / 1000.0;\n            return true;\n        } else if (keyword === 'tr') {\n            if (this.currentMaterial === null || parameters.length < 1) {\n                return true;\n            }\n            this.currentMaterial.opacity = 1.0 - parseFloat (parameters[0]);\n            UpdateMaterialTransparency (this.currentMaterial);\n            return true;\n        } else if (keyword === 'd') {\n            if (this.currentMaterial === null || parameters.length < 1) {\n                return true;\n            }\n            this.currentMaterial.opacity = parseFloat (parameters[0]);\n            UpdateMaterialTransparency (this.currentMaterial);\n            return true;\n        }\n\n        return false;\n    }\n\n    ProcessFace (parameters)\n    {\n        function GetRelativeIndex (index, count)\n        {\n            if (index > 0) {\n                return index - 1;\n            } else {\n                return count + index;\n            }\n        }\n\n        let vertices = [];\n        let colors = [];\n        let normals = [];\n        let uvs = [];\n\n        for (let i = 0; i < parameters.length; i++) {\n            let vertexParams = parameters[i].split ('/');\n            vertices.push (GetRelativeIndex (parseInt (vertexParams[0], 10), this.globalVertices.length));\n            if (this.globalVertices.length === this.globalVertexColors.length) {\n                colors.push (GetRelativeIndex (parseInt (vertexParams[0], 10), this.globalVertices.length));\n            }\n            if (vertexParams.length > 1 && vertexParams[1].length > 0) {\n                uvs.push (GetRelativeIndex (parseInt (vertexParams[1], 10), this.globalUvs.length));\n            }\n            if (vertexParams.length > 2 && vertexParams[2].length > 0) {\n                normals.push (GetRelativeIndex (parseInt (vertexParams[2], 10), this.globalNormals.length));\n            }\n        }\n\n        if (this.currentMeshConverter === null) {\n            this.AddNewMesh ('');\n        }\n\n        for (let i = 0; i < vertices.length - 2; i++) {\n            let v0 = this.currentMeshConverter.AddVertex (vertices[0], this.globalVertices);\n            let v1 = this.currentMeshConverter.AddVertex (vertices[i + 1], this.globalVertices);\n            let v2 = this.currentMeshConverter.AddVertex (vertices[i + 2], this.globalVertices);\n            if (v0 === null || v1 === null || v2 === null) {\n                this.SetError ('Invalid vertex index.');\n                break;\n            }\n\n            let triangle = new Triangle (v0, v1, v2);\n\n            if (colors.length === vertices.length) {\n                let c0 = this.currentMeshConverter.AddVertexColor (colors[0], this.globalVertexColors);\n                let c1 = this.currentMeshConverter.AddVertexColor (colors[i + 1], this.globalVertexColors);\n                let c2 = this.currentMeshConverter.AddVertexColor (colors[i + 2], this.globalVertexColors);\n                if (c0 === null || c1 === null || c2 === null) {\n                    this.SetError ('Invalid vertex color index.');\n                    break;\n                }\n                triangle.SetVertexColors (c0, c1, c2);\n            }\n\n            if (normals.length === vertices.length) {\n                let n0 = this.currentMeshConverter.AddNormal (normals[0], this.globalNormals);\n                let n1 = this.currentMeshConverter.AddNormal (normals[i + 1], this.globalNormals);\n                let n2 = this.currentMeshConverter.AddNormal (normals[i + 2], this.globalNormals);\n                if (n0 === null || n1 === null || n2 === null) {\n                    this.SetError ('Invalid normal index.');\n                    break;\n                }\n                triangle.SetNormals (n0, n1, n2);\n            }\n\n            if (uvs.length === vertices.length) {\n                let u0 = this.currentMeshConverter.AddUV (uvs[0], this.globalUvs);\n                let u1 = this.currentMeshConverter.AddUV (uvs[i + 1], this.globalUvs);\n                let u2 = this.currentMeshConverter.AddUV (uvs[i + 2], this.globalUvs);\n                if (u0 === null || u1 === null || u2 === null) {\n                    this.SetError ('Invalid uv index.');\n                    break;\n                }\n                triangle.SetTextureUVs (u0, u1, u2);\n            }\n\n            if (this.currentMaterialIndex !== null) {\n                triangle.mat = this.currentMaterialIndex;\n            }\n\n            this.currentMeshConverter.AddTriangle (triangle);\n        }\n    }\n}\n", "import { Coord3D } from '../geometry/coord3d.js';\nimport { Direction } from '../geometry/geometry.js';\nimport { ArrayBufferToUtf8String } from '../io/bufferutils.js';\nimport { Mesh } from '../model/mesh.js';\nimport { Triangle } from '../model/triangle.js';\nimport { ImporterBase } from './importerbase.js';\nimport { ParametersFromLine, ReadLines } from './importerutils.js';\n\nexport class ImporterOff extends ImporterBase\n{\n    constructor ()\n    {\n        super ();\n    }\n\n    CanImportExtension (extension)\n    {\n        return extension === 'off';\n    }\n\n    GetUpDirection ()\n    {\n        return Direction.Y;\n    }\n\n    ClearContent ()\n    {\n        this.mesh = null;\n        this.status = null;\n    }\n\n    ResetContent ()\n    {\n        this.mesh = new Mesh ();\n        this.model.AddMeshToRootNode (this.mesh);\n        this.status = {\n            vertexCount : 0,\n            faceCount : 0,\n            foundVertex : 0,\n            foundFace : 0\n        };\n    }\n\n    ImportContent (fileContent, onFinish)\n    {\n        let textContent = ArrayBufferToUtf8String (fileContent);\n        ReadLines (textContent, (line) => {\n            if (!this.WasError ()) {\n                this.ProcessLine (line);\n            }\n        });\n        onFinish ();\n    }\n\n    ProcessLine (line)\n    {\n        if (line[0] === '#') {\n            return;\n        }\n\n        let parameters = ParametersFromLine (line, '#');\n        if (parameters.length === 0) {\n            return;\n        }\n\n        if (parameters[0] === 'OFF') {\n            return;\n        }\n\n        if (this.status.vertexCount === 0 && this.status.faceCount === 0) {\n            if (parameters.length > 1) {\n                this.status.vertexCount = parseInt (parameters[0], 10);\n                this.status.faceCount = parseInt (parameters[1], 10);\n            }\n            return;\n        }\n\n        if (this.status.foundVertex < this.status.vertexCount) {\n            if (parameters.length >= 3) {\n                this.mesh.AddVertex (new Coord3D (\n                    parseFloat (parameters[0]),\n                    parseFloat (parameters[1]),\n                    parseFloat (parameters[2])\n                ));\n                this.status.foundVertex += 1;\n            }\n            return;\n        }\n\n        if (this.status.foundFace < this.status.faceCount) {\n            if (parameters.length >= 4) {\n                let vertexCount = parseInt (parameters[0], 10);\n                if (parameters.length < vertexCount + 1) {\n                    return;\n                }\n                for (let i = 0; i < vertexCount - 2; i++) {\n                    let v0 = parseInt (parameters[1]);\n                    let v1 = parseInt (parameters[i + 2]);\n                    let v2 = parseInt (parameters[i + 3]);\n                    let triangle = new Triangle (v0, v1, v2);\n                    this.mesh.AddTriangle (triangle);\n                }\n                this.status.foundFace += 1;\n            }\n            return;\n        }\n    }\n}\n", "import { Coord3D } from '../geometry/coord3d.js';\nimport { Direction } from '../geometry/geometry.js';\nimport { BinaryReader } from '../io/binaryreader.js';\nimport { ArrayBufferToUtf8String } from '../io/bufferutils.js';\nimport { Color, IntegerToHexString } from '../model/color.js';\nimport { PhongMaterial } from '../model/material.js';\nimport { Mesh } from '../model/mesh.js';\nimport { Triangle } from '../model/triangle.js';\nimport { ImporterBase } from './importerbase.js';\nimport { ParametersFromLine, ReadLines, UpdateMaterialTransparency } from './importerutils.js';\n\nconst PlyHeaderCheckResult =\n{\n    Ok : 1,\n    NoVertices : 2,\n    NoFaces : 3,\n    UnknownError : 4\n};\n\nclass PlyHeader\n{\n    constructor ()\n    {\n        this.format = null;\n        this.elements = [];\n    }\n\n    SetFormat (format)\n    {\n        this.format = format;\n    }\n\n    AddElement (name, count)\n    {\n        this.elements.push ({\n            name : name,\n            count : count,\n            format : []\n        });\n    }\n\n    GetElements ()\n    {\n        return this.elements;\n    }\n\n    AddSingleFormat (elemType, name)\n    {\n        let lastElement = this.elements[this.elements.length - 1];\n        lastElement.format.push ({\n            name : name,\n            isSingle : true,\n            elemType : elemType\n        });\n    }\n\n    AddListFormat (countType, elemType, name)\n    {\n        let lastElement = this.elements[this.elements.length - 1];\n        lastElement.format.push ({\n            name : name,\n            isSingle : false,\n            countType : countType,\n            elemType : elemType\n        });\n    }\n\n    GetElement (name)\n    {\n        for (let i = 0; i < this.elements.length; i++) {\n            let element = this.elements[i];\n            if (element.name === name) {\n                return element;\n            }\n        }\n        return null;\n    }\n\n    Check ()\n    {\n        let vertex = this.GetElement ('vertex');\n        if (vertex === null || vertex.length === 0 || vertex.format.length < 3) {\n            return PlyHeaderCheckResult.NoVertices;\n        }\n\n        let face = this.GetElement ('face');\n        if (this.format === 'ascii') {\n            if (face === null || face.count === 0 || face.format.length < 0) {\n                return PlyHeaderCheckResult.NoFaces;\n            }\n        } else if (this.format === 'binary_little_endian' || this.format === 'binary_big_endian') {\n            let triStrips = this.GetElement ('tristrips');\n            let hasFaces = (face !== null && face.count > 0 && face.format.length > 0);\n            let hasTriStrips = (triStrips !== null && triStrips.count > 0 && triStrips.format.length > 0);\n            if (!hasFaces && !hasTriStrips) {\n                return PlyHeaderCheckResult.NoFaces;\n            }\n        } else {\n            return PlyHeaderCheckResult.UnknownError;\n        }\n\n        return PlyHeaderCheckResult.Ok;\n    }\n}\n\nclass PlyMaterialHandler\n{\n    constructor (model)\n    {\n        this.model = model;\n        this.colorToMaterial = new Map ();\n    }\n\n    GetMaterialIndexByColor (color)\n    {\n        let materialName = 'Color ' +\n            IntegerToHexString (color[0]) +\n            IntegerToHexString (color[1]) +\n            IntegerToHexString (color[2]) +\n            IntegerToHexString (color[3]);\n\n        if (this.colorToMaterial.has (materialName)) {\n            return this.colorToMaterial.get (materialName);\n        } else {\n            let material = new PhongMaterial ();\n            material.name = materialName;\n            material.color = new Color (color[0], color[1], color[2]);\n            material.opacity = color[3] / 255.0;\n            UpdateMaterialTransparency (material);\n            let materialIndex = this.model.AddMaterial (material);\n            this.colorToMaterial.set (materialName, materialIndex);\n            return materialIndex;\n        }\n    }\n}\n\nexport class ImporterPly extends ImporterBase\n{\n    constructor ()\n    {\n        super ();\n    }\n\n    CanImportExtension (extension)\n    {\n        return extension === 'ply';\n    }\n\n    GetUpDirection ()\n    {\n        return Direction.Y;\n    }\n\n    ClearContent ()\n    {\n        this.mesh = null;\n    }\n\n    ResetContent ()\n    {\n        this.mesh = new Mesh ();\n        this.model.AddMeshToRootNode (this.mesh);\n    }\n\n    ImportContent (fileContent, onFinish)\n    {\n        let headerString = this.GetHeaderContent (fileContent);\n        let header = this.ReadHeader (headerString);\n        let checkResult = header.Check ();\n        if (checkResult === PlyHeaderCheckResult.Ok) {\n            if (header.format === 'ascii') {\n                let contentString = ArrayBufferToUtf8String (fileContent);\n                contentString = contentString.substring (headerString.length);\n                this.ReadAsciiContent (header, contentString);\n            } else if (header.format === 'binary_little_endian' || header.format === 'binary_big_endian') {\n                this.ReadBinaryContent (header, fileContent, headerString.length);\n            }\n        } else {\n            if (checkResult === PlyHeaderCheckResult.NoVertices) {\n                this.SetError ('The model contains no vertices.');\n            } else if (checkResult === PlyHeaderCheckResult.NoFaces) {\n                this.SetError ('The model contains no faces.');\n            } else {\n                this.SetError ('Invalid header information.');\n            }\n        }\n        onFinish ();\n    }\n\n    GetHeaderContent (fileContent)\n    {\n        let headerContent = '';\n        let bufferView = new Uint8Array (fileContent);\n        let bufferIndex = 0;\n        for (bufferIndex = 0; bufferIndex < fileContent.byteLength; bufferIndex++) {\n            headerContent += String.fromCharCode (bufferView[bufferIndex]);\n            if (headerContent.endsWith ('end_header')) {\n                break;\n            }\n        }\n        bufferIndex += 1;\n        while (bufferIndex < fileContent.byteLength) {\n            let char = String.fromCharCode (bufferView[bufferIndex]);\n            headerContent += char;\n            bufferIndex += 1;\n            if (char === '\\n') {\n                break;\n            }\n        }\n        return headerContent;\n    }\n\n    ReadHeader (headerContent)\n    {\n        let header = new PlyHeader ();\n        ReadLines (headerContent, (line) => {\n            let parameters = ParametersFromLine (line, null);\n            if (parameters.length === 0 || parameters[0] === 'comment') {\n                return;\n            }\n\n            if (parameters[0] === 'ply') {\n                return;\n            } else if (parameters[0] === 'format' && parameters.length >= 2) {\n                header.SetFormat (parameters[1]);\n            } else if (parameters[0] === 'element' && parameters.length >= 3) {\n                header.AddElement (parameters[1], parseInt (parameters[2], 10));\n            } else if (parameters[0] === 'property' && parameters.length >= 3) {\n                if (parameters[1] === 'list' && parameters.length >= 5) {\n                    header.AddListFormat (parameters[2], parameters[3], parameters[4]);\n                } else {\n                    header.AddSingleFormat (parameters[1], parameters[2]);\n                }\n            }\n        });\n\n        return header;\n    }\n\n    ReadAsciiContent (header, fileContent)\n    {\n        let vertex = header.GetElement ('vertex');\n        let face = header.GetElement ('face');\n        let foundVertex = 0;\n        let foundFace = 0;\n        ReadLines (fileContent, (line) => {\n            if (this.WasError ()) {\n                return;\n            }\n\n            let parameters = ParametersFromLine (line, null);\n            if (parameters.length === 0 || parameters[0] === 'comment') {\n                return;\n            }\n\n            if (foundVertex < vertex.count) {\n                if (parameters.length >= 3) {\n                    this.mesh.AddVertex (new Coord3D (\n                        parseFloat (parameters[0]),\n                        parseFloat (parameters[1]),\n                        parseFloat (parameters[2])\n                    ));\n                    foundVertex += 1;\n                }\n                return;\n            }\n\n            if (face !== null && foundFace < face.count) {\n                if (parameters.length >= 4) {\n                    let vertexCount = parseInt (parameters[0], 10);\n                    if (parameters.length < vertexCount + 1) {\n                        return;\n                    }\n                    for (let i = 0; i < vertexCount - 2; i++) {\n                        let v0 = parseInt (parameters[1]);\n                        let v1 = parseInt (parameters[i + 2]);\n                        let v2 = parseInt (parameters[i + 3]);\n                        let triangle = new Triangle (v0, v1, v2);\n                        this.mesh.AddTriangle (triangle);\n                    }\n                    foundFace += 1;\n                }\n                return;\n            }\n        });\n    }\n\n    ReadBinaryContent (header, fileContent, headerLength)\n    {\n        function ReadByFormat (reader, format)\n        {\n            function ReadType (reader, type)\n            {\n                if (type === 'char' || type === 'int8') {\n                    return reader.ReadCharacter8 ();\n                } else if (type === 'uchar' || type === 'uint8') {\n                    return reader.ReadUnsignedCharacter8 ();\n                } else if (type === 'short' || type === 'int16') {\n                    return reader.ReadInteger16 ();\n                } else if (type === 'ushort' || type === 'uint16') {\n                    return reader.ReadUnsignedInteger16 ();\n                } else if (type === 'int' || type === 'int32') {\n                    return reader.ReadInteger32 ();\n                } else if (type === 'uint' || type === 'uint32') {\n                    return reader.ReadUnsignedInteger32 ();\n                } else if (type === 'float' || type === 'float32') {\n                    return reader.ReadFloat32 ();\n                } else if (type === 'double' || type === 'double64') {\n                    return reader.ReadDouble64 ();\n                }\n                return null;\n            }\n\n            if (format.isSingle) {\n                return ReadType (reader, format.elemType);\n            } else {\n                let list = [];\n                let count = ReadType (reader, format.countType);\n                for (let i = 0; i < count; i++) {\n                    list.push (ReadType (reader, format.elemType));\n                }\n                return list;\n            }\n        }\n\n        function SkipFormat (reader, format, startIndex)\n        {\n            for (let i = startIndex; i < format.length; i++) {\n                ReadByFormat (reader, format[i]);\n            }\n        }\n\n        function SkipAndGetColor (reader, format, startIndex)\n        {\n            let r = null;\n            let g = null;\n            let b = null;\n            let a = 255;\n\n            for (let i = startIndex; i < format.length; i++) {\n                let currFormat = format[i];\n                let val = ReadByFormat (reader, currFormat);\n                if (currFormat.name === 'red') {\n                    r = val;\n                } else if (currFormat.name === 'green') {\n                    g = val;\n                } else if (currFormat.name === 'blue') {\n                    b = val;\n                } else if (currFormat.name === 'alpha') {\n                    a = val;\n                }\n            }\n\n            if (r !== null && g !== null && b !== null) {\n                return [r, g, b, a];\n            }\n\n            return null;\n        }\n\n        let reader = null;\n        if (header.format === 'binary_little_endian') {\n            reader = new BinaryReader (fileContent, true);\n        } else if (header.format === 'binary_big_endian') {\n            reader = new BinaryReader (fileContent, false);\n        } else {\n            return;\n        }\n        reader.Skip (headerLength);\n\n        let materialHandler = new PlyMaterialHandler (this.model);\n        let elements = header.GetElements ();\n        for (let elementIndex = 0; elementIndex < elements.length; elementIndex++) {\n            let element = elements[elementIndex];\n            if (element.name === 'vertex') {\n                for (let vertexIndex = 0; vertexIndex < element.count; vertexIndex++) {\n                    let x = ReadByFormat (reader, element.format[0]);\n                    let y = ReadByFormat (reader, element.format[1]);\n                    let z = ReadByFormat (reader, element.format[2]);\n                    let color = SkipAndGetColor (reader, element.format, 3);\n                    if (color !== null) {\n                        this.mesh.AddVertexColor (new Color (color[0], color[1], color[2]));\n                    }\n                    this.mesh.AddVertex (new Coord3D (x, y, z));\n                }\n            } else if (element.name === 'face') {\n                for (let faceIndex = 0; faceIndex < element.count; faceIndex++) {\n                    let vertices = ReadByFormat (reader, element.format[0]);\n                    let faceColor = SkipAndGetColor (reader, element.format, 1);\n                    for (let i = 0; i < vertices.length - 2; i++) {\n                        let v0 = vertices[0];\n                        let v1 = vertices[i + 1];\n                        let v2 = vertices[i + 2];\n                        let triangle = new Triangle (v0, v1, v2);\n                        if (faceColor !== null) {\n                            triangle.mat = materialHandler.GetMaterialIndexByColor (faceColor);\n                        } else if (this.mesh.VertexColorCount () > 0) {\n                            triangle.SetVertexColors (v0, v1, v2);\n                        }\n                        this.mesh.AddTriangle (triangle);\n                    }\n                }\n            } else if (element.name === 'tristrips') {\n                for (let triStripIndex = 0; triStripIndex < element.count; triStripIndex++) {\n                    let vertices = ReadByFormat (reader, element.format[0]);\n                    SkipFormat (reader, element.format, 1);\n                    let ccw = true;\n                    for (let i = 0; i < vertices.length - 2; i++) {\n                        let v0 = vertices[i];\n                        let v1 = vertices[i + 1];\n                        let v2 = vertices[i + 2];\n                        if (v2 === -1) {\n                            i += 2;\n                            ccw = true;\n                            continue;\n                        }\n                        if (!ccw) {\n                            let tmp = v1;\n                            v1 = v2;\n                            v2 = tmp;\n                        }\n                        ccw = !ccw;\n                        let triangle = new Triangle (v0, v1, v2);\n                        this.mesh.AddTriangle (triangle);\n                    }\n                }\n            } else {\n                SkipFormat (reader, element.format, 0);\n            }\n        }\n    }\n}\n", "import { Coord3D } from '../geometry/coord3d.js';\nimport { Direction, IsPositive } from '../geometry/geometry.js';\nimport { BinaryReader } from '../io/binaryreader.js';\nimport { ArrayBufferToUtf8String } from '../io/bufferutils.js';\nimport { Mesh } from '../model/mesh.js';\nimport { Triangle } from '../model/triangle.js';\nimport { ImporterBase } from './importerbase.js';\nimport { NameFromLine, ParametersFromLine, ReadLines } from './importerutils.js';\n\nexport class ImporterStl extends ImporterBase\n{\n    constructor ()\n    {\n        super ();\n    }\n\n    CanImportExtension (extension)\n    {\n        return extension === 'stl';\n    }\n\n    GetUpDirection ()\n    {\n        return Direction.Z;\n    }\n\n    ClearContent ()\n    {\n        this.mesh = null;\n        this.triangle = null;\n    }\n\n    ResetContent ()\n    {\n        this.mesh = new Mesh ();\n        this.model.AddMeshToRootNode (this.mesh);\n        this.triangle = null;\n    }\n\n    ImportContent (fileContent, onFinish)\n    {\n        if (this.IsBinaryStlFile (fileContent)) {\n            this.ProcessBinary (fileContent);\n        } else {\n            let textContent = ArrayBufferToUtf8String (fileContent);\n            ReadLines (textContent, (line) => {\n                if (!this.WasError ()) {\n                    this.ProcessLine (line);\n                }\n            });\n        }\n        onFinish ();\n    }\n\n    IsBinaryStlFile (fileContent)\n    {\n        let byteLength = fileContent.byteLength;\n        if (byteLength < 84) {\n            return false;\n        }\n\n        let reader = new BinaryReader (fileContent, true);\n        reader.Skip (80);\n\n        let triangleCount = reader.ReadUnsignedInteger32 ();\n        if (byteLength !== triangleCount * 50 + 84) {\n            return false;\n        }\n\n        return true;\n    }\n\n    ProcessLine (line)\n    {\n        if (line[0] === '#') {\n            return;\n        }\n\n        let parameters = ParametersFromLine (line, '#');\n        if (parameters.length === 0) {\n            return;\n        }\n\n        let keyword = parameters[0];\n        if (keyword === 'solid') {\n            if (parameters.length > 1) {\n                let name = NameFromLine (line, keyword.length, '#');\n                this.mesh.SetName (name);\n            }\n            return;\n        }\n\n        if (keyword === 'facet') {\n            this.triangle = new Triangle (-1, -1, -1);\n            if (parameters.length >= 5 && parameters[1] === 'normal') {\n                let normalVector = new Coord3D (\n                    parseFloat (parameters[2]),\n                    parseFloat (parameters[3]),\n                    parseFloat (parameters[4])\n                );\n                if (IsPositive (normalVector.Length ())) {\n                    let normalIndex = this.mesh.AddNormal (normalVector);\n                    this.triangle.SetNormals (\n                        normalIndex,\n                        normalIndex,\n                        normalIndex\n                    );\n                }\n            }\n            return;\n        }\n\n        if (keyword === 'vertex' && this.triangle !== null) {\n            if (parameters.length >= 4) {\n                let vertexIndex = this.mesh.AddVertex (new Coord3D (\n                    parseFloat (parameters[1]),\n                    parseFloat (parameters[2]),\n                    parseFloat (parameters[3])\n                ));\n                if (this.triangle.v0 === -1) {\n                    this.triangle.v0 = vertexIndex;\n                } else if (this.triangle.v1 === -1) {\n                    this.triangle.v1 = vertexIndex;\n                } else if (this.triangle.v2 === -1) {\n                    this.triangle.v2 = vertexIndex;\n                }\n            }\n            return;\n        }\n\n        if (keyword === 'endfacet' && this.triangle !== null) {\n            if (this.triangle.v0 !== -1 && this.triangle.v1 !== -1 && this.triangle.v2 !== null) {\n                this.mesh.AddTriangle (this.triangle);\n            }\n            this.triangle = null;\n            return;\n        }\n    }\n\n    ProcessBinary (fileContent)\n    {\n        function ReadVector (reader)\n        {\n            let coord = new Coord3D ();\n            coord.x = reader.ReadFloat32 ();\n            coord.y = reader.ReadFloat32 ();\n            coord.z = reader.ReadFloat32 ();\n            return coord;\n        }\n\n        function AddVertex (mesh, reader)\n        {\n            let coord = ReadVector (reader);\n            return mesh.AddVertex (coord);\n        }\n\n        let reader = new BinaryReader (fileContent, true);\n        reader.Skip (80);\n        let triangleCount = reader.ReadUnsignedInteger32 ();\n        for (let i = 0; i < triangleCount; i++) {\n            let normalVector = ReadVector (reader);\n            let v0 = AddVertex (this.mesh, reader);\n            let v1 = AddVertex (this.mesh, reader);\n            let v2 = AddVertex (this.mesh, reader);\n            reader.Skip (2);\n            let triangle = new Triangle (v0, v1, v2);\n            if (IsPositive (normalVector.Length ())) {\n                let normal = this.mesh.AddNormal (normalVector);\n                triangle.SetNormals (normal, normal, normal);\n            }\n            this.mesh.AddTriangle (triangle);\n        }\n    }\n}\n", "import { WaitWhile } from '../core/taskrunner.js';\nimport { Direction } from '../geometry/geometry.js';\nimport { Matrix } from '../geometry/matrix.js';\nimport { Transformation } from '../geometry/transformation.js';\nimport { Base64DataURIToArrayBuffer, CreateObjectUrl, GetFileExtensionFromMimeType } from '../io/bufferutils.js';\nimport { LoadExternalLibrary } from '../io/externallibs.js';\nimport { GetFileExtension, GetFileName } from '../io/fileutils.js';\nimport { PhongMaterial, TextureMap } from '../model/material.js';\nimport { Node, NodeType } from '../model/node.js';\nimport { ConvertThreeColorToColor, ConvertThreeGeometryToMesh } from '../threejs/threeutils.js';\nimport { ImporterBase } from './importerbase.js';\n\nexport class ImporterThreeBase extends ImporterBase\n{\n    constructor ()\n    {\n        super ();\n    }\n\n    GetExternalLibraries ()\n    {\n        return null;\n    }\n\n    CreateLoader (manager)\n    {\n        return null;\n    }\n\n    GetMainObject (loadedObject)\n    {\n        return loadedObject;\n    }\n\n    IsMeshVisible (mesh)\n    {\n        return true;\n    }\n\n    ClearContent ()\n    {\n        this.loader = null;\n        this.materialIdToIndex = null;\n        this.objectUrlToFileName = null;\n    }\n\n    ResetContent ()\n    {\n        this.loader = null;\n        this.materialIdToIndex = new Map ();\n        this.objectUrlToFileName = new Map ();\n    }\n\n    ImportContent (fileContent, onFinish)\n    {\n        async function LoadLibraries (libraries, onFinish, onError)\n        {\n            try {\n                for (let i = 0; i < libraries.length; i++) {\n                    await LoadExternalLibrary (libraries[i]);\n                }\n            } catch (err) {\n                onError ();\n            }\n            onFinish ();\n        }\n\n        const libraries = this.GetExternalLibraries ();\n        if (libraries === null) {\n            onFinish ();\n            return;\n        }\n\n        LoadLibraries (libraries, () => {\n            this.LoadModel (fileContent, onFinish);\n        }, () => {\n            onFinish ();\n        });\n    }\n\n    LoadModel (fileContent, onFinish)\n    {\n        let isAllLoadersDone = false;\n        let loadingManager = new THREE.LoadingManager (() => {\n            isAllLoadersDone = true;\n        });\n\n        const mainFileUrl = CreateObjectUrl (fileContent);\n        loadingManager.setURLModifier ((url) => {\n            if (url === mainFileUrl) {\n                return url;\n            }\n            const name = GetFileName (url);\n            const extension = GetFileExtension (url);\n            if (extension.length > 0) {\n                const buffer = this.callbacks.getFileBuffer (url);\n                if (buffer !== null) {\n                    let objectUrl = CreateObjectUrl (buffer);\n                    this.objectUrlToFileName.set (objectUrl, name);\n                    return objectUrl;\n                }\n            }\n            return url;\n        });\n\n        const threeLoader = this.CreateLoader (loadingManager);\n        if (threeLoader === null) {\n            onFinish ();\n            return;\n        }\n\n        threeLoader.load (mainFileUrl,\n            (object) => {\n                WaitWhile (() => {\n                    if (isAllLoadersDone) {\n                        this.OnThreeObjectsLoaded (object, onFinish);\n                        return false;\n                    }\n                    return true;\n                });\n            },\n            () => {\n            },\n            (err) => {\n                this.SetError (err);\n                onFinish ();\n            }\n        );\n    }\n\n    OnThreeObjectsLoaded (loadedObject, onFinish)\n    {\n        function GetObjectTransformation (threeObject)\n        {\n            let matrix = new Matrix ().CreateIdentity ();\n            threeObject.updateMatrix ();\n            if (threeObject.matrix !== undefined && threeObject.matrix !== null) {\n                matrix.Set (threeObject.matrix.elements);\n            }\n            return new Transformation (matrix);\n        }\n\n        function AddObject (importer, model, threeObject, parentNode)\n        {\n            let node = new Node ();\n            if (threeObject.name !== undefined) {\n                node.SetName (threeObject.name);\n            }\n            node.SetTransformation (GetObjectTransformation (threeObject));\n            parentNode.AddChildNode (node);\n\n            for (let childObject of threeObject.children) {\n                AddObject (importer, model, childObject, node);\n            }\n            if (threeObject.isMesh && importer.IsMeshVisible (threeObject)) {\n                if (threeObject.children.length === 0) {\n                    node.SetType (NodeType.MeshNode);\n                }\n                let mesh = importer.ConvertThreeMesh (threeObject);\n                let meshIndex = model.AddMesh (mesh);\n                node.AddMeshIndex (meshIndex);\n            }\n        }\n\n        let mainObject = this.GetMainObject (loadedObject);\n        let rootNode = this.model.GetRootNode ();\n        rootNode.SetTransformation (GetObjectTransformation (mainObject));\n        for (let childObject of mainObject.children) {\n            AddObject (this, this.model, childObject, rootNode);\n        }\n\n        onFinish ();\n    }\n\n    ConvertThreeMesh (threeMesh)\n    {\n        let mesh = null;\n        if (Array.isArray (threeMesh.material)) {\n            mesh = ConvertThreeGeometryToMesh (threeMesh.geometry, null);\n            if (threeMesh.geometry.attributes.color === undefined || threeMesh.geometry.attributes.color === null) {\n                let materialIndices = [];\n                for (let i = 0; i < threeMesh.material.length; i++) {\n                    const material = threeMesh.material[i];\n                    const materialIndex = this.FindOrCreateMaterial (material);\n                    materialIndices.push (materialIndex);\n                }\n                for (let i = 0; i < threeMesh.geometry.groups.length; i++) {\n                    let group = threeMesh.geometry.groups[i];\n                    let groupEnd = group.start;\n                    if (group.count === Infinity) {\n                        groupEnd = mesh.TriangleCount ();\n                    } else {\n                        groupEnd = group.start / 3 + group.count / 3;\n                    }\n                    for (let j = group.start / 3; j < groupEnd; j++) {\n                        let triangle = mesh.GetTriangle (j);\n                        triangle.SetMaterial (materialIndices[group.materialIndex]);\n                    }\n                }\n            }\n        } else {\n            const materialIndex = this.FindOrCreateMaterial (threeMesh.material);\n            mesh = ConvertThreeGeometryToMesh (threeMesh.geometry, materialIndex);\n        }\n        if (threeMesh.name !== undefined && threeMesh.name !== null) {\n            mesh.SetName (threeMesh.name);\n        }\n        return mesh;\n    }\n\n    FindOrCreateMaterial (threeMaterial)\n    {\n        if (this.materialIdToIndex.has (threeMaterial.id)) {\n            return this.materialIdToIndex.get (threeMaterial.id);\n        }\n        let material = this.ConvertThreeMaterial (threeMaterial);\n        let materialIndex = this.model.AddMaterial (material);\n        this.materialIdToIndex.set (threeMaterial.id, materialIndex);\n        return materialIndex;\n    }\n\n    ConvertThreeMaterial (threeMaterial)\n    {\n        function CreateTexture (threeMap, objectUrlToFileName)\n        {\n            function GetDataUrl (img)\n            {\n                if (img.data !== undefined && img.data !== null) {\n                    let imageData = new ImageData (img.width, img.height);\n                    let imageSize = img.width * img.height * 4;\n                    for (let i = 0; i < imageSize; i++) {\n                        imageData.data[i] = img.data[i];\n                    }\n                    return THREE.ImageUtils.getDataURL (imageData);\n                } else {\n                    return THREE.ImageUtils.getDataURL (img);\n                }\n            }\n\n            if (threeMap === undefined || threeMap === null) {\n                return null;\n            }\n\n            if (threeMap.image === undefined || threeMap.image === null) {\n                return null;\n            }\n\n            try {\n                const dataUrl = GetDataUrl (threeMap.image);\n                const base64Buffer = Base64DataURIToArrayBuffer (dataUrl);\n                let texture = new TextureMap ();\n                let textureName = null;\n                if (objectUrlToFileName.has (threeMap.image.src)) {\n                    textureName = objectUrlToFileName.get (threeMap.image.src);\n                } else if (threeMap.name !== undefined && threeMap.name !== null) {\n                    textureName = threeMap.name + '.' + GetFileExtensionFromMimeType (base64Buffer.mimeType);\n                } else {\n                    textureName = 'Embedded_' + threeMap.id.toString () + '.' + GetFileExtensionFromMimeType (base64Buffer.mimeType);\n                }\n                texture.name = textureName;\n                texture.url = dataUrl;\n                texture.buffer = base64Buffer.buffer;\n                texture.rotation = threeMap.rotation;\n                texture.offset.x = threeMap.offset.x;\n                texture.offset.y = threeMap.offset.y;\n                texture.scale.x = threeMap.repeat.x;\n                texture.scale.y = threeMap.repeat.y;\n                return texture;\n            } catch (err) {\n                return null;\n            }\n        }\n\n        let material = new PhongMaterial ();\n        material.name = threeMaterial.name;\n        material.color = ConvertThreeColorToColor (threeMaterial.color);\n        material.opacity = threeMaterial.opacity;\n        material.transparent = threeMaterial.transparent;\n        material.alphaTest = threeMaterial.alphaTest;\n        if (threeMaterial.type === 'MeshPhongMaterial') {\n            material.specular = ConvertThreeColorToColor (threeMaterial.specular);\n            material.shininess = threeMaterial.shininess / 100.0;\n        }\n        material.diffuseMap = CreateTexture (threeMaterial.map, this.objectUrlToFileName);\n        material.normalMap = CreateTexture (threeMaterial.normalMap, this.objectUrlToFileName);\n        material.bumpMap = CreateTexture (threeMaterial.bumpMap, this.objectUrlToFileName);\n\n        return material;\n    }\n}\n\nexport class ImporterThreeFbx extends ImporterThreeBase\n{\n    constructor ()\n    {\n        super ();\n    }\n\n    CanImportExtension (extension)\n    {\n        return extension === 'fbx';\n    }\n\n    GetUpDirection ()\n    {\n        return Direction.Y;\n    }\n\n    GetExternalLibraries ()\n    {\n        return [\n            'loaders/fflate.min.js',\n            'three_loaders/TGALoader.js',\n            'three_loaders/FBXLoader.js'\n        ];\n    }\n\n    CreateLoader (manager)\n    {\n        manager.addHandler (/\\.tga$/i, new THREE.TGALoader (manager));\n        return new THREE.FBXLoader (manager);\n    }\n\n    GetMainObject (loadedObject)\n    {\n        return loadedObject;\n    }\n}\n\nexport class ImporterThreeDae extends ImporterThreeBase\n{\n    constructor ()\n    {\n        super ();\n    }\n\n    CanImportExtension (extension)\n    {\n        return extension === 'dae';\n    }\n\n    GetUpDirection ()\n    {\n        return Direction.Y;\n    }\n\n    GetExternalLibraries ()\n    {\n        return [\n            'three_loaders/TGALoader.js',\n            'three_loaders/ColladaLoader.js'\n        ];\n    }\n\n    CreateLoader (manager)\n    {\n        manager.addHandler (/\\.tga$/i, new THREE.TGALoader (manager));\n        return new THREE.ColladaLoader (manager);\n    }\n\n    GetMainObject (loadedObject)\n    {\n        return loadedObject.scene;\n    }\n}\n\nexport class ImporterThreeWrl extends ImporterThreeBase\n{\n    constructor ()\n    {\n        super ();\n    }\n\n    CanImportExtension (extension)\n    {\n        return extension === 'wrl';\n    }\n\n    GetUpDirection ()\n    {\n        return Direction.Y;\n    }\n\n    GetExternalLibraries ()\n    {\n        return [\n            'three_loaders/chevrotain.min.js',\n            'three_loaders/VRMLLoader.js'\n        ];\n    }\n\n    CreateLoader (manager)\n    {\n        return new THREE.VRMLLoader (manager);\n    }\n\n    GetMainObject (loadedObject)\n    {\n        return loadedObject;\n    }\n\n    IsMeshVisible (mesh)\n    {\n        let isVisible = true;\n        if (Array.isArray (mesh.material)) {\n            for (let i = 0; i < mesh.material.length; i++) {\n                if (mesh.material[i].side === THREE.BackSide) {\n                    isVisible = false;\n                    break;\n                }\n            }\n        } else {\n            isVisible = (mesh.material.side !== THREE.BackSide);\n        }\n        return isVisible;\n    }\n}\n\nexport class ImporterThree3mf extends ImporterThreeBase\n{\n    constructor ()\n    {\n        super ();\n    }\n\n    CanImportExtension (extension)\n    {\n        return extension === '3mf';\n    }\n\n    GetUpDirection ()\n    {\n        return Direction.Z;\n    }\n\n    GetExternalLibraries ()\n    {\n        return [\n            'loaders/fflate.min.js',\n            'three_loaders/3MFLoader.js'\n        ];\n    }\n\n    CreateLoader (manager)\n    {\n        return new THREE.ThreeMFLoader (manager);\n    }\n\n    GetMainObject (loadedObject)\n    {\n        return loadedObject;\n    }\n}\n", "import { RunTaskAsync } from '../core/taskrunner.js';\nimport { CreateObjectUrl, RevokeObjectUrl } from '../io/bufferutils.js';\nimport { LoadExternalLibrary } from '../io/externallibs.js';\nimport { FileSource, GetFileName } from '../io/fileutils.js';\nimport { Color } from '../model/color.js';\nimport { File, FileList } from './filelist.js';\nimport { Importer3dm } from './importer3dm.js';\nimport { Importer3ds } from './importer3ds.js';\nimport { ImporterGltf } from './importergltf.js';\nimport { ImporterIfc } from './importerifc.js';\nimport { ImporterO3dv } from './importero3dv.js';\nimport { ImporterObj } from './importerobj.js';\nimport { ImporterOff } from './importeroff.js';\nimport { ImporterPly } from './importerply.js';\nimport { ImporterStl } from './importerstl.js';\nimport { ImporterThree3mf, ImporterThreeDae, ImporterThreeFbx, ImporterThreeWrl } from './importerthree.js';\n\nexport class ImportSettings\n{\n    constructor ()\n    {\n        this.defaultColor = new Color (200, 200, 200);\n    }\n}\n\nexport const ImportErrorCode =\n{\n    NoImportableFile : 1,\n    FailedToLoadFile : 2,\n    ImportFailed : 3,\n    UnknownError : 4\n};\n\nexport class ImportError\n{\n    constructor (code, message)\n    {\n        this.code = code;\n        this.message = message;\n    }\n}\n\nexport class ImportResult\n{\n    constructor ()\n    {\n        this.model = null;\n        this.mainFile = null;\n        this.upVector = null;\n        this.usedFiles = null;\n        this.missingFiles = null;\n    }\n}\n\nexport class ImporterFileAccessor\n{\n    constructor (getBufferCallback)\n    {\n        this.getBufferCallback = getBufferCallback;\n        this.fileBuffers = new Map ();\n        this.textureBuffers = new Map ();\n    }\n\n    GetFileBuffer (filePath)\n    {\n        let fileName = GetFileName (filePath);\n        if (this.fileBuffers.has (fileName)) {\n            return this.fileBuffers.get (fileName);\n        }\n        let buffer = this.getBufferCallback (fileName);\n        this.fileBuffers.set (fileName, buffer);\n        return buffer;\n    }\n\n    GetTextureBuffer (filePath)\n    {\n        let fileName = GetFileName (filePath);\n        if (this.textureBuffers.has (fileName)) {\n            return this.textureBuffers.get (fileName);\n        }\n        let buffer = null;\n        let textureBuffer = this.getBufferCallback (fileName);\n        if (textureBuffer !== null) {\n            buffer = {\n                url : CreateObjectUrl (textureBuffer),\n                buffer : textureBuffer\n            };\n        }\n        this.textureBuffers.set (fileName, buffer);\n        return buffer;\n    }\n}\n\nexport class Importer\n{\n    constructor ()\n    {\n        this.importers = [\n            new ImporterObj (),\n            new ImporterStl (),\n            new ImporterOff (),\n            new ImporterPly (),\n            new Importer3ds (),\n            new ImporterGltf (),\n            new ImporterO3dv (),\n            new Importer3dm (),\n            new ImporterIfc (),\n            new ImporterThreeFbx (),\n            new ImporterThreeDae (),\n            new ImporterThreeWrl (),\n            new ImporterThree3mf ()\n        ];\n        this.fileList = new FileList ();\n        this.model = null;\n        this.usedFiles = [];\n        this.missingFiles = [];\n    }\n\n\tAddImporter (importer)\n\t{\n\t\tthis.importers.push (importer);\n\t}\n\n    ImportFiles (fileList, fileSource, settings, callbacks)\n    {\n        this.LoadFiles (fileList, fileSource, () => {\n            callbacks.onFilesLoaded ();\n            RunTaskAsync (() => {\n                this.ImportLoadedFiles (settings, callbacks);\n            });\n        });\n    }\n\n    LoadFiles (fileList, fileSource, onReady)\n    {\n        let newFileList = new FileList (this.importers);\n        if (fileSource === FileSource.Url) {\n            newFileList.FillFromFileUrls (fileList);\n        } else if (fileSource === FileSource.File) {\n            newFileList.FillFromFileObjects (fileList);\n        }\n        let reset = false;\n        if (this.HasImportableFile (newFileList)) {\n            reset = true;\n        } else {\n            let foundMissingFile = false;\n            for (let i = 0; i < this.missingFiles.length; i++) {\n                let missingFile = this.missingFiles[i];\n                if (newFileList.ContainsFileByPath (missingFile)) {\n                    foundMissingFile = true;\n                }\n            }\n            if (!foundMissingFile) {\n                reset = true;\n            } else {\n                let newFiles = newFileList.GetFiles ();\n                this.fileList.ExtendFromFileList (newFiles);\n                reset = false;\n            }\n        }\n        if (reset) {\n            this.fileList = newFileList;\n        }\n        this.fileList.GetContent (() => {\n            this.DecompressArchives (this.fileList, () => {\n                onReady ();\n            });\n        });\n    }\n\n    ImportLoadedFiles (settings, callbacks)\n    {\n        let importableFiles = this.GetImportableFiles (this.fileList);\n        if (importableFiles.length === 0) {\n            callbacks.onImportError (new ImportError (ImportErrorCode.NoImportableFile, null));\n            return;\n        }\n\n        if (importableFiles.length === 1 || !callbacks.onSelectMainFile) {\n            let mainFile = importableFiles[0];\n            this.ImportLoadedMainFile (mainFile, settings, callbacks);\n        } else {\n            let fileNames = importableFiles.map (importableFile => importableFile.file.name);\n            callbacks.onSelectMainFile (fileNames, (mainFileIndex) => {\n                if (mainFileIndex === null) {\n                    callbacks.onImportError (new ImportError (ImportErrorCode.NoImportableFile, null));\n                    return;\n                }\n                RunTaskAsync (() => {\n                    let mainFile = importableFiles[mainFileIndex];\n                    this.ImportLoadedMainFile (mainFile, settings, callbacks);\n                });\n            });\n        }\n    }\n\n    ImportLoadedMainFile (mainFile, settings, callbacks)\n    {\n        if (mainFile === null || mainFile.file === null || mainFile.file.content === null) {\n            callbacks.onImportError (new ImportError (ImportErrorCode.FailedToLoadFile, null));\n            return;\n        }\n\n        this.RevokeModelUrls ();\n        this.model = null;\n        this.usedFiles = [];\n        this.missingFiles = [];\n        this.usedFiles.push (mainFile.file.name);\n\n        let importer = mainFile.importer;\n        let fileAccessor = new ImporterFileAccessor ((fileName) => {\n            let fileBuffer = null;\n            let file = this.fileList.FindFileByPath (fileName);\n            if (file === null || file.content === null) {\n                this.missingFiles.push (fileName);\n                fileBuffer = null;\n            } else {\n                this.usedFiles.push (fileName);\n                fileBuffer = file.content;\n            }\n            return fileBuffer;\n        });\n\n        importer.Import (mainFile.file.name, mainFile.file.extension, mainFile.file.content, {\n            getDefaultMaterialColor : () => {\n                return settings.defaultColor;\n            },\n            getFileBuffer : (filePath) => {\n                return fileAccessor.GetFileBuffer (filePath);\n            },\n            getTextureBuffer : (filePath) => {\n                return fileAccessor.GetTextureBuffer (filePath);\n            },\n            onSuccess : () => {\n                this.model = importer.GetModel ();\n                let result = new ImportResult ();\n                result.mainFile = mainFile.file.name;\n                result.model = this.model;\n                result.usedFiles = this.usedFiles;\n                result.missingFiles = this.missingFiles;\n                result.upVector = importer.GetUpDirection ();\n                callbacks.onImportSuccess (result);\n            },\n            onError : () => {\n                let message = importer.GetErrorMessage ();\n                callbacks.onImportError (new ImportError (ImportErrorCode.ImportFailed, message));\n            },\n            onComplete : () => {\n                importer.Clear ();\n            }\n        });\n    }\n\n    DecompressArchives (fileList, onReady)\n    {\n        let files = fileList.GetFiles ();\n        let archives = [];\n        for (let file of files) {\n            if (file.extension === 'zip') {\n                archives.push (file);\n            }\n        }\n        if (archives.length === 0) {\n            onReady ();\n            return;\n        }\n        LoadExternalLibrary ('loaders/fflate.min.js').then (() => {\n            for (let i = 0; i < archives.length; i++) {\n                const archiveFile = archives[i];\n                const archiveBuffer = new Uint8Array (archiveFile.content);\n                const decompressed = fflate.unzipSync (archiveBuffer);\n                for (const fileName in decompressed) {\n                    if (Object.prototype.hasOwnProperty.call (decompressed, fileName)) {\n                        let file = new File (fileName, FileSource.Decompressed);\n                        file.SetContent (decompressed[fileName].buffer);\n                        fileList.AddFile (file);\n                    }\n                }\n            }\n            onReady ();\n        }).catch (() => {\n            onReady ();\n        });\n    }\n\n    GetFileList ()\n    {\n        return this.fileList;\n    }\n\n    HasImportableFile (fileList)\n    {\n        let importableFiles = this.GetImportableFiles (fileList);\n        return importableFiles.length > 0;\n    }\n\n    GetImportableFiles (fileList)\n    {\n        function FindImporter (file, importers)\n        {\n            for (let importerIndex = 0; importerIndex < importers.length; importerIndex++) {\n                let importer = importers[importerIndex];\n                if (importer.CanImportExtension (file.extension)) {\n                    return importer;\n                }\n            }\n            return null;\n        }\n\n        let importableFiles = [];\n        let files = fileList.GetFiles ();\n        for (let fileIndex = 0; fileIndex < files.length; fileIndex++) {\n            let file = files[fileIndex];\n            let importer = FindImporter (file, this.importers);\n            if (importer !== null) {\n                importableFiles.push ({\n                    file : file,\n                    importer : importer\n                });\n            }\n        }\n        return importableFiles;\n    }\n\n    RevokeModelUrls ()\n    {\n        if (this.model === null) {\n            return;\n        }\n        for (let i = 0; i < this.model.MaterialCount (); i++) {\n            let material = this.model.GetMaterial (i);\n            material.EnumerateTextureMaps ((texture) => {\n                if (texture.url !== null) {\n                    RevokeObjectUrl (texture.url);\n                }\n            });\n        }\n    }\n}\n", "import { Coord3D } from '../geometry/coord3d.js';\nimport { Color } from '../model/color.js';\nimport { Camera } from '../viewer/navigation.js';\n\nexport let ParameterConverter =\n{\n    IntegerToString (integer)\n    {\n        return integer.toString ();\n    },\n\n    StringToInteger (str)\n    {\n        return parseInt (str, 10);\n    },\n\n    NumberToString (number)\n    {\n        let precision = 5;\n        return number.toPrecision (precision);\n    },\n\n    StringToNumber (str)\n    {\n        return parseFloat (str);\n    },\n\n    ModelUrlsToString : function (urls)\n    {\n        if (urls === null) {\n            return null;\n        }\n        return urls.join (',');\n    },\n\n    StringToModelUrls : function (str)\n    {\n        if (str === null || str.length === 0) {\n            return null;\n        }\n        return str.split (',');\n    },\n\n    CameraToString : function (camera)\n    {\n        if (camera === null) {\n            return null;\n        }\n        let cameraParameters = [\n            this.NumberToString (camera.eye.x), this.NumberToString (camera.eye.y), this.NumberToString (camera.eye.z),\n            this.NumberToString (camera.center.x), this.NumberToString (camera.center.y), this.NumberToString (camera.center.z),\n            this.NumberToString (camera.up.x), this.NumberToString (camera.up.y), this.NumberToString (camera.up.z)\n        ].join (',');\n        return cameraParameters;\n    },\n\n    StringToCamera : function (str)\n    {\n        if (str === null || str.length === 0) {\n            return null;\n        }\n        let paramParts = str.split (',');\n        if (paramParts.length !== 9) {\n            return null;\n        }\n        let camera = new Camera (\n            new Coord3D (this.StringToNumber (paramParts[0]), this.StringToNumber (paramParts[1]), this.StringToNumber (paramParts[2])),\n            new Coord3D (this.StringToNumber (paramParts[3]), this.StringToNumber (paramParts[4]), this.StringToNumber (paramParts[5])),\n            new Coord3D (this.StringToNumber (paramParts[6]), this.StringToNumber (paramParts[7]), this.StringToNumber (paramParts[8]))\n        );\n        return camera;\n    },\n\n    ColorToString : function (color)\n    {\n        if (color === null) {\n            return null;\n        }\n        let colorParameters = [\n            this.IntegerToString (color.r),\n            this.IntegerToString (color.g),\n            this.IntegerToString (color.b)\n        ].join (',');\n        return colorParameters;\n    },\n\n    StringToColor : function (str)\n    {\n        if (str === null || str.length === 0) {\n            return null;\n        }\n        let paramParts = str.split (',');\n        if (paramParts.length !== 3) {\n            return null;\n        }\n        let color = new Color (\n            this.StringToInteger (paramParts[0]),\n            this.StringToInteger (paramParts[1]),\n            this.StringToInteger (paramParts[2])\n        );\n        return color;\n    },\n\n    EdgeSettingsToString : function (edgeSettings)\n    {\n        if (edgeSettings === null) {\n            return null;\n        }\n        let edgeSettingsParameters = [\n            edgeSettings.showEdges ? 'on' : 'off',\n            this.ColorToString (edgeSettings.edgeColor),\n            this.IntegerToString (edgeSettings.edgeThreshold),\n        ].join (',');\n        return edgeSettingsParameters;\n    },\n\n    StringToEdgeSettings : function (str)\n    {\n        if (str === null || str.length === 0) {\n            return null;\n        }\n        let paramParts = str.split (',');\n        if (paramParts.length !== 5) {\n            return null;\n        }\n        let edgeSettings = {\n            showEdges : paramParts[0] === 'on' ? true : false,\n            edgeColor : new Color (\n                this.StringToInteger (paramParts[1]),\n                this.StringToInteger (paramParts[2]),\n                this.StringToInteger (paramParts[3])\n            ),\n            edgeThreshold : this.StringToInteger (paramParts[4])\n        };\n        return edgeSettings;\n    }\n};\n\nexport class ParameterListBuilder\n{\n    constructor (separator)\n    {\n        this.separator = separator;\n        this.paramList = '';\n    }\n\n    AddModelUrls (urls)\n    {\n        this.AddUrlPart ('model', ParameterConverter.ModelUrlsToString (urls));\n        return this;\n    }\n\n    AddCamera (camera)\n    {\n        this.AddUrlPart ('camera', ParameterConverter.CameraToString (camera));\n        return this;\n    }\n\n    AddBackgroundColor (background)\n    {\n        this.AddUrlPart ('backgroundcolor', ParameterConverter.ColorToString (background));\n        return this;\n    }\n\n    AddDefaultColor (color)\n    {\n        this.AddUrlPart ('defaultcolor', ParameterConverter.ColorToString (color));\n        return this;\n    }\n\n    AddEdgeSettings (edgeSettings)\n    {\n        this.AddUrlPart ('edgesettings', ParameterConverter.EdgeSettingsToString (edgeSettings));\n        return this;\n    }\n\n    AddUrlPart (keyword, urlPart)\n    {\n        if (keyword === null || urlPart === null) {\n            return;\n        }\n        if (this.paramList.length > 0) {\n            this.paramList += this.separator;\n        }\n        this.paramList += keyword + '=' + urlPart;\n    }\n\n    GetParameterList ()\n    {\n        return this.paramList;\n    }\n}\n\nexport class ParameterListParser\n{\n    constructor (paramList, separator)\n    {\n        this.separator = separator;\n        this.paramList = paramList;\n    }\n\n    GetModelUrls ()\n    {\n        // detect legacy links\n        if (this.paramList.indexOf ('=') === -1) {\n            return this.paramList.split (',');\n        }\n\n        let keywordParams = this.GetKeywordParams ('model');\n        return ParameterConverter.StringToModelUrls (keywordParams);\n    }\n\n    GetCamera ()\n    {\n        let keywordParams = this.GetKeywordParams ('camera');\n        return ParameterConverter.StringToCamera (keywordParams);\n    }\n\n    GetBackgroundColor ()\n    {\n        let backgroundParams = this.GetKeywordParams ('backgroundcolor');\n        return ParameterConverter.StringToColor (backgroundParams);\n    }\n\n    GetDefaultColor ()\n    {\n        let colorParams = this.GetKeywordParams ('defaultcolor');\n        return ParameterConverter.StringToColor (colorParams);\n    }\n\n    GetEdgeSettings ()\n    {\n        let edgeSettingsParams = this.GetKeywordParams ('edgesettings');\n        return ParameterConverter.StringToEdgeSettings (edgeSettingsParams);\n    }\n\n    GetKeywordParams (keyword)\n    {\n        if (this.paramList === null || this.paramList.length === 0) {\n            return null;\n        }\n        let keywordToken = keyword + '=';\n        let urlParts = this.paramList.split (this.separator);\n        for (let i = 0; i < urlParts.length; i++) {\n            let urlPart = urlParts[i];\n            if (urlPart.startsWith (keywordToken)) {\n                return urlPart.substring (keywordToken.length);\n            }\n        }\n        return null;\n    }\n}\n\nexport function CreateUrlBuilder ()\n{\n    return new ParameterListBuilder ('$');\n}\n\nexport function CreateUrlParser (urlParams)\n{\n    return new ParameterListParser (urlParams, '$');\n}\n\nexport function CreateModelUrlParameters (urls)\n{\n    let builder = CreateUrlBuilder ();\n    builder.AddModelUrls (urls);\n    return builder.GetParameterList ();\n}\n", "import { RunTasksBatch } from '../core/taskrunner.js';\nimport { IsEqual } from '../geometry/geometry.js';\nimport { MaterialType } from '../model/material.js';\nimport { MeshInstanceId } from '../model/meshinstance.js';\nimport { GetMeshType, MeshType } from '../model/meshutils.js';\nimport { ConvertColorToThreeColor, GetShadingType, ShadingType } from './threeutils.js';\n\nexport class ModelToThreeConversionParams\n{\n\tconstructor ()\n\t{\n\t\tthis.forceMediumpForMaterials = false;\n\t}\n}\n\nexport class ModelToThreeConversionOutput\n{\n\tconstructor ()\n\t{\n\t\tthis.defaultMaterial = null;\n\t}\n}\n\nexport class ThreeConversionStateHandler\n{\n\tconstructor (callbacks)\n\t{\n\t\tthis.callbacks = callbacks;\n\t\tthis.texturesNeeded = 0;\n\t\tthis.texturesLoaded = 0;\n\t\tthis.threeObject = null;\n\t}\n\n\tOnTextureNeeded ()\n\t{\n\t\tthis.texturesNeeded += 1;\n\t}\n\n\tOnTextureLoaded ()\n\t{\n\t\tthis.texturesLoaded += 1;\n\t\tthis.callbacks.onTextureLoaded ();\n\t\tthis.Finish ();\n\t}\n\n\tOnModelLoaded (threeObject)\n\t{\n\t\tthis.threeObject = threeObject;\n\t\tthis.Finish ();\n\t}\n\n\tFinish ()\n\t{\n\t\tif (this.threeObject !== null && this.texturesNeeded === this.texturesLoaded) {\n\t\t\tthis.callbacks.onModelLoaded (this.threeObject);\n\t\t}\n\t}\n}\n\nexport class ThreeNodeTree\n{\n\tconstructor (rootNode, threeRootNode)\n\t{\n\t\tthis.meshInstances = [];\n\t\tthis.AddNode (rootNode, threeRootNode);\n\t}\n\n\tAddNode (node, threeNode)\n\t{\n\t\tlet matrix = node.GetTransformation ().GetMatrix ();\n\t\tlet threeMatrix = new THREE.Matrix4 ().fromArray (matrix.Get ());\n\t\tthreeNode.applyMatrix4 (threeMatrix);\n\n\t\tfor (let childNode of node.GetChildNodes ()) {\n\t\t\tlet threeChildNode = new THREE.Object3D ();\n\t\t\tthreeNode.add (threeChildNode);\n\t\t\tthis.AddNode (childNode, threeChildNode);\n\t\t}\n\t\tfor (let meshIndex of node.GetMeshIndices ()) {\n\t\t\tthis.meshInstances.push ({\n\t\t\t\tnode : node,\n\t\t\t\tthreeNode : threeNode,\n\t\t\t\tmeshIndex : meshIndex\n\t\t\t});\n\t\t}\n\t}\n\n\tGetMeshInstances ()\n\t{\n\t\treturn this.meshInstances;\n\t}\n}\n\nexport function ConvertModelToThreeObject (model, params, output, callbacks)\n{\n\tfunction CreateThreeMaterial (stateHandler, model, materialIndex, shadingType, params, output)\n\t{\n\t\tfunction SetTextureParameters (texture, threeTexture)\n\t\t{\n\t\t\tthreeTexture.wrapS = THREE.RepeatWrapping;\n\t\t\tthreeTexture.wrapT = THREE.RepeatWrapping;\n\t\t\tthreeTexture.rotation = texture.rotation;\n\t\t\tthreeTexture.offset.x = texture.offset.x;\n\t\t\tthreeTexture.offset.y = texture.offset.y;\n\t\t\tthreeTexture.repeat.x = texture.scale.x;\n\t\t\tthreeTexture.repeat.y = texture.scale.y;\n\t\t}\n\n\t\tfunction LoadTexture (stateHandler, threeMaterial, texture, onTextureLoaded)\n\t\t{\n\t\t\tif (texture === null || !texture.IsValid ()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlet loader = new THREE.TextureLoader ();\n\t\t\tstateHandler.OnTextureNeeded ();\n\t\t\tloader.load (texture.url,\n\t\t\t\t(threeTexture) => {\n\t\t\t\t\tSetTextureParameters (texture, threeTexture);\n\t\t\t\t\tthreeMaterial.needsUpdate = true;\n\t\t\t\t\tonTextureLoaded (threeTexture);\n\t\t\t\t\tstateHandler.OnTextureLoaded ();\n\t\t\t\t},\n\t\t\t\tnull,\n\t\t\t\t(err) => {\n\t\t\t\t\tstateHandler.OnTextureLoaded ();\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t\tlet material = model.GetMaterial (materialIndex);\n\t\tlet baseColor = ConvertColorToThreeColor (material.color);\n\t\tif (material.vertexColors) {\n\t\t\tbaseColor.setRGB (1.0, 1.0, 1.0);\n\t\t}\n\n\t\tlet materialParams = {\n\t\t\tcolor : baseColor,\n\t\t\tvertexColors : material.vertexColors,\n\t\t\topacity : material.opacity,\n\t\t\ttransparent : material.transparent,\n\t\t\talphaTest : material.alphaTest,\n\t\t\tside : THREE.DoubleSide\n\t\t};\n\n\t\tif (params.forceMediumpForMaterials) {\n\t\t\tmaterialParams.precision = 'mediump';\n\t\t}\n\n\t\tlet threeMaterial = null;\n\t\tif (shadingType === ShadingType.Phong) {\n\t\t\tthreeMaterial = new THREE.MeshPhongMaterial (materialParams);\n\t\t\tif (material.type === MaterialType.Phong) {\n\t\t\t\tlet specularColor = ConvertColorToThreeColor (material.specular);\n\t\t\t\tif (IsEqual (material.shininess, 0.0)) {\n\t\t\t\t\tspecularColor.setRGB (0.0, 0.0, 0.0);\n\t\t\t\t}\n\t\t\t\tthreeMaterial.specular = specularColor;\n\t\t\t\tthreeMaterial.shininess = material.shininess * 100.0;\n\t\t\t\tLoadTexture (stateHandler, threeMaterial, material.specularMap, (threeTexture) => {\n\t\t\t\t\tthreeMaterial.specularMap = threeTexture;\n\t\t\t\t});\n\t\t\t}\n\t\t} else if (shadingType === ShadingType.Physical) {\n\t\t\tthreeMaterial = new THREE.MeshStandardMaterial (materialParams);\n\t\t\tif (material.type === MaterialType.Physical) {\n\t\t\t\tthreeMaterial.metalness = material.metalness;\n\t\t\t\tthreeMaterial.roughness = material.roughness;\n\t\t\t\tLoadTexture (stateHandler, threeMaterial, material.metalnessMap, (threeTexture) => {\n\t\t\t\t\tthreeMaterial.metalness = 1.0;\n\t\t\t\t\tthreeMaterial.roughness = 1.0;\n\t\t\t\t\tthreeMaterial.metalnessMap = threeTexture;\n\t\t\t\t\tthreeMaterial.roughnessMap = threeTexture;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tlet emissiveColor = ConvertColorToThreeColor (material.emissive);\n\t\tthreeMaterial.emissive = emissiveColor;\n\n\t\tLoadTexture (stateHandler, threeMaterial, material.diffuseMap, (threeTexture) => {\n\t\t\tif (!material.multiplyDiffuseMap) {\n\t\t\t\tthreeMaterial.color.setRGB (1.0, 1.0, 1.0);\n\t\t\t}\n\t\t\tthreeMaterial.map = threeTexture;\n\t\t});\n\t\tLoadTexture (stateHandler, threeMaterial, material.bumpMap, (threeTexture) => {\n\t\t\tthreeMaterial.bumpMap = threeTexture;\n\t\t});\n\t\tLoadTexture (stateHandler, threeMaterial, material.normalMap, (threeTexture) => {\n\t\t\tthreeMaterial.normalMap = threeTexture;\n\t\t});\n\t\tLoadTexture (stateHandler, threeMaterial, material.emissiveMap, (threeTexture) => {\n\t\t\tthreeMaterial.emissiveMap = threeTexture;\n\t\t});\n\n\t\tif (material.isDefault) {\n\t\t\toutput.defaultMaterial = threeMaterial;\n\t\t}\n\n\t\treturn threeMaterial;\n\t}\n\n\tfunction CreateThreeMesh (model, meshInstanceId, modelThreeMaterials)\n\t{\n\t\tlet mesh = model.GetMesh (meshInstanceId.meshIndex);\n\t\tlet triangleCount = mesh.TriangleCount ();\n\n\t\tlet triangleIndices = [];\n\t\tfor (let i = 0; i < triangleCount; i++) {\n\t\t\ttriangleIndices.push (i);\n\t\t}\n\t\ttriangleIndices.sort ((a, b) => {\n\t\t\tlet aTriangle = mesh.GetTriangle (a);\n\t\t\tlet bTriangle = mesh.GetTriangle (b);\n\t\t\treturn aTriangle.mat - bTriangle.mat;\n\t\t});\n\n\t\tlet threeGeometry = new THREE.BufferGeometry ();\n\t\tlet meshThreeMaterials = [];\n\t\tlet meshOriginalMaterials = [];\n\t\tlet modelToThreeMaterials = new Map ();\n\n\t\tlet vertices = [];\n\t\tlet vertexColors = [];\n\t\tlet normals = [];\n\t\tlet uvs = [];\n\n\t\tlet groups = [];\n\t\tgroups.push ({\n\t\t\tstart : 0,\n\t\t\tend : -1\n\t\t});\n\n\t\tlet meshHasVertexColors = (mesh.VertexColorCount () > 0);\n\t\tlet meshHasUVs = (mesh.TextureUVCount () > 0);\n\t\tfor (let i = 0; i < triangleIndices.length; i++) {\n\t\t\tlet triangleIndex = triangleIndices[i];\n\t\t\tlet triangle = mesh.GetTriangle (triangleIndex);\n\n\t\t\tlet v0 = mesh.GetVertex (triangle.v0);\n\t\t\tlet v1 = mesh.GetVertex (triangle.v1);\n\t\t\tlet v2 = mesh.GetVertex (triangle.v2);\n\t\t\tvertices.push (v0.x, v0.y, v0.z, v1.x, v1.y, v1.z, v2.x, v2.y, v2.z);\n\n\t\t\tif (triangle.HasVertexColors ()) {\n\t\t\t\tlet vc0 = ConvertColorToThreeColor (mesh.GetVertexColor (triangle.c0));\n\t\t\t\tlet vc1 = ConvertColorToThreeColor (mesh.GetVertexColor (triangle.c1));\n\t\t\t\tlet vc2 = ConvertColorToThreeColor (mesh.GetVertexColor (triangle.c2));\n\t\t\t\tvertexColors.push (\n\t\t\t\t\tvc0.r, vc0.g, vc0.b,\n\t\t\t\t\tvc1.r, vc1.g, vc1.b,\n\t\t\t\t\tvc2.r, vc2.g, vc2.b\n\t\t\t\t);\n\t\t\t} else if (meshHasVertexColors) {\n\t\t\t\tvertexColors.push (\n\t\t\t\t\t0.0, 0.0, 0.0,\n\t\t\t\t\t0.0, 0.0, 0.0,\n\t\t\t\t\t0.0, 0.0, 0.0\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tlet n0 = mesh.GetNormal (triangle.n0);\n\t\t\tlet n1 = mesh.GetNormal (triangle.n1);\n\t\t\tlet n2 = mesh.GetNormal (triangle.n2);\n\t\t\tnormals.push (n0.x, n0.y, n0.z, n1.x, n1.y, n1.z, n2.x, n2.y, n2.z);\n\n\t\t\tif (triangle.HasTextureUVs ()) {\n\t\t\t\tlet u0 = mesh.GetTextureUV (triangle.u0);\n\t\t\t\tlet u1 = mesh.GetTextureUV (triangle.u1);\n\t\t\t\tlet u2 = mesh.GetTextureUV (triangle.u2);\n\t\t\t\tuvs.push (u0.x, u0.y, u1.x, u1.y, u2.x, u2.y);\n\t\t\t} else if (meshHasUVs) {\n\t\t\t\tuvs.push (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);\n\t\t\t}\n\n\t\t\tlet modelMaterialIndex = triangle.mat;\n\t\t\tif (!modelToThreeMaterials.has (modelMaterialIndex)) {\n\t\t\t\tmodelToThreeMaterials.set (modelMaterialIndex, meshThreeMaterials.length);\n\t\t\t\tmeshThreeMaterials.push (modelThreeMaterials[modelMaterialIndex]);\n\t\t\t\tmeshOriginalMaterials.push (modelMaterialIndex);\n\t\t\t\tif (i > 0) {\n\t\t\t\t\tgroups[groups.length - 1].end = i - 1;\n\t\t\t\t\tgroups.push ({\n\t\t\t\t\t\tstart : groups[groups.length - 1].end + 1,\n\t\t\t\t\t\tend : -1\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tgroups[groups.length - 1].end = triangleCount - 1;\n\n\t\tthreeGeometry.setAttribute ('position', new THREE.Float32BufferAttribute (vertices, 3));\n\t\tif (vertexColors.length !== 0) {\n\t\t\tthreeGeometry.setAttribute ('color', new THREE.Float32BufferAttribute (vertexColors, 3));\n\t\t}\n\t\tthreeGeometry.setAttribute ('normal', new THREE.Float32BufferAttribute (normals, 3));\n\t\tif (uvs.length !== 0) {\n\t\t\tthreeGeometry.setAttribute ('uv', new THREE.Float32BufferAttribute (uvs, 2));\n\t\t}\n\t\tfor (let i = 0; i < groups.length; i++) {\n\t\t\tlet group = groups[i];\n\t\t\tthreeGeometry.addGroup (group.start * 3, (group.end - group.start + 1) * 3, i);\n\t\t}\n\n\t\tlet threeMesh = new THREE.Mesh (threeGeometry, meshThreeMaterials);\n\t\tthreeMesh.userData = {\n\t\t\toriginalMeshId : meshInstanceId,\n\t\t\toriginalMaterials : meshOriginalMaterials,\n\t\t\tthreeMaterials : null\n\t\t};\n\n\t\treturn threeMesh;\n\t}\n\n\tfunction ConvertMesh (threeObject, model, meshInstanceId, modelThreeMaterials)\n\t{\n\t\tlet mesh = model.GetMesh (meshInstanceId.meshIndex);\n\t\tlet type = GetMeshType (mesh);\n\t\tif (type === MeshType.TriangleMesh) {\n\t\t\tlet threeMesh = CreateThreeMesh (model, meshInstanceId, modelThreeMaterials);\n\t\t\tthreeObject.add (threeMesh);\n\t\t}\n\t}\n\n\tfunction ConvertNodeHierarchy (threeRootNode, model, modelThreeMaterials, stateHandler)\n\t{\n\t\tlet rootNode = model.GetRootNode ();\n\t\tlet nodeTree = new ThreeNodeTree (rootNode, threeRootNode);\n\t\tlet meshInstances = nodeTree.GetMeshInstances ();\n\n\t\tRunTasksBatch (meshInstances.length, 100, {\n\t\t\trunTask : (firstMeshInstanceIndex, lastMeshInstanceIndex, onReady) => {\n\t\t\t\tfor (let meshInstanceIndex = firstMeshInstanceIndex; meshInstanceIndex <= lastMeshInstanceIndex; meshInstanceIndex++) {\n\t\t\t\t\tlet meshInstance = meshInstances[meshInstanceIndex];\n\t\t\t\t\tlet node = meshInstance.node;\n\t\t\t\t\tlet threeNode = meshInstance.threeNode;\n\t\t\t\t\tlet meshInstanceId = new MeshInstanceId (node.GetId (), meshInstance.meshIndex);\n\t\t\t\t\tConvertMesh (threeNode, model, meshInstanceId, modelThreeMaterials);\n\t\t\t\t}\n\t\t\t\tonReady ();\n\t\t\t},\n\t\t\tonReady : () => {\n\t\t\t\tstateHandler.OnModelLoaded (threeRootNode);\n\t\t\t}\n\t\t});\n\t}\n\n\tlet stateHandler = new ThreeConversionStateHandler (callbacks);\n\tlet shadingType = GetShadingType (model);\n\n\tlet modelThreeMaterials = [];\n\tfor (let materialIndex = 0; materialIndex < model.MaterialCount (); materialIndex++) {\n\t\tlet threeMaterial = CreateThreeMaterial (stateHandler, model, materialIndex, shadingType, params, output);\n\t\tmodelThreeMaterials.push (threeMaterial);\n\t}\n\n\tlet threeObject = new THREE.Object3D ();\n\tConvertNodeHierarchy (threeObject, model, modelThreeMaterials, stateHandler);\n}\n", "import { Importer } from '../import/importer.js';\nimport { ConvertModelToThreeObject, ModelToThreeConversionOutput, ModelToThreeConversionParams } from './threeconverter.js';\nimport { ConvertColorToThreeColor, HasHighpDriverIssue } from './threeutils.js';\n\nexport class ThreeModelLoader\n{\n    constructor ()\n    {\n        this.importer = new Importer ();\n        this.inProgress = false;\n        this.defaultMaterial = null;\n        this.hasHighpDriverIssue = HasHighpDriverIssue ();\n    }\n\n    InProgress ()\n    {\n        return this.inProgress;\n    }\n\n    LoadModel (files, fileSource, settings, callbacks)\n    {\n        if (this.inProgress) {\n            return;\n        }\n\n        this.inProgress = true;\n        callbacks.onLoadStart ();\n        this.importer.ImportFiles (files, fileSource, settings, {\n            onFilesLoaded : () => {\n                callbacks.onImportStart ();\n            },\n            onSelectMainFile : (fileNames, selectFile) => {\n                if (!callbacks.onSelectMainFile) {\n                    selectFile (0);\n                } else {\n                    callbacks.onSelectMainFile (fileNames, selectFile);\n                }\n            },\n            onImportSuccess : (importResult) => {\n                callbacks.onVisualizationStart ();\n                let params = new ModelToThreeConversionParams ();\n                params.forceMediumpForMaterials = this.hasHighpDriverIssue;\n                let output = new ModelToThreeConversionOutput ();\n                ConvertModelToThreeObject (importResult.model, params, output, {\n                    onTextureLoaded : () => {\n                        callbacks.onTextureLoaded ();\n                    },\n                    onModelLoaded : (threeObject) => {\n                        this.defaultMaterial = output.defaultMaterial;\n                        callbacks.onModelFinished (importResult, threeObject);\n                        this.inProgress = false;\n                    }\n                });\n            },\n            onImportError : (importError) => {\n                callbacks.onLoadError (importError);\n                this.inProgress = false;\n            }\n        });\n    }\n\n    GetImporter ()\n    {\n        return this.importer;\n    }\n\n    GetDefaultMaterial ()\n    {\n        return this.defaultMaterial;\n    }\n\n    ReplaceDefaultMaterialColor (defaultColor)\n    {\n        if (this.defaultMaterial !== null && !this.defaultMaterial.vertexColors) {\n            this.defaultMaterial.color = ConvertColorToThreeColor (defaultColor);\n        }\n    }\n}\n", "import { IsDefined } from '../core/core.js';\nimport { ImportErrorCode, ImportSettings } from '../import/importer.js';\nimport { FileSource, TransformFileHostUrls } from '../io/fileutils.js';\nimport { ParameterConverter } from '../parameters/parameterlist.js';\nimport { ThreeModelLoader } from '../threejs/threemodelloader.js';\nimport { Viewer } from './viewer.js';\n\nexport class EmbeddedViewer\n{\n    constructor (parentElement, parameters)\n    {\n        this.parentElement = parentElement;\n        this.parameters = {};\n        if (IsDefined (parameters)) {\n            this.parameters = parameters;\n        }\n\n        this.canvas = document.createElement ('canvas');\n        this.parentElement.appendChild (this.canvas);\n\n        this.viewer = new Viewer ();\n        this.viewer.Init (this.canvas);\n\n        let width = this.parentElement.clientWidth;\n        let height = this.parentElement.clientHeight;\n        this.viewer.Resize (width, height);\n\n        if (this.parameters.backgroundColor) {\n            this.viewer.SetBackgroundColor (this.parameters.backgroundColor);\n        }\n\n        if (this.parameters.edgeSettings) {\n            this.viewer.SetEdgeSettings (\n                this.parameters.edgeSettings.showEdges,\n                this.parameters.edgeSettings.edgeColor,\n                this.parameters.edgeSettings.edgeThreshold\n            );\n        }\n\n        if (this.parameters.environmentMap) {\n            this.viewer.SetEnvironmentMap (this.parameters.environmentMap);\n        }\n\n        window.addEventListener ('resize', () => {\n            this.Resize ();\n        });\n    }\n\n    LoadModelFromUrls (modelUrls)\n    {\n        this.viewer.Clear ();\n\n        if (modelUrls === null || modelUrls.length === 0) {\n            return null;\n        }\n        TransformFileHostUrls (modelUrls);\n\n        let settings = new ImportSettings ();\n        if (this.parameters.defaultColor) {\n            settings.defaultColor = this.parameters.defaultColor;\n        }\n\n        let progressDiv = null;\n        let loader = new ThreeModelLoader ();\n        loader.LoadModel (modelUrls, FileSource.Url, settings, {\n            onLoadStart : () => {\n                this.canvas.style.display = 'none';\n                progressDiv = document.createElement ('div');\n                progressDiv.innerHTML = 'Loading model...';\n                this.parentElement.appendChild (progressDiv);\n            },\n            onImportStart : () => {\n                progressDiv.innerHTML = 'Importing model...';\n            },\n            onVisualizationStart : () => {\n                progressDiv.innerHTML = 'Visualizing model...';\n            },\n            onModelFinished : (importResult, threeObject) => {\n                this.parentElement.removeChild (progressDiv);\n                this.canvas.style.display = 'inherit';\n                this.viewer.SetMainObject (threeObject);\n                let boundingSphere = this.viewer.GetBoundingSphere ((meshUserData) => {\n                    return true;\n                });\n                this.viewer.AdjustClippingPlanesToSphere (boundingSphere);\n                if (this.parameters.camera) {\n                    this.viewer.SetCamera (this.parameters.camera);\n                } else {\n                    this.viewer.SetUpVector (importResult.upVector, false);\n                }\n                this.viewer.FitSphereToWindow (boundingSphere, false);\n            },\n            onTextureLoaded : () => {\n                this.viewer.Render ();\n            },\n            onLoadError : (importError) => {\n                let message = 'Unknown error';\n                if (importError.code === ImportErrorCode.NoImportableFile) {\n                    message = 'No importable file found';\n                } else if (importError.code === ImportErrorCode.FailedToLoadFile) {\n                    message = 'Failed to load file for import.';\n                } else if (importError.code === ImportErrorCode.ImportFailed) {\n                    message = 'Failed to import model.';\n                }\n                if (importError.message !== null) {\n                    message += ' (' + importError.message + ')';\n                }\n                progressDiv.innerHTML = message;\n            }\n        });\n    }\n\n    GetViewer ()\n    {\n        return this.viewer;\n    }\n\n    Resize ()\n    {\n        let width = this.parentElement.clientWidth;\n        let height = this.parentElement.clientHeight;\n        this.viewer.Resize (width, height);\n    }\n}\n\nexport function Init3DViewerElement (parentElement, modelUrls, parameters)\n{\n    let viewer = new EmbeddedViewer (parentElement, parameters);\n    viewer.LoadModelFromUrls (modelUrls);\n    return viewer;\n}\n\nexport function Init3DViewerElements (onReady)\n{\n    function LoadElement (element)\n    {\n        let camera = null;\n        let cameraParams = element.getAttribute ('camera');\n        if (cameraParams) {\n            camera = ParameterConverter.StringToCamera (cameraParams);\n        }\n\n        let backgroundColor = null;\n        let backgroundColorParams = element.getAttribute ('backgroundcolor');\n        if (backgroundColorParams) {\n            backgroundColor = ParameterConverter.StringToColor (backgroundColorParams);\n        }\n\n        let defaultColor = null;\n        let defaultColorParams = element.getAttribute ('defaultcolor');\n        if (defaultColorParams) {\n            defaultColor = ParameterConverter.StringToColor (defaultColorParams);\n        }\n\n        let edgeSettings = null;\n        let edgeSettingsParams = element.getAttribute ('edgesettings');\n        if (edgeSettingsParams) {\n            edgeSettings = ParameterConverter.StringToEdgeSettings (edgeSettingsParams);\n        }\n\n        let environmentMap = null;\n        let environmentMapParams = element.getAttribute ('environmentmap');\n        if (environmentMapParams) {\n            let environmentMapParts = environmentMapParams.split (',');\n            if (environmentMapParts.length === 6) {\n                environmentMap = environmentMapParts;\n            }\n        }\n\n        let modelUrls = null;\n        let modelParams = element.getAttribute ('model');\n        if (modelParams) {\n            modelUrls = ParameterConverter.StringToModelUrls (modelParams);\n        }\n\n        return Init3DViewerElement (element, modelUrls, {\n            camera : camera,\n            backgroundColor : backgroundColor,\n            defaultColor : defaultColor,\n            edgeSettings : edgeSettings,\n            environmentMap : environmentMap\n        });\n    }\n\n    let viewerElements = [];\n    window.addEventListener ('load', () => {\n        let elements = document.getElementsByClassName ('online_3d_viewer');\n        for (let i = 0; i < elements.length; i++) {\n            let element = elements[i];\n            let viewerElement = LoadElement (element);\n            viewerElements.push (viewerElement);\n        }\n        if (onReady !== undefined && onReady !== null) {\n            onReady (viewerElements);\n        }\n    });\n}\n", "import { CoordDistance3D, CrossVector3D, DotVector3D } from '../geometry/coord3d.js';\n\nexport function GetTriangleArea (v0, v1, v2)\n{\n    const a = CoordDistance3D (v0, v1);\n    const b = CoordDistance3D (v1, v2);\n    const c = CoordDistance3D (v0, v2);\n    const s = (a + b + c) / 2.0;\n    const areaSquare = s * (s - a) * (s - b) * (s - c);\n    if (areaSquare < 0.0) {\n        return 0.0;\n    }\n    return Math.sqrt (areaSquare);\n}\n\nexport function GetTetrahedronSignedVolume (v0, v1, v2)\n{\n    return DotVector3D (v0, CrossVector3D (v1, v2)) / 6.0;\n}\n\nexport function CalculateVolume (object3D)\n{\n    let volume = 0.0;\n    object3D.EnumerateTriangleVertices ((v0, v1, v2) => {\n        volume += GetTetrahedronSignedVolume (v0, v1, v2);\n    });\n    return volume;\n}\n\nexport function CalculateSurfaceArea (object3D)\n{\n    let surface = 0.0;\n    object3D.EnumerateTriangleVertices ((v0, v1, v2) => {\n        surface += GetTriangleArea (v0, v1, v2);\n    });\n    return surface;\n}\n", "import { Coord2D, CoordIsEqual2D } from '../geometry/coord2d.js';\nimport { CoordIsEqual3D } from '../geometry/coord3d.js';\nimport { Color, ColorIsEqual } from './color.js';\n\nexport class MeshPrimitiveBuffer\n{\n    constructor ()\n    {\n        this.indices = [];\n        this.vertices = [];\n        this.colors = [];\n        this.normals = [];\n        this.uvs = [];\n        this.material = null;\n    }\n\n    GetBounds ()\n    {\n        let min = [Infinity, Infinity, Infinity];\n        let max = [-Infinity, -Infinity, -Infinity];\n        for (let i = 0; i < this.vertices.length / 3; i++) {\n            for (let j = 0; j < 3; j++) {\n                min[j] = Math.min (min[j], this.vertices[i * 3 + j]);\n                max[j] = Math.max (max[j], this.vertices[i * 3 + j]);\n            }\n        }\n        return {\n            min : min,\n            max : max\n        };\n    }\n\n    GetByteLength (indexTypeSize, numberTypeSize)\n    {\n        let indexCount = this.indices.length;\n        let numberCount = this.vertices.length + this.colors.length + this.normals.length + this.uvs.length;\n        return indexCount * indexTypeSize + numberCount * numberTypeSize;\n    }\n}\n\nexport class MeshBuffer\n{\n    constructor ()\n    {\n        this.primitives = [];\n    }\n\n    PrimitiveCount ()\n    {\n        return this.primitives.length;\n    }\n\n    GetPrimitive (index)\n    {\n        return this.primitives[index];\n    }\n\n    GetByteLength (indexTypeSize, numberTypeSize)\n    {\n        let byteLength = 0;\n        for (let i = 0; i < this.primitives.length; i++) {\n            let primitive = this.primitives[i];\n            byteLength += primitive.GetByteLength (indexTypeSize, numberTypeSize);\n        }\n        return byteLength;\n    }\n}\n\nexport function ConvertMeshToMeshBuffer (mesh)\n{\n    function AddVertexToPrimitiveBuffer (mesh, indices, primitiveBuffer, meshVertexToPrimitiveVertices)\n    {\n        function GetColorOrDefault (mesh, colorIndex, forceColors)\n        {\n            if (colorIndex !== null) {\n                return mesh.GetVertexColor (colorIndex);\n            } else if (forceColors) {\n                return new Color (0, 0, 0);\n            } else {\n                return null;\n            }\n        }\n\n        function GetUVOrDefault (mesh, uvIndex, forceUVs)\n        {\n            if (uvIndex !== null) {\n                return mesh.GetTextureUV (uvIndex);\n            } else if (forceUVs) {\n                return new Coord2D (0.0, 0.0);\n            } else {\n                return null;\n            }\n        }\n\n        function AddVertex (mesh, indices, primitiveBuffer)\n        {\n            let forceColors = mesh.VertexColorCount () > 0;\n            let forceUVs = mesh.TextureUVCount () > 0;\n\n            let vertex = mesh.GetVertex (indices.vertex);\n            let normal = mesh.GetNormal (indices.normal);\n\n            let primitiveVertexIndex = primitiveBuffer.vertices.length / 3;\n            primitiveBuffer.indices.push (primitiveVertexIndex);\n            primitiveBuffer.vertices.push (vertex.x, vertex.y, vertex.z);\n\n            let color = GetColorOrDefault (mesh, indices.color, forceColors);\n            if (color !== null) {\n                primitiveBuffer.colors.push (color.r / 255.0, color.g / 255.0, color.b / 255.0);\n            }\n\n            primitiveBuffer.normals.push (normal.x, normal.y, normal.z);\n\n            let uv = GetUVOrDefault (mesh, indices.uv, forceUVs);\n            if (uv !== null) {\n                primitiveBuffer.uvs.push (uv.x, uv.y);\n            }\n\n            return {\n                index : primitiveVertexIndex,\n                color : color,\n                normal : normal,\n                uv : uv\n            };\n        }\n\n        function FindMatchingPrimitiveVertex (mesh, primitiveVertices, indices)\n        {\n            function IsEqualColor (mesh, colorIndex, existingColor)\n            {\n                if (existingColor === null && colorIndex === null) {\n                    return true;\n                }\n                let color = GetColorOrDefault (mesh, colorIndex, true);\n                return ColorIsEqual (existingColor, color);\n            }\n\n            function IsEqualNormal (mesh, normalIndex, existingNormal)\n            {\n                let normal = mesh.GetNormal (normalIndex);\n                return CoordIsEqual3D (existingNormal, normal);\n            }\n\n            function IsEqualUV (mesh, uvIndex, existingUv)\n            {\n                if (existingUv === null && uvIndex === null) {\n                    return true;\n                }\n                let uv = GetUVOrDefault (mesh, uvIndex, true);\n                return CoordIsEqual2D (existingUv, uv);\n            }\n\n            for (let i = 0; i < primitiveVertices.length; i++) {\n                let primitiveVertex = primitiveVertices[i];\n                let equalColor = IsEqualColor (mesh, indices.color, primitiveVertex.color);\n                let equalNormal = IsEqualNormal (mesh, indices.normal, primitiveVertex.normal);\n                let equalUv = IsEqualUV (mesh, indices.uv, primitiveVertex.uv);\n                if (equalColor && equalNormal && equalUv) {\n                    return primitiveVertex;\n                }\n            }\n            return null;\n        }\n\n        if (meshVertexToPrimitiveVertices.has (indices.vertex)) {\n            let primitiveVertices = meshVertexToPrimitiveVertices.get (indices.vertex);\n            let existingPrimitiveVertex = FindMatchingPrimitiveVertex (mesh, primitiveVertices, indices);\n            if (existingPrimitiveVertex !== null) {\n                primitiveBuffer.indices.push (existingPrimitiveVertex.index);\n            } else {\n                let primitiveVertex = AddVertex (mesh, indices, primitiveBuffer);\n                primitiveVertices.push (primitiveVertex);\n            }\n        } else {\n            let primitiveVertex = AddVertex (mesh, indices, primitiveBuffer);\n            meshVertexToPrimitiveVertices.set (indices.vertex, [primitiveVertex]);\n        }\n    }\n\n    let meshBuffer = new MeshBuffer ();\n\n    let triangleCount = mesh.TriangleCount ();\n    if (triangleCount === 0) {\n        return null;\n    }\n\n    let triangleIndices = [];\n    for (let i = 0; i < triangleCount; i++) {\n        triangleIndices.push (i);\n    }\n    triangleIndices.sort ((a, b) => {\n        let aTriangle = mesh.GetTriangle (a);\n        let bTriangle = mesh.GetTriangle (b);\n        return aTriangle.mat - bTriangle.mat;\n    });\n\n    let primitiveBuffer = null;\n    let meshVertexToPrimitiveVertices = null;\n    for (let i = 0; i < triangleIndices.length; i++) {\n        let triangleIndex = triangleIndices[i];\n        let triangle = mesh.GetTriangle (triangleIndex);\n        if (primitiveBuffer === null || primitiveBuffer.material !== triangle.mat) {\n            primitiveBuffer = new MeshPrimitiveBuffer ();\n            primitiveBuffer.material = triangle.mat;\n            meshVertexToPrimitiveVertices = new Map ();\n            meshBuffer.primitives.push (primitiveBuffer);\n        }\n        let v0Indices = {\n            vertex : triangle.v0,\n            color : triangle.c0,\n            normal : triangle.n0,\n            uv : triangle.u0\n        };\n        let v1Indices = {\n            vertex : triangle.v1,\n            color : triangle.c1,\n            normal : triangle.n1,\n            uv : triangle.u1\n        };\n        let v2Indices = {\n            vertex : triangle.v2,\n            color : triangle.c2,\n            normal : triangle.n2,\n            uv : triangle.u2\n        };\n\n        AddVertexToPrimitiveBuffer (mesh, v0Indices, primitiveBuffer, meshVertexToPrimitiveVertices);\n        AddVertexToPrimitiveBuffer (mesh, v1Indices, primitiveBuffer, meshVertexToPrimitiveVertices);\n        AddVertexToPrimitiveBuffer (mesh, v2Indices, primitiveBuffer, meshVertexToPrimitiveVertices);\n    }\n\n    return meshBuffer;\n}\n", "import { ArrayBufferToUtf8String, Utf8StringToArrayBuffer } from '../io/bufferutils.js';\n\nexport class ExportedFile\n{\n\tconstructor (name)\n\t{\n\t\tthis.name = name;\n\t\tthis.content = null;\n\t}\n\n\tGetName ()\n\t{\n\t\treturn this.name;\n\t}\n\n\tSetName (name)\n\t{\n\t\tthis.name = name;\n\t}\n\n\tGetTextContent ()\n\t{\n\t\tlet text = ArrayBufferToUtf8String (this.content);\n\t\treturn text;\n\t}\n\n\tGetBufferContent ()\n\t{\n\t\treturn this.content;\n\t}\n\n\tSetTextContent (content)\n\t{\n\t\tlet buffer = Utf8StringToArrayBuffer (content);\n\t\tthis.content = buffer;\n\t}\n\n\tSetBufferContent (content)\n\t{\n\t\tthis.content = content;\n\t}\n}\n\nexport class ExporterBase\n{\n    constructor ()\n    {\n\n    }\n\n    CanExport (format, extension)\n    {\n        return false;\n    }\n\n\tExport (exporterModel, format, onFinish)\n\t{\n\t\tlet files = [];\n\t\tthis.ExportContent (exporterModel, format, files, () => {\n\t\t\tonFinish (files);\n\t\t});\n\t}\n\n\tExportContent (exporterModel, format, files, onFinish)\n\t{\n\n\t}\n\n\tGetExportedMaterialName (originalName)\n\t{\n\t\treturn this.GetExportedName (originalName, 'Material');\n\t}\n\n\tGetExportedMeshName (originalName)\n\t{\n\t\treturn this.GetExportedName (originalName, 'Mesh');\n\t}\n\n\tGetExportedName (originalName, defaultName)\n\t{\n\t\tif (originalName.length === 0) {\n\t\t\treturn defaultName;\n\t\t}\n\t\treturn originalName;\n\t}\n}\n", "import { LoadExternalLibrary } from '../io/externallibs.js';\nimport { FileFormat } from '../io/fileutils.js';\nimport { MaterialType } from '../model/material.js';\nimport { ConvertMeshToMeshBuffer } from '../model/meshbuffer.js';\nimport { ExportedFile, ExporterBase } from './exporterbase.js';\n\nexport class Exporter3dm extends ExporterBase\n{\n\tconstructor ()\n\t{\n\t\tsuper ();\n        this.rhino = null;\n\t}\n\n    CanExport (format, extension)\n    {\n        return format === FileFormat.Binary && extension === '3dm';\n    }\n\n\tExportContent (exporterModel, format, files, onFinish)\n\t{\n\t\tif (this.rhino === null) {\n\t\t\tLoadExternalLibrary ('loaders/rhino3dm.min.js').then (() => {\n                rhino3dm ().then ((rhino) => {\n                    this.rhino = rhino;\n                    this.ExportRhinoContent (exporterModel, files, onFinish);\n                });\n            }).catch (() => {\n                onFinish ();\n            });\n\t\t} else {\n\t\t\tthis.ExportRhinoContent (exporterModel, files, onFinish);\n\t\t}\n\t}\n\n    ExportRhinoContent (exporterModel, files, onFinish)\n    {\n        function ColorToRhinoColor (color)\n        {\n            return {\n                r : color.r,\n                g : color.g,\n                b : color.b,\n                a : 255\n            };\n        }\n\n\t\tlet rhinoFile = new ExportedFile ('model.3dm');\n\t\tfiles.push (rhinoFile);\n\n        let rhinoDoc = new this.rhino.File3dm ();\n        exporterModel.EnumerateTransformedMeshes ((mesh) => {\n            let meshBuffer = ConvertMeshToMeshBuffer (mesh);\n            for (let primitiveIndex = 0; primitiveIndex < meshBuffer.PrimitiveCount (); primitiveIndex++) {\n                let primitive = meshBuffer.GetPrimitive (primitiveIndex);\n                let threeJson = {\n                    data : {\n                        attributes : {\n                            position : {\n                                itemSize : 3,\n                                type : 'Float32Array',\n                                array : primitive.vertices\n                            },\n                            normal : {\n                                itemSize : 3,\n                                type : 'Float32Array',\n                                array : primitive.normals\n                            }\n                        },\n                        index : {\n                            type : 'Uint16Array',\n                            array : primitive.indices\n                        }\n                    }\n                };\n\n                let material = exporterModel.GetMaterial (primitive.material);\n                let rhinoMaterial = new this.rhino.Material ();\n                rhinoMaterial.name = this.GetExportedMaterialName (material.name);\n                if (material.type === MaterialType.Phong) {\n                    rhinoMaterial.ambientColor = ColorToRhinoColor (material.ambient);\n                    rhinoMaterial.specularColor = ColorToRhinoColor (material.specular);\n                }\n                rhinoMaterial.diffuseColor = ColorToRhinoColor (material.color);\n                rhinoMaterial.transparency = 1.0 - material.opacity;\n\n                let rhinoMaterialIndex = rhinoDoc.materials ().count ();\n                rhinoDoc.materials ().add (rhinoMaterial);\n\n                let rhinoMesh = new this.rhino.Mesh.createFromThreejsJSON (threeJson);\n                let rhinoAttributes = new this.rhino.ObjectAttributes ();\n                rhinoAttributes.name = this.GetExportedMeshName (mesh.GetName ());\n                rhinoAttributes.materialSource = this.rhino.ObjectMaterialSource.MaterialFromObject;\n                rhinoAttributes.materialIndex = rhinoMaterialIndex;\n                rhinoDoc.objects ().add (rhinoMesh, rhinoAttributes);\n            }\n        });\n\n        let writeOptions = new this.rhino.File3dmWriteOptions ();\n        writeOptions.version = 6;\n        let rhinoDocBuffer = rhinoDoc.toByteArray (writeOptions);\n\n        rhinoFile.SetBufferContent (rhinoDocBuffer);\n\t\tonFinish ();\n    }\n}\n", "import { BinaryWriter } from '../io/binarywriter.js';\nimport { Utf8StringToArrayBuffer } from '../io/bufferutils.js';\nimport { FileFormat, GetFileExtension, GetFileName } from '../io/fileutils.js';\nimport { Color, SRGBToLinear } from '../model/color.js';\nimport { MaterialType } from '../model/material.js';\nimport { ConvertMeshToMeshBuffer } from '../model/meshbuffer.js';\nimport { ExportedFile, ExporterBase } from './exporterbase.js';\n\nexport class ExporterGltf extends ExporterBase\n{\n\tconstructor ()\n\t{\n\t\tsuper ();\n        this.components = {\n            index : {\n                type : 5125, // unsigned int 32\n                size : 4\n            },\n            number : {\n                type : 5126, // float 32\n                size : 4\n            }\n        };\n\t}\n\n    CanExport (format, extension)\n    {\n        return (format === FileFormat.Text && extension === 'gltf') || (format === FileFormat.Binary && extension === 'glb');\n    }\n\n\tExportContent (exporterModel, format, files, onFinish)\n\t{\n        if (format === FileFormat.Text) {\n            this.ExportAsciiContent (exporterModel, files);\n        } else if (format === FileFormat.Binary) {\n            this.ExportBinaryContent (exporterModel, files);\n        }\n        onFinish ();\n\t}\n\n\tExportAsciiContent (exporterModel, files)\n\t{\n        let gltfFile = new ExportedFile ('model.gltf');\n        let binFile = new ExportedFile ('model.bin');\n        files.push (gltfFile);\n        files.push (binFile);\n\n        let meshDataArr = this.GetMeshData (exporterModel);\n        let mainBuffer = this.GetMainBuffer (meshDataArr);\n        let mainJson = this.GetMainJson (meshDataArr);\n        mainJson.buffers.push ({\n            uri : binFile.GetName (),\n            byteLength : mainBuffer.byteLength\n        });\n\n        let fileNameToIndex = new Map ();\n        this.ExportMaterials (exporterModel, mainJson, (texture) => {\n            let fileName = GetFileName (texture.name);\n            if (fileNameToIndex.has (fileName)) {\n                return fileNameToIndex.get (fileName);\n            } else {\n                let textureFile = new ExportedFile (fileName);\n                textureFile.SetBufferContent (texture.buffer);\n                files.push (textureFile);\n\n                let textureIndex = mainJson.textures.length;\n                fileNameToIndex.set (fileName, textureIndex);\n\n                mainJson.images.push ({\n                    uri : fileName\n                });\n\n                mainJson.textures.push ({\n                    source : textureIndex\n                });\n\n                return textureIndex;\n            }\n        });\n\n        gltfFile.SetTextContent (JSON.stringify (mainJson, null, 4));\n        binFile.SetBufferContent (mainBuffer);\n    }\n\n    ExportBinaryContent (exporterModel, files)\n    {\n        function AlignToBoundary (size)\n        {\n            let remainder = size % 4;\n            if (remainder === 0) {\n                return size;\n            }\n            return size + (4 - remainder);\n        }\n\n        function WriteCharacters (writer, char, count)\n        {\n            for (let i = 0; i < count; i++) {\n                writer.WriteUnsignedCharacter8 (char);\n            }\n        }\n\n        let glbFile = new ExportedFile ('model.glb');\n        files.push (glbFile);\n\n        let meshDataArr = this.GetMeshData (exporterModel);\n        let mainBuffer = this.GetMainBuffer (meshDataArr);\n        let mainJson = this.GetMainJson (meshDataArr);\n\n        let textureBuffers = [];\n        let textureOffset = mainBuffer.byteLength;\n\n        let fileNameToIndex = new Map ();\n        this.ExportMaterials (exporterModel, mainJson, (texture) => {\n            let fileName = GetFileName (texture.name);\n            let extension = GetFileExtension (texture.name);\n            if (fileNameToIndex.has (fileName)) {\n                return fileNameToIndex.get (fileName);\n            } else {\n                let bufferViewIndex = mainJson.bufferViews.length;\n                let textureIndex = mainJson.textures.length;\n                fileNameToIndex.set (fileName, textureIndex);\n                let textureBuffer = texture.buffer;\n                textureBuffers.push (textureBuffer);\n                mainJson.bufferViews.push ({\n                    buffer : 0,\n                    byteOffset : textureOffset,\n                    byteLength : textureBuffer.byteLength\n                });\n                textureOffset += textureBuffer.byteLength;\n                mainJson.images.push ({\n                    bufferView : bufferViewIndex,\n                    mimeType : 'image/' + extension\n                });\n                mainJson.textures.push ({\n                    source : textureIndex\n                });\n\n                return textureIndex;\n            }\n        });\n\n        let mainBinaryBufferLength = mainBuffer.byteLength;\n        for (let i = 0; i < textureBuffers.length; i++) {\n            let textureBuffer = textureBuffers[i];\n            mainBinaryBufferLength += textureBuffer.byteLength;\n        }\n        let mainBinaryBufferAlignedLength = AlignToBoundary (mainBinaryBufferLength);\n        mainJson.buffers.push ({\n            byteLength : mainBinaryBufferAlignedLength\n        });\n\n        let mainJsonString = JSON.stringify (mainJson);\n        let mainJsonBuffer = Utf8StringToArrayBuffer (mainJsonString);\n        let mainJsonBufferLength = mainJsonBuffer.byteLength;\n        let mainJsonBufferAlignedLength = AlignToBoundary (mainJsonBufferLength);\n\n        let glbSize = 12 + 8 + mainJsonBufferAlignedLength + 8 + mainBinaryBufferAlignedLength;\n        let glbWriter = new BinaryWriter (glbSize, true);\n\n        glbWriter.WriteUnsignedInteger32 (0x46546C67);\n        glbWriter.WriteUnsignedInteger32 (2);\n        glbWriter.WriteUnsignedInteger32 (glbSize);\n\n        glbWriter.WriteUnsignedInteger32 (mainJsonBufferAlignedLength);\n        glbWriter.WriteUnsignedInteger32 (0x4E4F534A);\n        glbWriter.WriteArrayBuffer (mainJsonBuffer);\n        WriteCharacters (glbWriter, 32, mainJsonBufferAlignedLength - mainJsonBufferLength);\n\n        glbWriter.WriteUnsignedInteger32 (mainBinaryBufferAlignedLength);\n        glbWriter.WriteUnsignedInteger32 (0x004E4942);\n        glbWriter.WriteArrayBuffer (mainBuffer);\n\n        for (let i = 0; i < textureBuffers.length; i++) {\n            let textureBuffer = textureBuffers[i];\n            glbWriter.WriteArrayBuffer (textureBuffer);\n        }\n        WriteCharacters (glbWriter, 0, mainBinaryBufferAlignedLength - mainBinaryBufferLength);\n\n        glbFile.SetBufferContent (glbWriter.GetBuffer ());\n    }\n\n    GetMeshData (exporterModel)\n    {\n        let meshDataArr = [];\n\n        exporterModel.EnumerateTransformedMeshes ((mesh) => {\n            let buffer = ConvertMeshToMeshBuffer (mesh);\n            meshDataArr.push ({\n                name : mesh.GetName (),\n                buffer : buffer,\n                offsets : [],\n                sizes : []\n            });\n        });\n\n        return meshDataArr;\n    }\n\n    GetMainBuffer (meshDataArr)\n    {\n        let mainBufferSize = 0;\n        for (let meshIndex = 0; meshIndex < meshDataArr.length; meshIndex++) {\n            let meshData = meshDataArr[meshIndex];\n            mainBufferSize += meshData.buffer.GetByteLength (this.components.index.size, this.components.number.size);\n        }\n\n        let writer = new BinaryWriter (mainBufferSize, true);\n        for (let meshIndex = 0; meshIndex < meshDataArr.length; meshIndex++) {\n            let meshData = meshDataArr[meshIndex];\n            for (let primitiveIndex = 0; primitiveIndex < meshData.buffer.PrimitiveCount (); primitiveIndex++) {\n                let primitive = meshData.buffer.GetPrimitive (primitiveIndex);\n                let offset = writer.GetPosition ();\n                for (let i = 0; i < primitive.indices.length; i++) {\n                    writer.WriteUnsignedInteger32 (primitive.indices[i]);\n                }\n                for (let i = 0; i < primitive.vertices.length; i++) {\n                    writer.WriteFloat32 (primitive.vertices[i]);\n                }\n                for (let i = 0; i < primitive.colors.length; i++) {\n                    writer.WriteFloat32 (SRGBToLinear (primitive.colors[i]));\n                }\n                for (let i = 0; i < primitive.normals.length; i++) {\n                    writer.WriteFloat32 (primitive.normals[i]);\n                }\n                for (let i = 0; i < primitive.uvs.length; i++) {\n                    let texCoord = primitive.uvs[i];\n                    if (i % 2 === 1) {\n                        texCoord *= -1.0;\n                    }\n                    writer.WriteFloat32 (texCoord);\n                }\n                meshData.offsets.push (offset);\n                meshData.sizes.push (writer.GetPosition () - offset);\n            }\n        }\n\n        return writer.GetBuffer ();\n    }\n\n    GetMainJson (meshDataArr)\n    {\n        class BufferViewCreator\n        {\n            constructor (mainJson, byteOffset)\n            {\n                this.mainJson = mainJson;\n                this.byteOffset = byteOffset;\n            }\n\n            AddBufferView (byteLength)\n            {\n                this.mainJson.bufferViews.push ({\n                    buffer : 0,\n                    byteOffset : this.byteOffset,\n                    byteLength : byteLength,\n                });\n                this.byteOffset += byteLength;\n                return this.mainJson.bufferViews.length - 1;\n            }\n        }\n\n        let mainJson = {\n            asset : {\n                generator : 'https://3dviewer.net',\n                version : '2.0'\n            },\n            scene : 0,\n            scenes : [\n                {\n                    nodes : []\n                }\n            ],\n            nodes : [],\n            materials : [],\n            meshes : [],\n            buffers : [],\n            bufferViews : [],\n            accessors : []\n        };\n\n        for (let meshIndex = 0; meshIndex < meshDataArr.length; meshIndex++) {\n            let meshData = meshDataArr[meshIndex];\n            mainJson.scenes[0].nodes.push (meshIndex);\n            mainJson.nodes.push ({\n                mesh : meshIndex\n            });\n            let jsonMesh = {\n                name : this.GetExportedMeshName (meshData.name),\n                primitives : []\n            };\n\n            let primitives = meshData.buffer.primitives;\n            for (let primitiveIndex = 0; primitiveIndex < primitives.length; primitiveIndex++) {\n                let primitive = primitives[primitiveIndex];\n\n                let bufferViewCreator = new BufferViewCreator (mainJson, meshData.offsets[primitiveIndex]);\n                let indicesBufferView = bufferViewCreator.AddBufferView (primitive.indices.length * this.components.index.size);\n                let verticesBufferView = bufferViewCreator.AddBufferView (primitive.vertices.length * this.components.number.size);\n                let colorsBufferView = null;\n                if (primitive.colors.length > 0) {\n                    colorsBufferView = bufferViewCreator.AddBufferView (primitive.colors.length * this.components.number.size);\n                }\n                let normalsBufferView = bufferViewCreator.AddBufferView (primitive.normals.length * this.components.number.size);\n                let uvsBufferView = null;\n                if (primitive.uvs.length > 0) {\n                    uvsBufferView = bufferViewCreator.AddBufferView (primitive.uvs.length * this.components.number.size);\n                }\n\n                let jsonPrimitive = {\n                    attributes : {},\n                    mode : 4,\n                    material : primitive.material\n                };\n\n                let bounds = primitive.GetBounds ();\n\n                mainJson.accessors.push ({\n                    bufferView : indicesBufferView,\n                    byteOffset : 0,\n                    componentType : this.components.index.type,\n                    count : primitive.indices.length,\n                    type : 'SCALAR'\n                });\n                jsonPrimitive.indices = mainJson.accessors.length - 1;\n\n                mainJson.accessors.push ({\n                    bufferView : verticesBufferView,\n                    byteOffset : 0,\n                    componentType : this.components.number.type,\n                    count : primitive.vertices.length / 3,\n                    min : bounds.min,\n                    max : bounds.max,\n                    type : 'VEC3'\n                });\n                jsonPrimitive.attributes.POSITION = mainJson.accessors.length - 1;\n\n                if (colorsBufferView !== null) {\n                    mainJson.accessors.push ({\n                        bufferView : colorsBufferView,\n                        byteOffset : 0,\n                        componentType : this.components.number.type,\n                        count : primitive.colors.length / 3,\n                        type : 'VEC3'\n                    });\n                    jsonPrimitive.attributes.COLOR_0 = mainJson.accessors.length - 1;\n                }\n\n                mainJson.accessors.push ({\n                    bufferView : normalsBufferView,\n                    byteOffset : 0,\n                    componentType : this.components.number.type,\n                    count : primitive.normals.length / 3,\n                    type : 'VEC3'\n                });\n                jsonPrimitive.attributes.NORMAL = mainJson.accessors.length - 1;\n\n                if (uvsBufferView !== null) {\n                    mainJson.accessors.push ({\n                        bufferView : uvsBufferView,\n                        byteOffset : 0,\n                        componentType : this.components.number.type,\n                        count : primitive.uvs.length / 2,\n                        type : 'VEC2'\n                    });\n                    jsonPrimitive.attributes.TEXCOORD_0 = mainJson.accessors.length - 1;\n                }\n\n                jsonMesh.primitives.push (jsonPrimitive);\n            }\n            mainJson.meshes.push (jsonMesh);\n        }\n\n        return mainJson;\n    }\n\n    ExportMaterials (exporterModel, mainJson, addTexture)\n    {\n        function ExportMaterial (obj, mainJson, material, addTexture)\n        {\n            function ColorToRGBA (color, opacity)\n            {\n                return [\n                    SRGBToLinear (color.r / 255.0),\n                    SRGBToLinear (color.g / 255.0),\n                    SRGBToLinear (color.b / 255.0),\n                    opacity\n                ];\n            }\n\n            function ColorToRGB (color)\n            {\n                return [\n                    SRGBToLinear (color.r / 255.0),\n                    SRGBToLinear (color.g / 255.0),\n                    SRGBToLinear (color.b / 255.0)\n                ];\n            }\n\n            function GetTextureParams (mainJson, texture, addTexture)\n            {\n                if (texture === null || !texture.IsValid ()) {\n                    return null;\n                }\n\n                if (mainJson.images === undefined) {\n                    mainJson.images = [];\n                }\n                if (mainJson.textures === undefined) {\n                    mainJson.textures = [];\n                }\n\n                let textureIndex = addTexture (texture);\n                let textureParams = {\n                    index : textureIndex\n                };\n\n                if (texture.HasTransformation ()) {\n                    let extensionName = 'KHR_texture_transform';\n                    if (mainJson.extensionsUsed === undefined) {\n                        mainJson.extensionsUsed = [];\n                    }\n                    if (mainJson.extensionsUsed.indexOf (extensionName) === -1) {\n                        mainJson.extensionsUsed.push (extensionName);\n                    }\n                    textureParams.extensions = {\n                        KHR_texture_transform : {\n                            offset : [texture.offset.x, -texture.offset.y],\n                            scale : [texture.scale.x, texture.scale.y],\n                            rotation : -texture.rotation\n                        }\n                    };\n                }\n\n                return textureParams;\n            }\n\n            let jsonMaterial = {\n                name : obj.GetExportedMaterialName (material.name),\n                pbrMetallicRoughness : {\n                    baseColorFactor : ColorToRGBA (material.color, material.opacity)\n                },\n                emissiveFactor : ColorToRGB (material.emissive),\n                doubleSided : true,\n                alphaMode : 'OPAQUE'\n            };\n\n            if (material.transparent) {\n                // TODO: mask, alphaCutoff?\n                jsonMaterial.alphaMode = 'BLEND';\n            }\n\n            let baseColorTexture = GetTextureParams (mainJson, material.diffuseMap, addTexture);\n            if (baseColorTexture !== null) {\n                if (!material.multiplyDiffuseMap) {\n                    jsonMaterial.pbrMetallicRoughness.baseColorFactor = ColorToRGBA (new Color (255, 255, 255), material.opacity);\n                }\n                jsonMaterial.pbrMetallicRoughness.baseColorTexture = baseColorTexture;\n            }\n            if (material.type === MaterialType.Physical) {\n                let metallicTexture = GetTextureParams (mainJson, material.metalnessMap, addTexture);\n                if (metallicTexture !== null) {\n                    jsonMaterial.pbrMetallicRoughness.metallicRoughnessTexture = metallicTexture;\n                } else {\n                    jsonMaterial.pbrMetallicRoughness.metallicFactor = material.metalness;\n                    jsonMaterial.pbrMetallicRoughness.roughnessFactor = material.roughness;\n                }\n            }\n            let normalTexture = GetTextureParams (mainJson, material.normalMap, addTexture);\n            if (normalTexture !== null) {\n                jsonMaterial.normalTexture = normalTexture;\n            }\n            let emissiveTexture = GetTextureParams (mainJson, material.emissiveMap, addTexture);\n            if (emissiveTexture !== null) {\n                jsonMaterial.emissiveTexture = emissiveTexture;\n            }\n\n            mainJson.materials.push (jsonMaterial);\n        }\n\n        for (let materialIndex = 0; materialIndex < exporterModel.MaterialCount (); materialIndex++) {\n            let material = exporterModel.GetMaterial (materialIndex);\n            ExportMaterial (this, mainJson, material, addTexture);\n        }\n    }\n}\n", "import { CopyObjectAttributes } from '../core/core.js';\nimport { Transformation } from '../geometry/transformation.js';\nimport { CalculateTriangleNormal, TransformMesh } from '../model/meshutils.js';\n\nexport class ExporterSettings\n{\n    constructor (settings)\n    {\n        this.transformation = new Transformation ();\n        this.isMeshVisible = (meshInstanceId) => {\n            return true;\n        };\n\n        CopyObjectAttributes (settings, this);\n    }\n}\n\nexport class ExporterModel\n{\n    constructor (model, settings)\n    {\n        this.model = model;\n        this.settings = settings || new ExporterSettings ();\n    }\n\n    MaterialCount ()\n    {\n        return this.model.MaterialCount ();\n    }\n\n    GetMaterial (index)\n    {\n        return this.model.GetMaterial (index);\n    }\n\n    VertexCount ()\n    {\n        let vertexCount = 0;\n        this.EnumerateMeshInstances ((meshInstance) => {\n            vertexCount += meshInstance.VertexCount ();\n        });\n        return vertexCount;\n    }\n\n    TriangleCount ()\n    {\n        let triangleCount = 0;\n        this.EnumerateMeshInstances ((meshInstance) => {\n            triangleCount += meshInstance.TriangleCount ();\n        });\n        return triangleCount;\n    }\n\n    MeshInstanceCount ()\n    {\n        let meshInstanceCount = 0;\n        this.EnumerateMeshInstances ((meshInstance) => {\n            meshInstanceCount += 1;\n        });\n        return meshInstanceCount;\n    }\n\n    EnumerateMeshInstances (onMeshInstance)\n    {\n        this.model.EnumerateMeshInstances ((meshInstance) => {\n            if (this.settings.isMeshVisible (meshInstance.GetId ())) {\n                onMeshInstance (meshInstance);\n            }\n        });\n    }\n\n    EnumerateTransformedMeshes (onMesh)\n    {\n        this.EnumerateMeshInstances ((meshInstance) => {\n            let transformation = meshInstance.GetTransformation ();\n            if (!this.settings.transformation.IsIdentity ()) {\n                transformation.Append (this.settings.transformation);\n            }\n\n            let mesh = meshInstance.GetMesh ();\n            let transformed = mesh.Clone ();\n            if (!transformation.IsIdentity ()) {\n                TransformMesh (transformed, transformation);\n            }\n\n            onMesh (transformed);\n        });\n    }\n\n    EnumerateVerticesAndTriangles (callbacks)\n    {\n        let transformedMeshes = [];\n        this.EnumerateTransformedMeshes ((mesh) => {\n            transformedMeshes.push (mesh);\n        });\n\n        for (let mesh of transformedMeshes) {\n            mesh.EnumerateVertices ((vertex) => {\n                callbacks.onVertex (vertex.x, vertex.y, vertex.z);\n            });\n        }\n\n        let vertexOffset = 0;\n        for (let mesh of transformedMeshes) {\n            mesh.EnumerateTriangleVertexIndices ((v0, v1, v2) => {\n                callbacks.onTriangle (v0 + vertexOffset, v1 + vertexOffset, v2 + vertexOffset);\n            });\n            vertexOffset += mesh.VertexCount ();\n        }\n    }\n\n    EnumerateTrianglesWithNormals (onTriangle)\n    {\n        this.EnumerateTransformedMeshes ((mesh) => {\n            mesh.EnumerateTriangleVertices ((v0, v1, v2) => {\n                let normal = CalculateTriangleNormal (v0, v1, v2);\n                onTriangle (v0, v1, v2, normal);\n            });\n        });\n    }\n}\n", "import { FileFormat, GetFileName } from '../io/fileutils.js';\nimport { TextWriter } from '../io/textwriter.js';\nimport { MaterialType } from '../model/material.js';\nimport { ExportedFile, ExporterBase } from './exporterbase.js';\n\nexport class ExporterObj extends ExporterBase\n{\n    constructor ()\n    {\n        super ();\n    }\n\n    CanExport (format, extension)\n    {\n        return format === FileFormat.Text && extension === 'obj';\n    }\n\n    ExportContent (exporterModel, format, files, onFinish)\n    {\n        function WriteTexture (mtlWriter, keyword, texture, files)\n        {\n            if (texture === null || !texture.IsValid ()) {\n                return;\n            }\n            let fileName = GetFileName (texture.name);\n            mtlWriter.WriteArrayLine ([keyword, fileName]);\n\n            let fileIndex = files.findIndex ((file) => {\n                return file.GetName () === fileName;\n            });\n            if (fileIndex === -1) {\n                let textureFile = new ExportedFile (fileName);\n                textureFile.SetBufferContent (texture.buffer);\n                files.push (textureFile);\n            }\n        }\n\n        let mtlFile = new ExportedFile ('model.mtl');\n        let objFile = new ExportedFile ('model.obj');\n\n        files.push (mtlFile);\n        files.push (objFile);\n\n        let mtlWriter = new TextWriter ();\n        mtlWriter.WriteLine (this.GetHeaderText ());\n        for (let materialIndex = 0; materialIndex < exporterModel.MaterialCount (); materialIndex++) {\n            let material = exporterModel.GetMaterial (materialIndex);\n            mtlWriter.WriteArrayLine (['newmtl', this.GetExportedMaterialName (material.name)]);\n            mtlWriter.WriteArrayLine (['Kd', material.color.r / 255.0, material.color.g / 255.0, material.color.b / 255.0]);\n            mtlWriter.WriteArrayLine (['d', material.opacity]);\n            if (material.type === MaterialType.Phong) {\n                mtlWriter.WriteArrayLine (['Ka', material.ambient.r / 255.0, material.ambient.g / 255.0, material.ambient.b / 255.0]);\n                mtlWriter.WriteArrayLine (['Ks', material.specular.r / 255.0, material.specular.g / 255.0, material.specular.b / 255.0]);\n                mtlWriter.WriteArrayLine (['Ns', material.shininess * 1000.0]);\n            }\n            WriteTexture (mtlWriter, 'map_Kd', material.diffuseMap, files);\n            if (material.type === MaterialType.Phong) {\n                WriteTexture (mtlWriter, 'map_Ks', material.specularMap, files);\n            }\n            WriteTexture (mtlWriter, 'bump', material.bumpMap, files);\n        }\n        mtlFile.SetTextContent (mtlWriter.GetText ());\n\n        let objWriter = new TextWriter ();\n        objWriter.WriteLine (this.GetHeaderText ());\n        objWriter.WriteArrayLine (['mtllib', mtlFile.GetName ()]);\n        let vertexOffset = 0;\n        let normalOffset = 0;\n        let uvOffset = 0;\n        let usedMaterialName = null;\n        exporterModel.EnumerateTransformedMeshes ((mesh) => {\n            objWriter.WriteArrayLine (['g', this.GetExportedMeshName (mesh.GetName ())]);\n            for (let vertexIndex = 0; vertexIndex < mesh.VertexCount (); vertexIndex++) {\n                let vertex = mesh.GetVertex (vertexIndex);\n                objWriter.WriteArrayLine (['v', vertex.x, vertex.y, vertex.z]);\n            }\n            for (let normalIndex = 0; normalIndex < mesh.NormalCount (); normalIndex++) {\n                let normal = mesh.GetNormal (normalIndex);\n                objWriter.WriteArrayLine (['vn', normal.x, normal.y, normal.z]);\n            }\n            for (let textureUVIndex = 0; textureUVIndex < mesh.TextureUVCount (); textureUVIndex++) {\n                let uv = mesh.GetTextureUV (textureUVIndex);\n                objWriter.WriteArrayLine (['vt', uv.x, uv.y]);\n            }\n            for (let triangleIndex = 0; triangleIndex < mesh.TriangleCount (); triangleIndex++) {\n                let triangle = mesh.GetTriangle (triangleIndex);\n                let v0 = triangle.v0 + vertexOffset + 1;\n                let v1 = triangle.v1 + vertexOffset + 1;\n                let v2 = triangle.v2 + vertexOffset + 1;\n                let n0 = triangle.n0 + normalOffset + 1;\n                let n1 = triangle.n1 + normalOffset + 1;\n                let n2 = triangle.n2 + normalOffset + 1;\n                if (triangle.mat !== null) {\n                    let material = exporterModel.GetMaterial (triangle.mat);\n                    let materialName = this.GetExportedMaterialName (material.name);\n                    if (materialName !== usedMaterialName) {\n                        objWriter.WriteArrayLine (['usemtl', materialName]);\n                        usedMaterialName = materialName;\n                    }\n                }\n                let u0 = '';\n                let u1 = '';\n                let u2 = '';\n                if (triangle.HasTextureUVs ()) {\n                    u0 = triangle.u0 + uvOffset + 1;\n                    u1 = triangle.u1 + uvOffset + 1;\n                    u2 = triangle.u2 + uvOffset + 1;\n                }\n                objWriter.WriteArrayLine (['f', [v0, u0, n0].join ('/'), [v1, u1, n1].join ('/'), [v2, u2, n2].join ('/')]);\n            }\n            vertexOffset += mesh.VertexCount ();\n            normalOffset += mesh.NormalCount ();\n            uvOffset += mesh.TextureUVCount ();\n        });\n\n        objFile.SetTextContent (objWriter.GetText ());\n        onFinish ();\n    }\n\n    GetHeaderText ()\n    {\n        return '# exported by https://3dviewer.net';\n    }\n}\n", "import { FileFormat } from '../io/fileutils.js';\nimport { TextWriter } from '../io/textwriter.js';\nimport { ExportedFile, ExporterBase } from './exporterbase.js';\n\nexport class ExporterOff extends ExporterBase\n{\n\tconstructor ()\n\t{\n\t\tsuper ();\n\t}\n\n    CanExport (format, extension)\n    {\n        return format === FileFormat.Text && extension === 'off';\n    }\n\n\tExportContent (exporterModel, format, files, onFinish)\n\t{\n\t\tlet offFile = new ExportedFile ('model.off');\n\t\tfiles.push (offFile);\n\n\t\tlet offWriter = new TextWriter ();\n\t\toffWriter.WriteLine ('OFF');\n\t\toffWriter.WriteArrayLine ([exporterModel.VertexCount (), exporterModel.TriangleCount (), 0]);\n\n\t\texporterModel.EnumerateVerticesAndTriangles ({\n\t\t\tonVertex : function (x, y, z) {\n\t\t\t\toffWriter.WriteArrayLine ([x, y, z]);\n\t\t\t},\n\t\t\tonTriangle : function (v0, v1, v2) {\n\t\t\t\toffWriter.WriteArrayLine ([3, v0, v1, v2]);\n\t\t\t}\n\t\t});\n\n\t\toffFile.SetTextContent (offWriter.GetText ());\n\t\tonFinish ();\n\t}\n}\n", "import { BinaryWriter } from '../io/binarywriter.js';\nimport { FileFormat } from '../io/fileutils.js';\nimport { TextWriter } from '../io/textwriter.js';\nimport { ExportedFile, ExporterBase } from './exporterbase.js';\n\nexport class ExporterPly extends ExporterBase\n{\n\tconstructor ()\n\t{\n\t\tsuper ();\n\t}\n\n    CanExport (format, extension)\n    {\n        return (format === FileFormat.Text || format === FileFormat.Binary) && extension === 'ply';\n    }\n\n\tExportContent (exporterModel, format, files, onFinish)\n\t{\n\t\tif (format === FileFormat.Text) {\n\t\t\tthis.ExportText (exporterModel, files);\n\t\t} else {\n\t\t\tthis.ExportBinary (exporterModel, files);\n\t\t}\n\t\tonFinish ();\n\t}\n\n\tExportText (exporterModel, files)\n\t{\n\t\tlet plyFile = new ExportedFile ('model.ply');\n\t\tfiles.push (plyFile);\n\n\t\tlet plyWriter = new TextWriter ();\n\n\t\tlet vertexCount = exporterModel.VertexCount ();\n\t\tlet triangleCount = exporterModel.TriangleCount ();\n\t\tlet headerText = this.GetHeaderText ('ascii', vertexCount, triangleCount);\n\t\tplyWriter.Write (headerText);\n\n\t\texporterModel.EnumerateVerticesAndTriangles ({\n\t\t\tonVertex : function (x, y, z) {\n\t\t\t\tplyWriter.WriteArrayLine ([x, y, z]);\n\t\t\t},\n\t\t\tonTriangle : function (v0, v1, v2) {\n\t\t\t\tplyWriter.WriteArrayLine ([3, v0, v1, v2]);\n\t\t\t}\n\t\t});\n\n\t\tplyFile.SetTextContent (plyWriter.GetText ());\n\t}\n\n\tExportBinary (exporterModel, files)\n\t{\n\t\tlet plyFile = new ExportedFile ('model.ply');\n\t\tfiles.push (plyFile);\n\n\t\tlet vertexCount = exporterModel.VertexCount ();\n\t\tlet triangleCount = exporterModel.TriangleCount ();\n\t\tlet headerText = this.GetHeaderText ('binary_little_endian', vertexCount, triangleCount);\n\n\t\tlet fullByteLength = headerText.length + vertexCount * 3 * 4 + triangleCount * (1 + 3 * 4);\n\t\tlet plyWriter = new BinaryWriter (fullByteLength, true);\n\n\t\tfor (let i = 0; i < headerText.length; i++) {\n\t\t\tplyWriter.WriteUnsignedCharacter8 (headerText.charCodeAt (i));\n\t\t}\n\n\t\texporterModel.EnumerateVerticesAndTriangles ({\n\t\t\tonVertex : function (x, y, z) {\n\t\t\t\tplyWriter.WriteFloat32 (x);\n\t\t\t\tplyWriter.WriteFloat32 (y);\n\t\t\t\tplyWriter.WriteFloat32 (z);\n\t\t\t},\n\t\t\tonTriangle : function (v0, v1, v2) {\n\t\t\t\tplyWriter.WriteUnsignedCharacter8 (3);\n\t\t\t\tplyWriter.WriteInteger32 (v0);\n\t\t\t\tplyWriter.WriteInteger32 (v1);\n\t\t\t\tplyWriter.WriteInteger32 (v2);\n\t\t\t}\n\t\t});\n\n\t\tplyFile.SetBufferContent (plyWriter.GetBuffer ());\n\t}\n\n\tGetHeaderText (format, vertexCount, triangleCount)\n\t{\n\t\tlet headerWriter = new TextWriter ();\n\t\theaderWriter.WriteLine ('ply');\n\t\theaderWriter.WriteLine ('format ' + format + ' 1.0');\n\t\theaderWriter.WriteLine ('element vertex ' + vertexCount);\n\t\theaderWriter.WriteLine ('property float x');\n\t\theaderWriter.WriteLine ('property float y');\n\t\theaderWriter.WriteLine ('property float z');\n\t\theaderWriter.WriteLine ('element face ' + triangleCount);\n\t\theaderWriter.WriteLine ('property list uchar int vertex_index');\n\t\theaderWriter.WriteLine ('end_header');\n\t\treturn headerWriter.GetText ();\n\t}\n}\n", "import { BinaryWriter } from '../io/binarywriter.js';\nimport { FileFormat } from '../io/fileutils.js';\nimport { TextWriter } from '../io/textwriter.js';\nimport { ExportedFile, ExporterBase } from './exporterbase.js';\n\nexport class ExporterStl extends ExporterBase\n{\n\tconstructor ()\n\t{\n\t\tsuper ();\n\t}\n\n    CanExport (format, extension)\n    {\n        return (format === FileFormat.Text || format === FileFormat.Binary) && extension === 'stl';\n    }\n\n\tExportContent (exporterModel, format, files, onFinish)\n\t{\n\t\tif (format === FileFormat.Text) {\n\t\t\tthis.ExportText (exporterModel, files);\n\t\t} else {\n\t\t\tthis.ExportBinary (exporterModel, files);\n\t\t}\n\t\tonFinish ();\n\t}\n\n\tExportText (exporterModel, files)\n\t{\n\t\tlet stlFile = new ExportedFile ('model.stl');\n\t\tfiles.push (stlFile);\n\n\t\tlet stlWriter = new TextWriter ();\n\t\tstlWriter.WriteLine ('solid Model');\n\t\texporterModel.EnumerateTrianglesWithNormals ((v0, v1, v2, normal) => {\n\t\t\tstlWriter.WriteArrayLine (['facet', 'normal', normal.x, normal.y, normal.z]);\n\t\t\tstlWriter.Indent (1);\n\t\t\tstlWriter.WriteLine ('outer loop');\n\t\t\tstlWriter.Indent (1);\n\t\t\tstlWriter.WriteArrayLine (['vertex', v0.x, v0.y, v0.z]);\n\t\t\tstlWriter.WriteArrayLine (['vertex', v1.x, v1.y, v1.z]);\n\t\t\tstlWriter.WriteArrayLine (['vertex', v2.x, v2.y, v2.z]);\n\t\t\tstlWriter.Indent (-1);\n\t\t\tstlWriter.WriteLine ('endloop');\n\t\t\tstlWriter.Indent (-1);\n\t\t\tstlWriter.WriteLine ('endfacet');\n\t\t});\n\t\tstlWriter.WriteLine ('endsolid Model');\n\n\t\tstlFile.SetTextContent (stlWriter.GetText ());\n\t}\n\n\tExportBinary (exporterModel, files)\n\t{\n\t\tlet stlFile = new ExportedFile ('model.stl');\n\t\tfiles.push (stlFile);\n\n\t\tlet triangleCount = exporterModel.TriangleCount ();\n\t\tlet headerSize = 80;\n\t\tlet fullByteLength = headerSize + 4 + triangleCount * 50;\n\t\tlet stlWriter = new BinaryWriter (fullByteLength, true);\n\n\t\tfor (let i = 0; i < headerSize; i++) {\n\t\t\tstlWriter.WriteUnsignedCharacter8 (0);\n\t\t}\n\n\t\tstlWriter.WriteUnsignedInteger32 (triangleCount);\n\t\texporterModel.EnumerateTrianglesWithNormals ((v0, v1, v2, normal) => {\n\t\t\tstlWriter.WriteFloat32 (normal.x);\n\t\t\tstlWriter.WriteFloat32 (normal.y);\n\t\t\tstlWriter.WriteFloat32 (normal.z);\n\n\t\t\tstlWriter.WriteFloat32 (v0.x);\n\t\t\tstlWriter.WriteFloat32 (v0.y);\n\t\t\tstlWriter.WriteFloat32 (v0.z);\n\n\t\t\tstlWriter.WriteFloat32 (v1.x);\n\t\t\tstlWriter.WriteFloat32 (v1.y);\n\t\t\tstlWriter.WriteFloat32 (v1.z);\n\n\t\t\tstlWriter.WriteFloat32 (v2.x);\n\t\t\tstlWriter.WriteFloat32 (v2.y);\n\t\t\tstlWriter.WriteFloat32 (v2.z);\n\n\t\t\tstlWriter.WriteUnsignedInteger16 (0);\n\t\t});\n\n\t\tstlFile.SetBufferContent (stlWriter.GetBuffer ());\n\t}\n}\n", "import { Exporter3dm } from './exporter3dm.js';\nimport { ExporterGltf } from './exportergltf.js';\nimport { ExporterModel } from './exportermodel.js';\nimport { ExporterObj } from './exporterobj.js';\nimport { ExporterOff } from './exporteroff.js';\nimport { ExporterPly } from './exporterply.js';\nimport { ExporterStl } from './exporterstl.js';\n\nexport class Exporter\n{\n    constructor ()\n    {\n        this.exporters = [\n            new ExporterObj (),\n            new ExporterStl (),\n            new ExporterPly (),\n            new ExporterOff (),\n            new ExporterGltf (),\n            new Exporter3dm ()\n        ];\n    }\n\n    AddExporter (exporter)\n    {\n        this.exporters.push (exporter);\n    }\n\n    Export (model, settings, format, extension, callbacks)\n    {\n        let exporter = null;\n        for (let i = 0; i < this.exporters.length; i++) {\n            let currentExporter = this.exporters[i];\n            if (currentExporter.CanExport (format, extension)) {\n                exporter = currentExporter;\n                break;\n            }\n        }\n        if (exporter === null) {\n            callbacks.onError ();\n            return;\n        }\n\n        let exporterModel = new ExporterModel (model, settings);\n        exporter.Export (exporterModel, format, (files) => {\n            if (files.length === 0) {\n                callbacks.onError ();\n            } else {\n                callbacks.onSuccess (files);\n            }\n        });\n    }\n}\n", "import { Direction } from '../geometry/geometry.js';\nimport { ImporterThreeBase } from './importerthree.js';\n\nexport class ImporterThreeSvg extends ImporterThreeBase\n{\n    constructor ()\n    {\n        super ();\n    }\n\n    CanImportExtension (extension)\n    {\n        return extension === 'svg';\n    }\n\n    GetUpDirection ()\n    {\n        return Direction.Z;\n    }\n\n    GetExternalLibraries ()\n    {\n        return [\n            'three_loaders/SVGLoader.js'\n        ];\n    }\n\n    CreateLoader (manager)\n    {\n        return new THREE.SVGLoader (manager);\n    }\n\n    GetMainObject (loadedObject)\n    {\n        function ShowFill (path)\n        {\n            const style = path.userData.style;\n            if (style.fill === undefined || style.fill === 'none') {\n                return false;\n            }\n            return true;\n        }\n\n        function GetOrCreateMaterial (materials, style, opacity)\n        {\n            let material = null;\n            for (let existingMaterial of materials) {\n                if (existingMaterial.style === style && existingMaterial.opacity === opacity) {\n                    material = existingMaterial.material;\n                    break;\n                }\n            }\n            if (material === null) {\n                material = new THREE.MeshPhongMaterial ({\n                    color: new THREE.Color ().setStyle (style),\n                    opacity: opacity,\n                    transparent: opacity < 1.0\n                });\n                materials.push ({\n                    style : style,\n                    opacity : opacity,\n                    material : material\n                });\n            }\n            return material;\n        }\n\n        let materials = [];\n\n        let object = new THREE.Object3D ();\n        object.rotation.x = Math.PI;\n\n        for (let path of loadedObject.paths) {\n            const shapes = THREE.SVGLoader.createShapes (path);\n            if (ShowFill (path)) {\n                let pathStyle = path.userData.style;\n                let pathMaterial = GetOrCreateMaterial (materials, pathStyle.fill, pathStyle.opacity);\n                for (const shape of shapes) {\n                    const geometry = new THREE.ExtrudeGeometry (shape, {\n                        depth: 10,\n                        bevelEnabled: false\n                    });\n                    const mesh = new THREE.Mesh (geometry, pathMaterial);\n                    mesh.name = path.userData.node.id;\n                    object.add (mesh);\n                }\n            }\n        }\n        return object;\n    }\n}\n"],
  "mappings": "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",
  "names": ["main_exports", "__export", "AddCheckbox", "AddCoord2D", "AddCoord3D", "AddDiv", "AddDomElement", "AddRangeSlider", "AddSelect", "AddToggle", "ArrayBufferToAsciiString", "ArrayBufferToUtf8String", "ArrayToColor", "ArrayToCoord3D", "ArrayToQuaternion", "AsciiStringToArrayBuffer", "Base64DataURIToArrayBuffer", "BezierTweenFunction", "BigEps", "BinaryReader", "BinaryWriter", "BoundingBoxCalculator3D", "Box3D", "CalculateSurfaceArea", "CalculateTriangleNormal", "CalculateVolume", "Camera", "CameraIsEqual3D", "CheckModel", "ClearDomElement", "ClickDetector", "Color", "ColorComponentFromFloat", "ColorFromFloatComponents", "ColorIsEqual", "ColorToHexString", "ConvertColorToThreeColor", "ConvertMeshToMeshBuffer", "ConvertModelToThreeObject", "ConvertThreeColorToColor", "ConvertThreeGeometryToMesh", "Coord2D", "Coord3D", "Coord4D", "CoordDistance2D", "CoordDistance3D", "CoordIsEqual2D", "CoordIsEqual3D", "CopyObjectAttributes", "CreateDiv", "CreateDomElement", "CreateModelUrlParameters", "CreateObjectUrl", "CreateObjectUrlWithMimeType", "CreateUrlBuilder", "CreateUrlParser", "CrossVector3D", "DegRad", "Direction", "DotVector3D", "EmbeddedViewer", "Eps", "ExportedFile", "Exporter", "Exporter3dm", "ExporterBase", "ExporterGltf", "ExporterModel", "ExporterObj", "ExporterOff", "ExporterPly", "ExporterSettings", "ExporterStl", "FaceMaterial", "File", "FileFormat", "FileList", "FileSource", "FinalizeModel", "FlipMeshTrianglesOrientation", "GenerateCuboid", "GenerateCylinder", "GeneratePlatonicSolid", "GenerateSphere", "Generator", "GeneratorHelper", "GeneratorParams", "GetBoundingBox", "GetDefaultCamera", "GetDomElementClientCoordinates", "GetDomElementExternalHeight", "GetDomElementExternalWidth", "GetDomElementInnerDimensions", "GetDomElementOuterHeight", "GetDomElementOuterWidth", "GetFileExtension", "GetFileExtensionFromMimeType", "GetFileName", "GetIntegerFromStyle", "GetMeshType", "GetShadingType", "GetShadingTypeOfObject", "GetTetrahedronSignedVolume", "GetTopology", "GetTriangleArea", "HasDefaultMaterial", "HasHighpDriverIssue", "HexStringToColor", "ImportError", "ImportErrorCode", "ImportResult", "ImportSettings", "Importer", "Importer3dm", "Importer3ds", "ImporterBase", "ImporterFileAccessor", "ImporterGltf", "ImporterIfc", "ImporterO3dv", "ImporterObj", "ImporterOff", "ImporterPly", "ImporterStl", "ImporterThree3mf", "ImporterThreeBase", "ImporterThreeDae", "ImporterThreeFbx", "ImporterThreeSvg", "ImporterThreeWrl", "Init3DViewerElement", "Init3DViewerElements", "InsertDomElementAfter", "InsertDomElementBefore", "IntegerToHexString", "IsDefined", "IsDomElementVisible", "IsEqual", "IsEqualEps", "IsGreater", "IsGreaterOrEqual", "IsLower", "IsLowerOrEqual", "IsModelEmpty", "IsNegative", "IsPositive", "IsPowerOfTwo", "IsSolid", "IsZero", "LinearToSRGB", "LinearTweenFunction", "LoadExternalLibrary", "MaterialBase", "MaterialType", "Matrix", "MatrixIsEqual", "MeasureTool", "Mesh", "MeshBuffer", "MeshInstance", "MeshInstanceId", "MeshPrimitiveBuffer", "MeshType", "Model", "ModelObject3D", "ModelToThreeConversionOutput", "ModelToThreeConversionParams", "MouseInteraction", "NameFromLine", "Navigation", "NavigationType", "NextPowerOfTwo", "Node", "NodeType", "Object3D", "Octree", "OctreeNode", "ParabolicTweenFunction", "ParameterConverter", "ParameterListBuilder", "ParameterListParser", "ParametersFromLine", "PhongMaterial", "PhysicalMaterial", "Property", "PropertyGroup", "PropertyType", "Quaternion", "QuaternionFromAxisAngle", "QuaternionFromXYZ", "QuaternionIsEqual", "RadDeg", "ReadFile", "ReadLines", "ReplaceDefaultMaterialColor", "RequestUrl", "RevokeObjectUrl", "RunTaskAsync", "RunTasks", "RunTasksBatch", "SRGBToLinear", "SetDomElementHeight", "SetDomElementOuterHeight", "SetDomElementOuterWidth", "SetDomElementWidth", "SetExternalLibLocation", "SetThreeMeshPolygonOffset", "ShadingModel", "ShadingType", "ShowDomElement", "SubCoord2D", "SubCoord3D", "TaskRunner", "TextWriter", "TextureIsEqual", "TextureMap", "TextureMapIsEqual", "ThreeConversionStateHandler", "ThreeModelLoader", "ThreeNodeTree", "Topology", "TopologyEdge", "TopologyTriangle", "TopologyTriangleEdge", "TopologyVertex", "TouchInteraction", "TransformFileHostUrls", "TransformMesh", "Transformation", "TransformationIsEqual", "TraverseThreeObject", "Triangle", "TweenCoord3D", "UpVector", "UpdateMaterialTransparency", "Utf8StringToArrayBuffer", "ValueOrDefault", "VectorAngle3D", "VectorLength3D", "Viewer", "ViewerExtraGeometry", "ViewerGeometry", "WaitWhile", "TaskRunner", "count", "callbacks", "batchCount", "stepCount", "index", "ready", "firstIndex", "lastIndex", "RunTaskAsync", "task", "RunTasks", "RunTasksBatch", "WaitWhile", "expression", "Waiter", "IsDefined", "val", "ValueOrDefault", "def", "CopyObjectAttributes", "src", "dest", "attribute", "FileSource", "FileFormat", "GetFileName", "filePath", "firstSeparator", "fileName", "firstParamIndex", "GetFileExtension", "firstPoint", "RequestUrl", "url", "format", "resolve", "reject", "request", "ReadFile", "file", "reader", "event", "TransformFileHostUrls", "urls", "i", "separatorPos", "TextWriter", "diff", "arr", "str", "i", "BinaryReader", "arrayBuffer", "isLittleEndian", "position", "bytes", "byteLength", "originalBufferView", "bufferView", "subArray", "result", "BinaryWriter", "byteLength", "isLittleEndian", "position", "arrayBuffer", "bufferView", "val", "externalLibLocation", "loadedExternalLibs", "SetExternalLibLocation", "newExternalLibLocation", "LoadExternalLibrary", "libName", "resolve", "reject", "scriptElement", "ArrayBufferToUtf8String", "buffer", "ArrayBufferToAsciiString", "text", "bufferView", "i", "AsciiStringToArrayBuffer", "str", "Utf8StringToArrayBuffer", "Base64DataURIToArrayBuffer", "uri", "dataPrefix", "mimeSeparator", "bufferSeparator", "mimeType", "base64String", "GetFileExtensionFromMimeType", "mimeParts", "CreateObjectUrl", "content", "blob", "CreateObjectUrlWithMimeType", "RevokeObjectUrl", "url", "Eps", "BigEps", "RadDeg", "DegRad", "IsZero", "a", "IsLower", "b", "IsGreater", "IsLowerOrEqual", "IsGreaterOrEqual", "IsEqual", "IsEqualEps", "eps", "IsPositive", "IsNegative", "Direction", "MeasureTool", "viewer", "highlightColor", "isActive", "mouseCoordinates", "intersection", "a", "b", "result", "aNormal", "bNormal", "IsEqualEps", "aPlane", "coneHeight", "meshUserData", "coneRadius", "coneGeometry", "coneMaterial", "cone", "faceNormal", "normalMatrix", "Coord3D", "x", "y", "z", "scalar", "length", "direction", "distance", "normal", "axis", "angle", "origo", "u", "v", "w", "si", "co", "CoordIsEqual3D", "a", "b", "IsEqual", "AddCoord3D", "SubCoord3D", "CoordDistance3D", "DotVector3D", "VectorAngle3D", "aDirection", "bDirection", "product", "CrossVector3D", "result", "VectorLength3D", "ArrayToCoord3D", "arr", "Color", "r", "g", "b", "ColorComponentFromFloat", "component", "ColorFromFloatComponents", "SRGBToLinear", "LinearToSRGB", "IntegerToHexString", "intVal", "result", "ColorToHexString", "color", "HexStringToColor", "hexString", "ArrayToColor", "arr", "ColorIsEqual", "a", "Coord2D", "x", "y", "CoordIsEqual2D", "a", "b", "IsEqual", "AddCoord2D", "SubCoord2D", "CoordDistance2D", "TextureMap", "Coord2D", "CoordIsEqual2D", "IsEqual", "rhs", "TextureMapIsEqual", "aTex", "bTex", "MaterialType", "MaterialBase", "type", "Color", "ColorIsEqual", "FaceMaterial", "enumerator", "PhongMaterial", "PhysicalMaterial", "TextureIsEqual", "a", "b", "Object3D", "onVertex", "onTriangleVertexIndices", "onTriangleVertices", "ModelObject3D", "name", "propertyGroup", "index", "Mesh", "ModelObject3D", "vertex", "index", "color", "normal", "uv", "triangle", "onVertex", "onTriangleVertexIndices", "onTriangleVertices", "v0", "v1", "v2", "cloned", "i", "Triangle", "v0", "v1", "v2", "c0", "c1", "c2", "n0", "n1", "n2", "u0", "u1", "u2", "mat", "curve", "cloned", "HasHighpDriverIssue", "canvas", "parameters", "renderer", "scene", "ambientLight", "light", "camera", "plane", "mesh", "context", "pixels", "blackThreshold", "ShadingType", "GetShadingType", "model", "phongCount", "physicalCount", "i", "material", "MaterialType", "ConvertThreeColorToColor", "threeColor", "ColorFromFloatComponents", "ConvertColorToThreeColor", "color", "ConvertThreeGeometryToMesh", "threeGeometry", "materialIndex", "Mesh", "vertices", "x", "y", "z", "Coord3D", "hasVertexColors", "colors", "itemSize", "hasNormals", "normals", "hasUVs", "uvs", "Coord2D", "indices", "v0", "v1", "v2", "triangle", "Triangle", "GetIntegerFromStyle", "parameter", "GetDomElementExternalWidth", "style", "padding", "border", "margin", "GetDomElementExternalHeight", "GetDomElementInnerDimensions", "element", "outerWidth", "outerHeight", "width", "height", "GetDomElementClientCoordinates", "clientX", "clientY", "clientRect", "Coord2D", "CreateDomElement", "elementType", "className", "innerHTML", "AddDomElement", "parentElement", "AddDiv", "ClearDomElement", "InsertDomElementBefore", "newElement", "existingElement", "InsertDomElementAfter", "ShowDomElement", "show", "IsDomElementVisible", "SetDomElementWidth", "SetDomElementHeight", "GetDomElementOuterWidth", "GetDomElementOuterHeight", "SetDomElementOuterWidth", "SetDomElementOuterHeight", "AddCheckbox", "id", "text", "isChecked", "onChange", "label", "check", "AddRangeSlider", "min", "max", "slider", "AddSelect", "options", "selectedIndex", "container", "select", "option", "AddToggle", "UpdateStatus", "toggle", "status", "toggleClassName", "newStatus", "onChangeHandler", "CreateDiv", "BezierTweenFunction", "distance", "index", "count", "t", "LinearTweenFunction", "ParabolicTweenFunction", "t2", "TweenCoord3D", "a", "b", "tweenFunc", "dir", "SubCoord3D", "CoordDistance3D", "result", "i", "step", "Camera", "eye", "center", "up", "CameraIsEqual3D", "a", "b", "CoordIsEqual3D", "MouseInteraction", "Coord2D", "canvas", "ev", "SubCoord2D", "buttonIndex", "length", "GetDomElementClientCoordinates", "TouchInteraction", "coord", "touchEv", "touchEv1", "touchEv2", "CoordDistance2D", "ClickDetector", "startPosition", "currentPosition", "NavigationType", "Navigation", "camera", "callbacks", "onMouseClick", "onMouseMove", "onContext", "fixUpVector", "newCamera", "stepCount", "Step", "obj", "steps", "count", "index", "tweenFunc", "ParabolicTweenFunction", "TweenCoord3D", "radius", "fov", "IsZero", "fitCamera", "offsetToOrigo", "SubCoord3D", "centerEyeDirection", "fieldOfView", "distance", "DegRad", "mouseCoords", "moveDiff", "mouseButton", "navigationType", "orbitRatio", "eyeCenterDistance", "CoordDistance3D", "panRatio", "zoomRatio", "distanceDiff", "fingerCount", "touchCoords", "delta", "ratio", "angleX", "angleY", "radAngleX", "radAngleY", "viewDirection", "horizontalDirection", "CrossVector3D", "newAngle", "VectorAngle3D", "IsGreater", "IsLower", "verticalDirection", "moveX", "moveY", "direction", "move", "button", "clientX", "clientY", "globalCoords", "localCoords", "SetThreeMeshPolygonOffset", "mesh", "offset", "SetMaterialsPolygonOffset", "materials", "material", "ViewerGeometry", "scene", "Color", "mainObject", "show", "color", "threshold", "needToGenerate", "edgeColor", "ConvertColorToThreeColor", "edge", "CreateLine", "from", "to", "points", "geometry", "boundingBox", "meshUserData", "strongMaterial", "lightMaterial", "boundingBoxSize", "expandSize", "minValue", "maxValue", "cellSize", "alignedMinValue", "alignedMaxValue", "level", "cellCountX", "cellCountY", "step", "lineDist", "beg", "end", "IsEqual", "edges", "line", "needToProcess", "hasMesh", "boundingSphere", "obj", "enumerator", "mouseCoords", "camera", "width", "height", "raycaster", "mousePos", "iSectObjects", "i", "iSectObject", "ViewerExtraGeometry", "object", "GetDefaultCamera", "direction", "Direction", "CameraIsEqual3D", "Coord3D", "Camera", "TraverseThreeObject", "object", "processor", "child", "GetShadingTypeOfObject", "mainObject", "shadingType", "obj", "material", "ShadingType", "UpVector", "newDirection", "oldCamera", "defaultCamera", "defaultDir", "SubCoord3D", "distance", "CoordDistance3D", "newEye", "newCamera", "isFixed", "ShadingModel", "scene", "type", "textures", "onLoaded", "loader", "camera", "lightDir", "highlightColor", "withOffset", "Viewer", "canvas", "parameters", "ViewerGeometry", "ViewerExtraGeometry", "onMouseClick", "onMouseMove", "onContext", "color", "hexColor", "ColorToHexString", "show", "threshold", "width", "height", "innerSize", "GetDomElementInnerDimensions", "boundingSphere", "animation", "center", "radius", "fov", "fixUpVector", "upDirection", "animate", "animationSteps", "navigationCamera", "isVisible", "mesh", "visible", "edge", "isHighlighted", "CreateHighlightMaterials", "originalMaterials", "highlightMaterial", "highlightMaterials", "i", "showEdges", "mouseCoords", "intersection", "canvasSize", "needToProcess", "enumerator", "canvasElem", "Navigation", "originalSize", "renderWidth", "renderHeight", "url", "File", "file", "source", "FileSource", "GetFileName", "GetFileExtension", "content", "FileList", "fileList", "files", "i", "onReady", "RunTasks", "index", "complete", "filePath", "fileName", "fileIndex", "fileSource", "fileObject", "loaderPromise", "RequestUrl", "FileFormat", "ReadFile", "Quaternion", "x", "y", "z", "w", "QuaternionIsEqual", "a", "b", "IsEqual", "ArrayToQuaternion", "arr", "QuaternionFromAxisAngle", "axis", "angle", "s", "QuaternionFromXYZ", "mode", "c1", "c2", "c3", "s1", "s2", "s3", "quaternion", "Matrix", "matrix", "result", "identity", "i", "IsEqual", "x", "y", "z", "w", "x2", "y2", "z2", "xx", "xy", "xz", "yy", "yz", "zz", "wx", "wy", "wz", "axis", "angle", "quaternion", "QuaternionFromAxisAngle", "translation", "rotation", "scale", "tx", "ty", "tz", "qx", "qy", "qz", "qw", "sx", "sy", "sz", "Coord3D", "VectorLength3D", "determinant", "IsNegative", "m00", "m01", "m02", "m10", "m11", "m12", "m20", "m21", "m22", "tr", "s", "Quaternion", "a00", "a01", "a02", "a03", "a10", "a11", "a12", "a13", "a20", "a21", "a22", "a23", "a30", "a31", "a32", "a33", "b00", "b01", "b02", "b03", "b04", "b05", "b06", "b07", "b08", "b09", "b10", "b11", "vector", "b12", "b13", "b20", "b21", "b22", "b23", "b30", "b31", "b32", "b33", "MatrixIsEqual", "a", "b", "aMatrix", "bMatrix", "Transformation", "matrix", "Matrix", "transformation", "coord", "resultVector", "Coord3D", "clonedMatrix", "TransformationIsEqual", "a", "b", "MatrixIsEqual", "MeshType", "GetMeshType", "mesh", "CalculateTriangleNormal", "v0", "v1", "v2", "v", "SubCoord3D", "w", "normal", "CrossVector3D", "TransformMesh", "transformation", "i", "vertex", "transformed", "trs", "normalMatrix", "Matrix", "Coord3D", "normalTransformation", "Transformation", "FlipMeshTrianglesOrientation", "triangle", "tmp", "Box3D", "min", "max", "Coord3D", "BoundingBoxCalculator3D", "point", "OctreeNode", "boundingBox", "level", "point", "data", "options", "node", "oldPointItems", "i", "pointItem", "CoordIsEqual3D", "foundNode", "AddChildNode", "minX", "minY", "minZ", "sizeX", "sizeY", "sizeZ", "box", "Box3D", "Coord3D", "min", "center", "IsGreaterOrEqual", "IsLowerOrEqual", "Octree", "TopologyVertex", "TopologyEdge", "vertex1", "vertex2", "TopologyTriangleEdge", "edge", "reversed", "TopologyTriangle", "Topology", "vertex3", "AddTriangleToVertex", "vertices", "vertexIndex", "triangleIndex", "AddEdgeToVertex", "triangleEdges", "triangleEdgeIndex", "vertex", "triangleEdge", "AddTriangleToEdge", "edges", "triangle", "startVertex", "endVertex", "edgeIndex", "endVertices", "i", "endVertexItem", "IsModelEmpty", "model", "isEmpty", "meshInstance", "GetMeshType", "MeshType", "GetBoundingBox", "object3D", "calculator", "BoundingBoxCalculator3D", "vertex", "GetTopology", "GetVertexIndex", "octree", "topology", "index", "boundingBox", "Octree", "Topology", "v0", "v1", "v2", "v0Index", "v1Index", "v2Index", "IsSolid", "GetEdgeOrientationInTriangle", "triangleIndex", "edgeIndex", "triangle", "triEdge1", "triEdge2", "triEdge3", "edge", "triCount", "edgesDirection", "triIndex", "HasDefaultMaterial", "i", "material", "ReplaceDefaultMaterialColor", "color", "PropertyType", "Property", "type", "name", "value", "PropertyGroup", "property", "index", "MeshInstanceId", "nodeId", "meshIndex", "rhs", "MeshInstance", "ModelObject3D", "id", "node", "mesh", "onVertex", "transformation", "vertex", "transformed", "onTriangleVertexIndices", "onTriangleVertices", "v0", "v1", "v2", "v0Transformed", "v1Transformed", "v2Transformed", "propertyGroup", "index", "TransformMesh", "NodeIdGenerator", "id", "NodeType", "Node", "Transformation", "type", "name", "transformation", "parent", "node", "index", "processor", "childNode", "meshIndex", "Model", "ModelObject3D", "Node", "count", "node", "meshInstance", "material", "index", "mesh", "meshIndex", "i", "instanceId", "foundNode", "foundMesh", "id", "MeshInstanceId", "MeshInstance", "onMesh", "onMeshInstance", "transformed", "onVertex", "onTriangleVertexIndices", "onTriangleVertices", "ModelFinalizer", "params", "Color", "CopyObjectAttributes", "model", "materialHasVertexColors", "meshIndex", "mesh", "triangleIndex", "triangle", "hasVertexColors", "materialIndex", "material", "GetMeshType", "MeshType", "CalculateCurveNormals", "AddAverageNormal", "vertexIndex", "triangleNormals", "vertexToTriangles", "IsNormalInArray", "array", "normal", "i", "current", "CoordIsEqual3D", "averageNormals", "neigTriangles", "neigIndex", "neigTriangle", "triangleNormal", "averageNormal", "Coord3D", "AddCoord3D", "v0", "v1", "v2", "CalculateTriangleNormal", "n0", "n1", "n2", "meshStatus", "normalIndex", "rootNode", "emptyNodes", "node", "nodeIndex", "parentNode", "defaultMaterialColor", "defaultMaterial", "PhongMaterial", "FinalizeModel", "CheckModel", "IsCorrectValue", "val", "IsCorrectNumber", "IsCorrectIndex", "count", "CheckMesh", "CheckTriangle", "vertex", "color", "uv", "ImporterBase", "name", "extension", "content", "callbacks", "Model", "IsModelEmpty", "FinalizeModel", "Direction", "fileContent", "onFinish", "message", "NameFromLine", "line", "startIndex", "commentChar", "name", "commentStart", "ParametersFromLine", "ReadLines", "str", "onLine", "LineFound", "trimmed", "cursor", "next", "IsPowerOfTwo", "x", "NextPowerOfTwo", "npot", "UpdateMaterialTransparency", "material", "IsLower", "Importer3dm", "ImporterBase", "extension", "Direction", "fileContent", "onFinish", "LoadExternalLibrary", "rhino", "rhinoDoc", "IsModelEmpty", "rhinoObjects", "rhinoObject", "rhinoAttributes", "rhinoInstanceDefinitions", "rhinoInstanceDefinition", "docStrings", "propertyGroup", "PropertyGroup", "docString", "Property", "PropertyType", "i", "rhinoInstanceReferences", "rhinoGeometry", "objectType", "rhinoMesh", "deleteMesh", "faces", "face", "mesh", "parentDefinitionId", "instanceObjectIds", "instanceObjectId", "instanceObject", "materialIndex", "threeJson", "ConvertThreeGeometryToMesh", "userStrings", "userString", "matrix", "Matrix", "rhinoInstanceReferenceMatrix", "transformationMatrix", "transformation", "Transformation", "TransformMesh", "GetRhinoMaterial", "layerIndex", "layerMaterialIndex", "FindMatchingMaterial", "model", "rhinoMaterial", "SetColor", "color", "rhinoColor", "IsBlack", "IsWhite", "material", "PhongMaterial", "physicallyBased", "PhysicalMaterial", "UpdateMaterialTransparency", "CHUNK3DS", "Importer3dsNode", "Importer3dsNodeList", "node", "Importer3ds", "ImporterBase", "extension", "Direction", "fileContent", "onFinish", "reader", "BinaryReader", "endByte", "chunkId", "chunkLength", "length", "material", "PhongMaterial", "shininess", "shininessStrength", "UpdateMaterialTransparency", "materialIndex", "texture", "TextureMap", "textureName", "textureBuffer", "DegRad", "color", "Color", "hasLinColor", "ColorComponentFromFloat", "percentage", "objectName", "ApplyMeshTransformation", "mesh", "meshMatrix", "determinant", "mirrorByX", "IsNegative", "Matrix", "invMeshMatrix", "transformation", "Transformation", "TransformMesh", "FlipMeshTrianglesOrientation", "Mesh", "matrixElements", "i", "triangle", "meshIndex", "vertexCount", "x", "y", "z", "Coord3D", "texVertexCount", "Coord2D", "faceCount", "v0", "v1", "v2", "Triangle", "materialName", "faceIndex", "smoothingGroup", "matrix", "j", "GetNodeTransformation", "node3ds", "isMeshNode", "GetNodePosition", "GetNodeRotation", "GetQuaternionFromAxisAndAngle", "axisAngle", "result", "omega", "si", "rotation", "GetNodeScale", "ArrayToCoord3D", "ArrayToQuaternion", "pivotPoint", "rootNode", "nodeIdToModelNode", "Node", "NodeType", "ReadTrackVector", "obj", "type", "keyNum", "current", "tmp", "name", "char", "count", "onChunk", "Coord4D", "x", "y", "z", "w", "GltfComponentType", "GltfDataType", "GltfRenderMode", "GltfConstants", "GetGltfColor", "color", "ColorFromFloatComponents", "LinearToSRGB", "GetGltfVertexColor", "componentType", "GetColorComponent", "component", "normalized", "ColorComponentFromFloat", "Color", "GltfBufferReader", "buffer", "BinaryReader", "dataType", "byteStride", "dataCount", "indexReader", "valueReader", "byteLength", "data", "x", "y", "Coord2D", "z", "Coord3D", "w", "Coord4D", "onData", "i", "sparseData", "index", "value", "sparseIndex", "bytes", "componentCount", "readBytes", "GltfExtensions", "extensionsRequired", "callbacks", "LoadExternalLibrary", "draco", "unsupportedExtensions", "requiredExtension", "gltfMaterial", "material", "imporTextureFn", "khrSpecularGlossiness", "phongMaterial", "PhongMaterial", "diffuseColor", "diffuseTexture", "specularColor", "specularTexture", "glossiness", "gltfTexture", "texture", "khrTextureTransform", "importer", "gltf", "primitive", "mesh", "EnumerateComponents", "decoder", "dracoMesh", "attributeId", "processor", "attribute", "numComponents", "numValues", "dataSize", "attributePtr", "attributeArray", "decoderBuffer", "extensionParams", "compressedBufferView", "compressedArrayBuffer", "hasVertices", "hasVertexColors", "hasNormals", "hasUVs", "vertexOffset", "vertexColorOffset", "normalOffset", "uvOffset", "vertex", "normal", "uv", "indexCount", "indexDataSize", "indexDataPtr", "indexArray", "v0", "v1", "v2", "ImporterGltf", "ImporterBase", "extension", "Direction", "fileContent", "onFinish", "textContent", "ArrayBufferToUtf8String", "gltfBuffer", "base64Buffer", "Base64DataURIToArrayBuffer", "fileBuffer", "ReadChunk", "reader", "length", "type", "gltfTextContent", "chunk", "materials", "meshes", "ImportProperties", "model", "propertyGroupName", "propertyObject", "propertyGroup", "PropertyGroup", "propertyName", "property", "Property", "PropertyType", "defaultSceneIndex", "PhysicalMaterial", "baseColor", "metallicFactor", "roughnessFactor", "emissiveColor", "alphaMode", "newMaterial", "textureRef", "gltfTextureRef", "TextureMap", "gltfImageIndex", "gltfImage", "textureParams", "textureIndexString", "GetFileExtensionFromMimeType", "CreateObjectUrlWithMimeType", "textureBuffer", "bufferView", "gltfMesh", "Mesh", "hasIndices", "mode", "accessor", "vertexIndices", "tmp", "triangle", "Triangle", "scene", "rootNode", "nodeIndex", "gltfNode", "parentNode", "GetNodeTransformation", "matrix", "Matrix", "translation", "rotation", "scale", "ArrayToCoord3D", "ArrayToQuaternion", "Transformation", "node", "Node", "childIndex", "childGltfNode", "NodeType", "bufferIndex", "bufferViewIndex", "sparseAccessor", "count", "ImporterIfc", "ImporterBase", "extension", "Direction", "fileContent", "onFinish", "LoadExternalLibrary", "fileBuffer", "modelID", "ifcMeshes", "meshIndex", "ifcMesh", "mesh", "Mesh", "vertexOffset", "ifcGeometries", "geometryIndex", "ifcGeometry", "ifcGeometryData", "ifcVertices", "ifcIndices", "materialIndex", "matrix", "Matrix", "transformation", "Transformation", "i", "x", "y", "z", "coord", "Coord3D", "transformed", "v0", "v1", "v2", "triangle", "Triangle", "lines", "relID", "rel", "objectRelID", "element", "propSetDef", "propSet", "propertyGroup", "PropertyGroup", "property", "elemProperty", "propertyName", "strValue", "Property", "PropertyType", "ifcColor", "color", "ColorFromFloatComponents", "materialName", "IntegerToHexString", "material", "PhongMaterial", "UpdateMaterialTransparency", "ifcString", "decoded", "ifcUnicodeRegEx", "resultString", "match", "unicodeChar", "GeneratorParams", "name", "material", "Generator", "params", "Mesh", "x", "y", "z", "coord", "Coord3D", "vertices", "indices", "i", "vertex", "curve", "v0", "v1", "v2", "triangle", "Triangle", "vertexIndex", "GeneratorHelper", "generator", "height", "topPolygon", "bottomPolygon", "startIndices", "endIndices", "vertexCount", "index", "nextIndex", "endIndex", "GenerateCuboid", "genParams", "xSize", "ySize", "zSize", "Coord2D", "GenerateCylinder", "radius", "segments", "smooth", "GetCylindricalCoord", "angle", "baseVertices", "step", "cylindrical", "GenerateSphere", "GetSphericalCoord", "theta", "phi", "helper", "allLevelVertices", "levels", "levelStep", "cylindricalStep", "levelIndex", "levelVertices", "cylindricalIndex", "topVertex", "bottomVertex", "GeneratePlatonicSolid", "type", "AddVertex", "IsZero", "a", "b", "c", "d", "ImporterO3dv", "ImporterBase", "extension", "Direction", "fileContent", "onFinish", "textContent", "ArrayBufferToUtf8String", "content", "i", "materialContent", "meshContent", "rootNode", "material", "PhysicalMaterial", "ArrayToColor", "ValueOrDefault", "genParams", "GeneratorParams", "parameters", "mesh", "GenerateCuboid", "segments", "smooth", "GenerateCylinder", "GenerateSphere", "radius", "GeneratePlatonicSolid", "nodeContent", "node", "nodeTransformation", "childIndex", "childContent", "childNode", "Node", "NodeType", "element", "propertyGroup", "PropertyGroup", "nodeProperty", "property", "Property", "PropertyType", "contentTransformation", "translation", "Coord3D", "rotation", "Quaternion", "scale", "ArrayToCoord3D", "ArrayToQuaternion", "matrix", "Matrix", "Transformation", "ObjMeshConverter", "mesh", "globalIndex", "globalVertices", "val", "Coord3D", "globalVertexColors", "Color", "globalNormals", "globalUvs", "Coord2D", "triangle", "globalValueArray", "globalToMeshIndices", "valueAdderFunc", "globalValue", "localIndex", "CreateColor", "r", "g", "b", "ColorFromFloatComponents", "ImporterObj", "ImporterBase", "extension", "Direction", "fileContent", "onFinish", "textContent", "ArrayBufferToUtf8String", "ReadLines", "line", "parameters", "ParametersFromLine", "keyword", "name", "Mesh", "NameFromLine", "CreateTexture", "callbacks", "texture", "TextureMap", "textureName", "textureBuffer", "material", "PhongMaterial", "materialName", "materialIndex", "fileName", "fileBuffer", "UpdateMaterialTransparency", "GetRelativeIndex", "index", "count", "vertices", "colors", "normals", "uvs", "i", "vertexParams", "v0", "v1", "v2", "Triangle", "c0", "c1", "c2", "n0", "n1", "n2", "u0", "u1", "u2", "ImporterOff", "ImporterBase", "extension", "Direction", "Mesh", "fileContent", "onFinish", "textContent", "ArrayBufferToUtf8String", "ReadLines", "line", "parameters", "ParametersFromLine", "Coord3D", "vertexCount", "v0", "v1", "v2", "triangle", "Triangle", "PlyHeaderCheckResult", "PlyHeader", "format", "name", "count", "elemType", "countType", "i", "element", "vertex", "face", "triStrips", "hasFaces", "hasTriStrips", "PlyMaterialHandler", "model", "color", "materialName", "IntegerToHexString", "material", "PhongMaterial", "Color", "UpdateMaterialTransparency", "materialIndex", "ImporterPly", "ImporterBase", "extension", "Direction", "Mesh", "fileContent", "onFinish", "headerString", "header", "checkResult", "contentString", "ArrayBufferToUtf8String", "headerContent", "bufferView", "bufferIndex", "char", "ReadLines", "line", "parameters", "ParametersFromLine", "foundVertex", "foundFace", "Coord3D", "vertexCount", "v0", "v1", "v2", "triangle", "Triangle", "headerLength", "ReadByFormat", "reader", "ReadType", "type", "list", "SkipFormat", "startIndex", "SkipAndGetColor", "r", "g", "b", "a", "currFormat", "val", "BinaryReader", "materialHandler", "elements", "elementIndex", "vertexIndex", "x", "y", "z", "faceIndex", "vertices", "faceColor", "triStripIndex", "ccw", "tmp", "ImporterStl", "ImporterBase", "extension", "Direction", "Mesh", "fileContent", "onFinish", "textContent", "ArrayBufferToUtf8String", "ReadLines", "line", "byteLength", "reader", "BinaryReader", "triangleCount", "parameters", "ParametersFromLine", "keyword", "name", "NameFromLine", "Triangle", "normalVector", "Coord3D", "IsPositive", "normalIndex", "vertexIndex", "ReadVector", "coord", "AddVertex", "mesh", "i", "v0", "v1", "v2", "triangle", "normal", "ImporterThreeBase", "ImporterBase", "manager", "loadedObject", "mesh", "fileContent", "onFinish", "LoadLibraries", "libraries", "onError", "i", "LoadExternalLibrary", "isAllLoadersDone", "loadingManager", "mainFileUrl", "CreateObjectUrl", "url", "name", "GetFileName", "GetFileExtension", "buffer", "objectUrl", "threeLoader", "object", "WaitWhile", "err", "GetObjectTransformation", "threeObject", "matrix", "Matrix", "Transformation", "AddObject", "importer", "model", "parentNode", "node", "Node", "childObject", "NodeType", "meshIndex", "mainObject", "rootNode", "threeMesh", "ConvertThreeGeometryToMesh", "materialIndices", "material", "materialIndex", "group", "groupEnd", "j", "threeMaterial", "CreateTexture", "threeMap", "objectUrlToFileName", "GetDataUrl", "img", "imageData", "imageSize", "dataUrl", "base64Buffer", "Base64DataURIToArrayBuffer", "texture", "TextureMap", "textureName", "GetFileExtensionFromMimeType", "PhongMaterial", "ConvertThreeColorToColor", "ImporterThreeFbx", "extension", "Direction", "ImporterThreeDae", "ImporterThreeWrl", "isVisible", "ImporterThree3mf", "ImportSettings", "Color", "ImportErrorCode", "ImportError", "code", "message", "ImportResult", "ImporterFileAccessor", "getBufferCallback", "filePath", "fileName", "GetFileName", "buffer", "textureBuffer", "CreateObjectUrl", "Importer", "ImporterObj", "ImporterStl", "ImporterOff", "ImporterPly", "Importer3ds", "ImporterGltf", "ImporterO3dv", "Importer3dm", "ImporterIfc", "ImporterThreeFbx", "ImporterThreeDae", "ImporterThreeWrl", "ImporterThree3mf", "FileList", "importer", "fileList", "fileSource", "settings", "callbacks", "RunTaskAsync", "onReady", "newFileList", "FileSource", "reset", "foundMissingFile", "i", "missingFile", "newFiles", "importableFiles", "mainFile", "fileNames", "importableFile", "mainFileIndex", "fileAccessor", "fileBuffer", "file", "result", "files", "archives", "LoadExternalLibrary", "archiveFile", "archiveBuffer", "decompressed", "File", "FindImporter", "importers", "importerIndex", "fileIndex", "texture", "RevokeObjectUrl", "ParameterConverter", "integer", "str", "number", "precision", "urls", "camera", "paramParts", "Camera", "Coord3D", "color", "Color", "edgeSettings", "ParameterListBuilder", "separator", "background", "keyword", "urlPart", "ParameterListParser", "paramList", "keywordParams", "backgroundParams", "colorParams", "edgeSettingsParams", "keywordToken", "urlParts", "CreateUrlBuilder", "CreateUrlParser", "urlParams", "CreateModelUrlParameters", "builder", "ModelToThreeConversionParams", "ModelToThreeConversionOutput", "ThreeConversionStateHandler", "callbacks", "threeObject", "ThreeNodeTree", "rootNode", "threeRootNode", "node", "threeNode", "matrix", "threeMatrix", "childNode", "threeChildNode", "meshIndex", "ConvertModelToThreeObject", "model", "params", "output", "CreateThreeMaterial", "stateHandler", "materialIndex", "shadingType", "SetTextureParameters", "texture", "threeTexture", "LoadTexture", "threeMaterial", "onTextureLoaded", "loader", "err", "material", "baseColor", "ConvertColorToThreeColor", "materialParams", "ShadingType", "MaterialType", "specularColor", "IsEqual", "emissiveColor", "CreateThreeMesh", "meshInstanceId", "modelThreeMaterials", "mesh", "triangleCount", "triangleIndices", "i", "a", "b", "aTriangle", "bTriangle", "threeGeometry", "meshThreeMaterials", "meshOriginalMaterials", "modelToThreeMaterials", "vertices", "vertexColors", "normals", "uvs", "groups", "meshHasVertexColors", "meshHasUVs", "triangleIndex", "triangle", "v0", "v1", "v2", "vc0", "vc1", "vc2", "n0", "n1", "n2", "u0", "u1", "u2", "modelMaterialIndex", "group", "threeMesh", "ConvertMesh", "GetMeshType", "MeshType", "ConvertNodeHierarchy", "meshInstances", "RunTasksBatch", "firstMeshInstanceIndex", "lastMeshInstanceIndex", "onReady", "meshInstanceIndex", "meshInstance", "MeshInstanceId", "GetShadingType", "ThreeModelLoader", "Importer", "HasHighpDriverIssue", "files", "fileSource", "settings", "callbacks", "fileNames", "selectFile", "importResult", "params", "ModelToThreeConversionParams", "output", "ModelToThreeConversionOutput", "ConvertModelToThreeObject", "threeObject", "importError", "defaultColor", "ConvertColorToThreeColor", "EmbeddedViewer", "parentElement", "parameters", "IsDefined", "Viewer", "width", "height", "modelUrls", "TransformFileHostUrls", "settings", "ImportSettings", "progressDiv", "ThreeModelLoader", "FileSource", "importResult", "threeObject", "boundingSphere", "meshUserData", "importError", "message", "ImportErrorCode", "Init3DViewerElement", "viewer", "Init3DViewerElements", "onReady", "LoadElement", "element", "camera", "cameraParams", "ParameterConverter", "backgroundColor", "backgroundColorParams", "defaultColor", "defaultColorParams", "edgeSettings", "edgeSettingsParams", "environmentMap", "environmentMapParams", "environmentMapParts", "modelParams", "viewerElements", "elements", "viewerElement", "GetTriangleArea", "v0", "v1", "v2", "a", "CoordDistance3D", "b", "c", "areaSquare", "GetTetrahedronSignedVolume", "DotVector3D", "CrossVector3D", "CalculateVolume", "object3D", "volume", "CalculateSurfaceArea", "surface", "MeshPrimitiveBuffer", "min", "max", "i", "j", "indexTypeSize", "numberTypeSize", "indexCount", "numberCount", "MeshBuffer", "index", "byteLength", "ConvertMeshToMeshBuffer", "mesh", "AddVertexToPrimitiveBuffer", "indices", "primitiveBuffer", "meshVertexToPrimitiveVertices", "GetColorOrDefault", "colorIndex", "forceColors", "Color", "GetUVOrDefault", "uvIndex", "forceUVs", "Coord2D", "AddVertex", "vertex", "normal", "primitiveVertexIndex", "color", "uv", "FindMatchingPrimitiveVertex", "primitiveVertices", "IsEqualColor", "existingColor", "ColorIsEqual", "IsEqualNormal", "normalIndex", "existingNormal", "CoordIsEqual3D", "IsEqualUV", "existingUv", "CoordIsEqual2D", "primitiveVertex", "equalColor", "equalNormal", "equalUv", "existingPrimitiveVertex", "meshBuffer", "triangleCount", "triangleIndices", "a", "b", "aTriangle", "bTriangle", "triangleIndex", "triangle", "v0Indices", "v1Indices", "v2Indices", "ExportedFile", "name", "ArrayBufferToUtf8String", "content", "buffer", "Utf8StringToArrayBuffer", "ExporterBase", "format", "extension", "exporterModel", "onFinish", "files", "originalName", "defaultName", "Exporter3dm", "ExporterBase", "format", "extension", "FileFormat", "exporterModel", "files", "onFinish", "LoadExternalLibrary", "rhino", "ColorToRhinoColor", "color", "rhinoFile", "ExportedFile", "rhinoDoc", "mesh", "meshBuffer", "ConvertMeshToMeshBuffer", "primitiveIndex", "primitive", "threeJson", "material", "rhinoMaterial", "MaterialType", "rhinoMaterialIndex", "rhinoMesh", "rhinoAttributes", "writeOptions", "rhinoDocBuffer", "ExporterGltf", "ExporterBase", "format", "extension", "FileFormat", "exporterModel", "files", "onFinish", "gltfFile", "ExportedFile", "binFile", "meshDataArr", "mainBuffer", "mainJson", "fileNameToIndex", "texture", "fileName", "GetFileName", "textureFile", "textureIndex", "AlignToBoundary", "size", "remainder", "WriteCharacters", "writer", "char", "count", "i", "glbFile", "textureBuffers", "textureOffset", "GetFileExtension", "bufferViewIndex", "textureBuffer", "mainBinaryBufferLength", "mainBinaryBufferAlignedLength", "mainJsonString", "mainJsonBuffer", "Utf8StringToArrayBuffer", "mainJsonBufferLength", "mainJsonBufferAlignedLength", "glbSize", "glbWriter", "BinaryWriter", "mesh", "buffer", "ConvertMeshToMeshBuffer", "mainBufferSize", "meshIndex", "meshData", "primitiveIndex", "primitive", "offset", "SRGBToLinear", "texCoord", "BufferViewCreator", "byteOffset", "byteLength", "jsonMesh", "primitives", "bufferViewCreator", "indicesBufferView", "verticesBufferView", "colorsBufferView", "normalsBufferView", "uvsBufferView", "jsonPrimitive", "bounds", "addTexture", "ExportMaterial", "obj", "material", "ColorToRGBA", "color", "opacity", "ColorToRGB", "GetTextureParams", "textureParams", "extensionName", "jsonMaterial", "baseColorTexture", "Color", "MaterialType", "metallicTexture", "normalTexture", "emissiveTexture", "materialIndex", "ExporterSettings", "settings", "Transformation", "meshInstanceId", "CopyObjectAttributes", "ExporterModel", "model", "index", "vertexCount", "meshInstance", "triangleCount", "meshInstanceCount", "onMeshInstance", "onMesh", "transformation", "transformed", "TransformMesh", "callbacks", "transformedMeshes", "mesh", "vertex", "vertexOffset", "v0", "v1", "v2", "onTriangle", "normal", "CalculateTriangleNormal", "ExporterObj", "ExporterBase", "format", "extension", "FileFormat", "exporterModel", "files", "onFinish", "WriteTexture", "mtlWriter", "keyword", "texture", "fileName", "GetFileName", "file", "textureFile", "ExportedFile", "mtlFile", "objFile", "TextWriter", "materialIndex", "material", "MaterialType", "objWriter", "vertexOffset", "normalOffset", "uvOffset", "usedMaterialName", "mesh", "vertexIndex", "vertex", "normalIndex", "normal", "textureUVIndex", "uv", "triangleIndex", "triangle", "v0", "v1", "v2", "n0", "n1", "n2", "materialName", "u0", "u1", "u2", "ExporterOff", "ExporterBase", "format", "extension", "FileFormat", "exporterModel", "files", "onFinish", "offFile", "ExportedFile", "offWriter", "TextWriter", "x", "y", "z", "v0", "v1", "v2", "ExporterPly", "ExporterBase", "format", "extension", "FileFormat", "exporterModel", "files", "onFinish", "plyFile", "ExportedFile", "plyWriter", "TextWriter", "vertexCount", "triangleCount", "headerText", "x", "y", "z", "v0", "v1", "v2", "fullByteLength", "BinaryWriter", "i", "headerWriter", "ExporterStl", "ExporterBase", "format", "extension", "FileFormat", "exporterModel", "files", "onFinish", "stlFile", "ExportedFile", "stlWriter", "TextWriter", "v0", "v1", "v2", "normal", "triangleCount", "headerSize", "fullByteLength", "BinaryWriter", "i", "Exporter", "ExporterObj", "ExporterStl", "ExporterPly", "ExporterOff", "ExporterGltf", "Exporter3dm", "exporter", "model", "settings", "format", "extension", "callbacks", "i", "currentExporter", "exporterModel", "ExporterModel", "files", "ImporterThreeSvg", "ImporterThreeBase", "extension", "Direction", "manager", "loadedObject", "ShowFill", "path", "style", "GetOrCreateMaterial", "materials", "opacity", "material", "existingMaterial", "object", "shapes", "pathStyle", "pathMaterial", "shape", "geometry", "mesh"]
}
